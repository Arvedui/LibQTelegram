#include "telegramruntime.h"
#include "../mtproto/mtprotorequest.h"
#include "../mtproto/dc/dcsessionmanager.h"
#include "../autogenerated/telegramapi.h"
#include "cache/telegramcache.h"

TelegramRuntime* TelegramRuntime::_instance = NULL;

TelegramRuntime::TelegramRuntime(QObject *parent) : QObject(parent)
{
    this->updateDialogs();
}

QList<DialogObject *> TelegramRuntime::dialogList() const
{
    return this->_dialogs.values();
}

void TelegramRuntime::updateDialogs()
{
    const QHash<TLInt, Dialog*>& dialogs = TELEGRAM_CACHE->dialogs();

    foreach(TLInt dialogid, dialogs.keys())
    {
        Dialog* dialog = dialogs[dialogid];
        this->updateDialog(dialog);
    }
}

DialogObject *TelegramRuntime::updateDialog(Dialog *dialog)
{
    DialogObject* dialogobj = this->runtimeObject(this->_dialogs, dialog);
    MessageObject* topmessageobj = this->messageObject(TELEGRAM_CACHE->message(dialog->topMessage()));

    dialogobj->setTopMessage(topmessageobj);

    if(TelegramHelper::isChannel(dialog))
        dialogobj->setChat(TELEGRAM_CACHE->chat(dialog->peer()->channelId()));
    else if(TelegramHelper::isChat(dialog))
        dialogobj->setChat(TELEGRAM_CACHE->chat(dialog->peer()->chatId()));
    else
        dialogobj->setUser(TELEGRAM_CACHE->user(dialog->peer()->userId()));

    return dialogobj;
}

MessageObject *TelegramRuntime::messageObject(Message *message)
{
    MessageObject* messageobj = this->runtimeObject(this->_messages, message);
    messageobj->setMessage(message);

    if(message->fromId())
        messageobj->setFromUser(TELEGRAM_CACHE->user(message->fromId()));

    return messageobj;
}

TelegramRuntime *TelegramRuntime::runtime()
{
    if(!TelegramRuntime::_instance)
        TelegramRuntime::_instance = new TelegramRuntime();

    return TelegramRuntime::_instance;
}
