#include "cacheinitializer.h"
#include "../../autogenerated/telegramapi.h"
#include "../../mtproto/dc/dcsessionmanager.h"
#include "telegramcache.h"

CacheInitializer::CacheInitializer(QObject *parent) : QObject(parent), _state(CacheInitializer::First)
{

}

void CacheInitializer::initialize()
{
    if(this->_state == CacheInitializer::RequestContacts)
        this->requestContacts();
    else if(this->_state == CacheInitializer::RequestDialogs)
        this->requestDialogs();

    if(this->_state > CacheInitializer::Last)
    {
        TELEGRAM_CACHE_SAVE;
        emit initialized();
    }
}

void CacheInitializer::requestContacts()
{
    MTProtoRequest* req = TelegramAPI::contactsGetContacts(DC_MAIN_SESSION, TLString());
    connect(req, &MTProtoRequest::replied, this, &CacheInitializer::onRequestContactsReplied);
}

void CacheInitializer::requestDialogs()
{
    MTProtoRequest* req = TelegramAPI::messagesGetDialogs(DC_MAIN_SESSION, 0, 0, NULL, 0);
    connect(req, &MTProtoRequest::replied, this, &CacheInitializer::onRequestDialogsReplied);
}

void CacheInitializer::onRequestContactsReplied(MTProtoReply *mtreply)
{
    ContactsContacts contacts;
    contacts.read(mtreply);

    TELEGRAM_CACHE_OBJECTS(contacts.users());

    this->_state++;
    this->initialize();
}

void CacheInitializer::onRequestDialogsReplied(MTProtoReply *mtreply)
{
    MessagesDialogs messagesdialogs;
    messagesdialogs.read(mtreply);

    TELEGRAM_CACHE_OBJECTS(messagesdialogs.dialogs());
    TELEGRAM_CACHE_OBJECTS(messagesdialogs.users());
    TELEGRAM_CACHE_OBJECTS(messagesdialogs.chats());
    TELEGRAM_CACHE_OBJECTS(messagesdialogs.messages());

    this->_state++;
    this->initialize();
}
