#ifndef MESSAGECACHE_H
#define MESSAGECACHE_H

#include <QObject>
#include <QHash>
#include <QSet>
#include "../../../types/basic.h"
#include "../../../autogenerated/types/types.h"
#include "abstractcache.h"

class MessageCache : public AbstractCache
{
    Q_OBJECT

    public:
        typedef TLVector<Message*> MessageList;

    public:
        explicit MessageCache(QObject *parent = 0);
        const MessageList& messages(Dialog* dialog);
        Message* previousMessage(Dialog *dialog, Message* message);
        Message* message(TLInt messageid);
        void cache(const TLVector<Message*>& messages);
        void cache(Message* message);
        bool uncache(TLInt messageid);
        void load();
        void save(const QList<Dialog*>& dialogs) const;

    public slots:
        void edit(Message* message);

    protected:
        virtual void doLoadId(TLInt id, MTProtoStream *mtstream);
        virtual void doSaveId(TLInt id, MTProtoStream *mtstream) const;

    private:
        void sortMessages(TLInt dialogid);
        void saveTop(const QList<Dialog*>& dialogs) const;
        void loadTop();

    private:
        QHash<TLInt, MessageList> _dialogmessages;
        QHash<TLInt, Message*> _messages;
        QHash<TLInt, Message*> _topmessages;
        QSet<TLInt> _cacheloaded;
};

#endif // MESSAGECACHE_H
