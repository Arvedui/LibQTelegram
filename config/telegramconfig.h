#ifndef TELEGRAMCONFIG_H
#define TELEGRAMCONFIG_H

#define TelegramConfig_instance TelegramConfig::config()
#define TelegramConfig_clientState TelegramConfig::config()->updateState()
#define TelegramConfig_serverConfig TelegramConfig::config()->serverConfig()
#define TelegramConfig_setServerConfig(config) TelegramConfig::config()->setServerConfig(config)
#define TelegramConfig_storagePath TelegramConfig::config()->storagePath()
#define TelegramConfig_save TelegramConfig::config()->save()
#define TelegramConfig_me TelegramConfig::config()->me()
#define TelegramConfig_setMe(me) TelegramConfig::config()->setMe(me);
#define TelegramConfig_setDebugMode(debugmode) TelegramConfig::config()->setDebugMode(debugmode)

#define DCConfig_mainConfig (TelegramConfig::config() ? TelegramConfig::config()->mainConfig() : NULL)
#define DCConfig_needsConfiguration TelegramConfig::config()->needsConfiguration()
#define DCConfig_isIPv6 TelegramConfig::config()->isIpv6()
#define DCConfig_isLoggedIn (TelegramConfig::config() ? TelegramConfig::config()->isLoggedIn() : false)
#define DCConfig_fromConfigId(configid) TelegramConfig::config()->dcConfig(configid)
#define DCConfig_fromDcId(dcid) TelegramConfig::config()->fromDcId(dcid)
#define DCConfig_setMainConfig(configid) TelegramConfig::config()->setMainConfig(configid)
#define DCConfig_createConfig(host, port, dcid) TelegramConfig::config()->createConfig(host, port, dcid)
#define DCConfig_migrateConfig(fromdcconfig, todcid) TelegramConfig::config()->migrateConfig(fromdcconfig, todcid)

#include <QObject>
#include <QString>
#include <QHash>
#include "../autogenerated/types/types.h"
#include "../types/basic.h"
#include "dcconfig.h"

class TelegramConfig: public QObject
{
    Q_OBJECT

    private:
        TelegramConfig(QObject* parent = 0);

    public:
        static TelegramConfig* config();
        static TelegramConfig* init(TLInt layernum, TLInt apiid, const QString& apihash, const QString& publickey, const QString &phonenumber);

    public:
        TLInt layerNum() const;
        TLInt apiId() const;
        QString osVersion() const;
        QString applicationVersion() const;
        const QString& apiHash() const;
        const QString& publicKey() const;
        const QString& storagePath() const;
        const QString& deviceModel() const;
        const QString& phoneNumber() const;
        bool needsConfiguration() const;
        bool isLoggedIn() const;
        bool debugMode() const;
        bool isIPv6() const;
        DCConfig *mainConfig() const;
        UpdatesState* updateState();
        Config* serverConfig();
        User* me();

    public:
        DCConfig* createConfig(const QString& host, TLInt port, int dcid);
        DCConfig* migrateConfig(DCConfig* fromconfig,int todcid);
        void setServerConfig(Config* config);
        void setMainConfig(DCConfig *dcconfig);
        void setDebugMode(bool dbgmode);
        void setIpv6(bool ipv6);
        void setDefaultDcId(int dcid);
        void setStoragePath(const QString& storagepath);
        void setDeviceModel(const QString& devicemodel);
        void setPhoneNumber(const QString& phonenumber);
        void setMe(User* me);

    public:
        DCConfig *dcConfig(DCConfig::Id id);
        DCConfig *fromDcId(int dcid);
        void save();
        void load();
        void reset();

    private:
        void updateStoragePath(const QString& storagepath, const QString& phonenumber);
        void write(const QString& filename, const QByteArray &content);
        bool configExists(const QString& filename);
        QByteArray read(const QString& filename);
        void saveDCConfig();
        void loadDCConfig();
        void saveConfig();
        void loadConfig();
        void saveState();
        void loadState();
        void saveMe();
        void loadMe();

    private:
        QHash<DCConfig::Id, DCConfig*> _dcconfig;
        UpdatesState* _updatesstate;
        Config* _config;
        User* _me;

    private:
        QString _apihash;
        QString _publickey;
        QString _storagepath;
        QString _profilestoragepath;
        QString _devicemodel;
        QString _phonenumber;
        TLInt _layernum;
        TLInt _apiid;
        bool _debugmode;
        bool _isipv6;

    private:
        static TelegramConfig* _instance;
        static const QString DCCONFIG_FILE;
        static const QString CONFIG_FILE;
        static const QString STATE_FILE;
        static const QString ME_FILE;
};

#endif // TELEGRAMCONFIG_H
