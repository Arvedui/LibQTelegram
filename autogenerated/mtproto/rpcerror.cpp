// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "rpcerror.h"


RpcError::RpcError(QObject* parent) : TelegramObject(parent)
{
	this->_error_code = 0;
	this->_constructorid = RpcError::CtorRpcError;
}

void RpcError::read(MTProtoStream* mtstream) 
{
	this->_constructorid = mtstream->readTLConstructor();
	
	Q_ASSERT((this->_constructorid == RpcError::CtorRpcError));
	
	if(this->_constructorid == RpcError::CtorRpcError)
	{
		this->_error_code = mtstream->readTLInt();
		this->_error_message = mtstream->readTLString();
	}
}

void RpcError::write(MTProtoStream* mtstream) 
{
	Q_ASSERT((this->_constructorid == RpcError::CtorRpcError));
	
	this->compileFlags();
	mtstream->writeTLConstructor(this->_constructorid);
	
	if(this->_constructorid == RpcError::CtorRpcError)
	{
		mtstream->writeTLInt(this->_error_code);
		mtstream->writeTLString(this->_error_message);
	}
}

void RpcError::compileFlags() 
{
	
}

TLInt RpcError::errorCode() const
{
	return this->_error_code;
}

void RpcError::setErrorCode(TLInt error_code) 
{
	if(this->_error_code == error_code)
		return;

	this->_error_code = error_code;
	emit errorCodeChanged();
}

TLString RpcError::errorMessage() const
{
	return this->_error_message;
}

void RpcError::setErrorMessage(TLString error_message) 
{
	if(this->_error_message == error_message)
		return;

	this->_error_message = error_message;
	emit errorMessageChanged();
}

