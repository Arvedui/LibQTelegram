// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "httpwait.h"


HttpWait::HttpWait(QObject* parent) : TelegramObject(parent)
{
	this->_max_delay = 0;
	this->_wait_after = 0;
	this->_max_wait = 0;
	this->_constructorid = HttpWait::ctorHttpWait;
}

void HttpWait::read(MTProtoStream* mtstream) 
{
	this->_constructorid = mtstream->readTLConstructor();
	
	Q_ASSERT((this->_constructorid == HttpWait::ctorHttpWait));
	
	if(this->_constructorid == HttpWait::ctorHttpWait)
	{
		this->_max_delay = mtstream->readTLInt();
		this->_wait_after = mtstream->readTLInt();
		this->_max_wait = mtstream->readTLInt();
	}
}

void HttpWait::write(MTProtoStream* mtstream) 
{
	Q_ASSERT((this->_constructorid == HttpWait::ctorHttpWait));
	
	this->compileFlags();
	mtstream->writeTLConstructor(this->_constructorid);
	
	if(this->_constructorid == HttpWait::ctorHttpWait)
	{
		mtstream->writeTLInt(this->_max_delay);
		mtstream->writeTLInt(this->_wait_after);
		mtstream->writeTLInt(this->_max_wait);
	}
}

void HttpWait::compileFlags() 
{
	
}

TLInt HttpWait::maxDelay() const
{
	return this->_max_delay;
}

void HttpWait::setMaxDelay(TLInt max_delay) 
{
	if(this->_max_delay == max_delay)
		return;

	this->_max_delay = max_delay;
	emit maxDelayChanged();
}

TLInt HttpWait::waitAfter() const
{
	return this->_wait_after;
}

void HttpWait::setWaitAfter(TLInt wait_after) 
{
	if(this->_wait_after == wait_after)
		return;

	this->_wait_after = wait_after;
	emit waitAfterChanged();
}

TLInt HttpWait::maxWait() const
{
	return this->_max_wait;
}

void HttpWait::setMaxWait(TLInt max_wait) 
{
	if(this->_max_wait == max_wait)
		return;

	this->_max_wait = max_wait;
	emit maxWaitChanged();
}

