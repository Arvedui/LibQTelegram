// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "futuresalt.h"


FutureSalt::FutureSalt(QObject* parent) : TelegramObject(parent)
{
	this->_valid_since = 0;
	this->_valid_until = 0;
	this->_salt = 0;
	this->_constructorid = FutureSalt::ctorFutureSalt;
}

void FutureSalt::read(MTProtoStream* mtstream) 
{
	this->_constructorid = mtstream->readTLConstructor();
	
	Q_ASSERT((this->_constructorid == FutureSalt::ctorFutureSalt));
	
	if(this->_constructorid == FutureSalt::ctorFutureSalt)
	{
		this->_valid_since = mtstream->readTLInt();
		this->_valid_until = mtstream->readTLInt();
		this->_salt = mtstream->readTLLong();
	}
}

void FutureSalt::write(MTProtoStream* mtstream) 
{
	Q_ASSERT((this->_constructorid == FutureSalt::ctorFutureSalt));
	
	this->compileFlags();
	mtstream->writeTLConstructor(this->_constructorid);
	
	if(this->_constructorid == FutureSalt::ctorFutureSalt)
	{
		mtstream->writeTLInt(this->_valid_since);
		mtstream->writeTLInt(this->_valid_until);
		mtstream->writeTLLong(this->_salt);
	}
}

void FutureSalt::compileFlags() 
{
	
}

TLInt FutureSalt::validSince() const
{
	return this->_valid_since;
}

void FutureSalt::setValidSince(TLInt valid_since) 
{
	if(this->_valid_since == valid_since)
		return;

	this->_valid_since = valid_since;
	emit validSinceChanged();
}

TLInt FutureSalt::validUntil() const
{
	return this->_valid_until;
}

void FutureSalt::setValidUntil(TLInt valid_until) 
{
	if(this->_valid_until == valid_until)
		return;

	this->_valid_until = valid_until;
	emit validUntilChanged();
}

TLLong FutureSalt::salt() const
{
	return this->_salt;
}

void FutureSalt::setSalt(TLLong salt) 
{
	if(this->_salt == salt)
		return;

	this->_salt = salt;
	emit saltChanged();
}

