// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "clientdhinnerdata.h"


ClientDHInnerData::ClientDHInnerData(QObject* parent) : TelegramObject(parent)
{
	this->_retry_id = 0;
	this->_constructorid = ClientDHInnerData::CtorClientDHInnerData;
}

void ClientDHInnerData::read(MTProtoStream* mtstream) 
{
	this->_constructorid = mtstream->readTLConstructor();
	
	Q_ASSERT((this->_constructorid == ClientDHInnerData::CtorClientDHInnerData));
	
	if(this->_constructorid == ClientDHInnerData::CtorClientDHInnerData)
	{
		this->_nonce = mtstream->readTLInt128();
		this->_server_nonce = mtstream->readTLInt128();
		this->_retry_id = mtstream->readTLLong();
		this->_g_b = mtstream->readTLString();
	}
}

void ClientDHInnerData::write(MTProtoStream* mtstream) 
{
	Q_ASSERT((this->_constructorid == ClientDHInnerData::CtorClientDHInnerData));
	
	this->compileFlags();
	mtstream->writeTLConstructor(this->_constructorid);
	
	if(this->_constructorid == ClientDHInnerData::CtorClientDHInnerData)
	{
		mtstream->writeTLInt128(this->_nonce);
		mtstream->writeTLInt128(this->_server_nonce);
		mtstream->writeTLLong(this->_retry_id);
		mtstream->writeTLString(this->_g_b);
	}
}

void ClientDHInnerData::compileFlags() 
{
	
}

TLInt128 ClientDHInnerData::nonce() const
{
	return this->_nonce;
}

void ClientDHInnerData::setNonce(TLInt128 nonce) 
{
	if(this->_nonce == nonce)
		return;

	this->_nonce = nonce;
	emit nonceChanged();
}

TLInt128 ClientDHInnerData::serverNonce() const
{
	return this->_server_nonce;
}

void ClientDHInnerData::setServerNonce(TLInt128 server_nonce) 
{
	if(this->_server_nonce == server_nonce)
		return;

	this->_server_nonce = server_nonce;
	emit serverNonceChanged();
}

TLLong ClientDHInnerData::retryId() const
{
	return this->_retry_id;
}

void ClientDHInnerData::setRetryId(TLLong retry_id) 
{
	if(this->_retry_id == retry_id)
		return;

	this->_retry_id = retry_id;
	emit retryIdChanged();
}

TLString ClientDHInnerData::gB() const
{
	return this->_g_b;
}

void ClientDHInnerData::setGB(TLString g_b) 
{
	if(this->_g_b == g_b)
		return;

	this->_g_b = g_b;
	emit gBChanged();
}

