// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "pqinnerdata.h"


PQInnerData::PQInnerData(QObject* parent) : TelegramObject(parent)
{
	this->_constructorid = PQInnerData::ctorPQInnerData;
}

void PQInnerData::read(MTProtoStream* mtstream) 
{
	this->_constructorid = mtstream->readTLConstructor();
	
	Q_ASSERT((this->_constructorid == PQInnerData::ctorPQInnerData));
	
	if(this->_constructorid == PQInnerData::ctorPQInnerData)
	{
		this->_pq = mtstream->readTLString();
		this->_p = mtstream->readTLString();
		this->_q = mtstream->readTLString();
		this->_nonce = mtstream->readTLInt128();
		this->_server_nonce = mtstream->readTLInt128();
		this->_new_nonce = mtstream->readTLInt256();
	}
}

void PQInnerData::write(MTProtoStream* mtstream) 
{
	Q_ASSERT((this->_constructorid == PQInnerData::ctorPQInnerData));
	
	this->compileFlags();
	mtstream->writeTLConstructor(this->_constructorid);
	
	if(this->_constructorid == PQInnerData::ctorPQInnerData)
	{
		mtstream->writeTLString(this->_pq);
		mtstream->writeTLString(this->_p);
		mtstream->writeTLString(this->_q);
		mtstream->writeTLInt128(this->_nonce);
		mtstream->writeTLInt128(this->_server_nonce);
		mtstream->writeTLInt256(this->_new_nonce);
	}
}

void PQInnerData::compileFlags() 
{
	
}

TLString PQInnerData::pq() const
{
	return this->_pq;
}

void PQInnerData::setPq(TLString pq) 
{
	if(this->_pq == pq)
		return;

	this->_pq = pq;
	emit pqChanged();
}

TLString PQInnerData::p() const
{
	return this->_p;
}

void PQInnerData::setP(TLString p) 
{
	if(this->_p == p)
		return;

	this->_p = p;
	emit pChanged();
}

TLString PQInnerData::q() const
{
	return this->_q;
}

void PQInnerData::setQ(TLString q) 
{
	if(this->_q == q)
		return;

	this->_q = q;
	emit qChanged();
}

TLInt128 PQInnerData::nonce() const
{
	return this->_nonce;
}

void PQInnerData::setNonce(TLInt128 nonce) 
{
	if(this->_nonce == nonce)
		return;

	this->_nonce = nonce;
	emit nonceChanged();
}

TLInt128 PQInnerData::serverNonce() const
{
	return this->_server_nonce;
}

void PQInnerData::setServerNonce(TLInt128 server_nonce) 
{
	if(this->_server_nonce == server_nonce)
		return;

	this->_server_nonce = server_nonce;
	emit serverNonceChanged();
}

TLInt256 PQInnerData::newNonce() const
{
	return this->_new_nonce;
}

void PQInnerData::setNewNonce(TLInt256 new_nonce) 
{
	if(this->_new_nonce == new_nonce)
		return;

	this->_new_nonce = new_nonce;
	emit newNonceChanged();
}

