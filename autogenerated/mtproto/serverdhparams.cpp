// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "serverdhparams.h"


ServerDHParams::ServerDHParams(QObject* parent) : TelegramObject(parent)
{
	
}

void ServerDHParams::read(MTProtoStream* mtstream) 
{
	this->_constructorid = mtstream->readTLConstructor();
	
	Q_ASSERT((this->_constructorid == ServerDHParams::CtorServerDHParamsFail) ||
		 (this->_constructorid == ServerDHParams::CtorServerDHParamsOk));
	
	if(this->_constructorid == ServerDHParams::CtorServerDHParamsFail)
	{
		this->_nonce = mtstream->readTLInt128();
		this->_server_nonce = mtstream->readTLInt128();
		this->_new_nonce_hash = mtstream->readTLInt128();
	}
	else if(this->_constructorid == ServerDHParams::CtorServerDHParamsOk)
	{
		this->_nonce = mtstream->readTLInt128();
		this->_server_nonce = mtstream->readTLInt128();
		this->_encrypted_answer = mtstream->readTLString();
	}
}

void ServerDHParams::write(MTProtoStream* mtstream) 
{
	Q_ASSERT((this->_constructorid == ServerDHParams::CtorServerDHParamsFail) ||
		 (this->_constructorid == ServerDHParams::CtorServerDHParamsOk));
	
	this->compileFlags();
	mtstream->writeTLConstructor(this->_constructorid);
	
	if(this->_constructorid == ServerDHParams::CtorServerDHParamsFail)
	{
		mtstream->writeTLInt128(this->_nonce);
		mtstream->writeTLInt128(this->_server_nonce);
		mtstream->writeTLInt128(this->_new_nonce_hash);
	}
	else if(this->_constructorid == ServerDHParams::CtorServerDHParamsOk)
	{
		mtstream->writeTLInt128(this->_nonce);
		mtstream->writeTLInt128(this->_server_nonce);
		mtstream->writeTLString(this->_encrypted_answer);
	}
}

void ServerDHParams::compileFlags() 
{
	
}

TLInt128 ServerDHParams::nonce() const
{
	return this->_nonce;
}

void ServerDHParams::setNonce(TLInt128 nonce) 
{
	if(this->_nonce == nonce)
		return;

	this->_nonce = nonce;
	emit nonceChanged();
}

TLInt128 ServerDHParams::serverNonce() const
{
	return this->_server_nonce;
}

void ServerDHParams::setServerNonce(TLInt128 server_nonce) 
{
	if(this->_server_nonce == server_nonce)
		return;

	this->_server_nonce = server_nonce;
	emit serverNonceChanged();
}

TLInt128 ServerDHParams::newNonceHash() const
{
	return this->_new_nonce_hash;
}

void ServerDHParams::setNewNonceHash(TLInt128 new_nonce_hash) 
{
	if(this->_new_nonce_hash == new_nonce_hash)
		return;

	this->_new_nonce_hash = new_nonce_hash;
	emit newNonceHashChanged();
}

TLString ServerDHParams::encryptedAnswer() const
{
	return this->_encrypted_answer;
}

void ServerDHParams::setEncryptedAnswer(TLString encrypted_answer) 
{
	if(this->_encrypted_answer == encrypted_answer)
		return;

	this->_encrypted_answer = encrypted_answer;
	emit encryptedAnswerChanged();
}

