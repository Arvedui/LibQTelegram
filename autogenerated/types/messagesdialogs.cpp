// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "messagesdialogs.h"


MessagesDialogs::MessagesDialogs(QObject* parent) : TelegramObject(parent)
{
	this->_count = 0;
}

void MessagesDialogs::read(MTProtoStream* mtstream) 
{
	this->_constructorid = mtstream->readTLConstructor();
	
	Q_ASSERT((this->_constructorid == MessagesDialogs::ctorMessagesDialogs) ||
		 (this->_constructorid == MessagesDialogs::ctorMessagesDialogsSlice));
	
	if(this->_constructorid == MessagesDialogs::ctorMessagesDialogs)
	{
		mtstream->readTLVector<Dialog>(this->_dialogs, false);
		mtstream->readTLVector<Message>(this->_messages, false);
		mtstream->readTLVector<Chat>(this->_chats, false);
		mtstream->readTLVector<User>(this->_users, false);
	}
	else if(this->_constructorid == MessagesDialogs::ctorMessagesDialogsSlice)
	{
		this->_count = mtstream->readTLInt();
		mtstream->readTLVector<Dialog>(this->_dialogs, false);
		mtstream->readTLVector<Message>(this->_messages, false);
		mtstream->readTLVector<Chat>(this->_chats, false);
		mtstream->readTLVector<User>(this->_users, false);
	}
}

void MessagesDialogs::write(MTProtoStream* mtstream) 
{
	Q_ASSERT((this->_constructorid == MessagesDialogs::ctorMessagesDialogs) ||
		 (this->_constructorid == MessagesDialogs::ctorMessagesDialogsSlice));
	
	this->compileFlags();
	mtstream->writeTLConstructor(this->_constructorid);
	
	if(this->_constructorid == MessagesDialogs::ctorMessagesDialogs)
	{
		mtstream->writeTLVector(this->_dialogs, false);
		mtstream->writeTLVector(this->_messages, false);
		mtstream->writeTLVector(this->_chats, false);
		mtstream->writeTLVector(this->_users, false);
	}
	else if(this->_constructorid == MessagesDialogs::ctorMessagesDialogsSlice)
	{
		mtstream->writeTLInt(this->_count);
		mtstream->writeTLVector(this->_dialogs, false);
		mtstream->writeTLVector(this->_messages, false);
		mtstream->writeTLVector(this->_chats, false);
		mtstream->writeTLVector(this->_users, false);
	}
}

void MessagesDialogs::compileFlags() 
{
	
}

const TLVector<Dialog*>& MessagesDialogs::dialogs() const
{
	return this->_dialogs;
}

void MessagesDialogs::setDialogs(const TLVector<Dialog*>& dialogs) 
{
	if(this->_dialogs == dialogs)
		return;

	this->_dialogs = dialogs;
	emit dialogsChanged();
}

const TLVector<Message*>& MessagesDialogs::messages() const
{
	return this->_messages;
}

void MessagesDialogs::setMessages(const TLVector<Message*>& messages) 
{
	if(this->_messages == messages)
		return;

	this->_messages = messages;
	emit messagesChanged();
}

const TLVector<Chat*>& MessagesDialogs::chats() const
{
	return this->_chats;
}

void MessagesDialogs::setChats(const TLVector<Chat*>& chats) 
{
	if(this->_chats == chats)
		return;

	this->_chats = chats;
	emit chatsChanged();
}

const TLVector<User*>& MessagesDialogs::users() const
{
	return this->_users;
}

void MessagesDialogs::setUsers(const TLVector<User*>& users) 
{
	if(this->_users == users)
		return;

	this->_users = users;
	emit usersChanged();
}

TLInt MessagesDialogs::count() const
{
	return this->_count;
}

void MessagesDialogs::setCount(TLInt count) 
{
	if(this->_count == count)
		return;

	this->_count = count;
	emit countChanged();
}

