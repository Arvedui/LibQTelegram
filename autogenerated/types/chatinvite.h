#ifndef CHATINVITE_H
#define CHATINVITE_H

// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "../../types/telegramobject.h"
#include "../../types/basic.h"
#include "chat.h"
#include "chatphoto.h"
#include "user.h"

class ChatInvite: public TelegramObject
{
	Q_OBJECT

	Q_PROPERTY(Chat* chat READ chat WRITE setChat NOTIFY chatChanged)
	Q_PROPERTY(TLInt flags READ flags WRITE setFlags NOTIFY flagsChanged)
	Q_PROPERTY(TLTrue isChannel READ isChannel WRITE setIsChannel NOTIFY isChannelChanged)
	Q_PROPERTY(TLTrue isBroadcast READ isBroadcast WRITE setIsBroadcast NOTIFY isBroadcastChanged)
	Q_PROPERTY(TLTrue isPublic READ isPublic WRITE setIsPublic NOTIFY isPublicChanged)
	Q_PROPERTY(TLTrue isMegagroup READ isMegagroup WRITE setIsMegagroup NOTIFY isMegagroupChanged)
	Q_PROPERTY(TLString title READ title WRITE setTitle NOTIFY titleChanged)
	Q_PROPERTY(ChatPhoto* photo READ photo WRITE setPhoto NOTIFY photoChanged)
	Q_PROPERTY(TLInt participantsCount READ participantsCount WRITE setParticipantsCount NOTIFY participantsCountChanged)
	Q_PROPERTY(TLVector<User*> participants READ participants WRITE setParticipants NOTIFY participantsChanged)

	Q_ENUMS(Constructors)

	public:
		enum Constructors {
			ctorChatInviteAlready = 0x5a686d7c,
			ctorChatInvite = 0xdb74f558,
		};

	public:
		explicit ChatInvite(QObject* parent = 0);
		virtual void read(MTProtoStream* mtstream);
		virtual void write(MTProtoStream* mtstream);
	protected:
		virtual void compileFlags();
	public:
		Chat* chat() const;
		void setChat(Chat* chat);
		TLInt flags() const;
		void setFlags(TLInt flags);
		TLTrue isChannel() const;
		void setIsChannel(TLTrue is_channel);
		TLTrue isBroadcast() const;
		void setIsBroadcast(TLTrue is_broadcast);
		TLTrue isPublic() const;
		void setIsPublic(TLTrue is_public);
		TLTrue isMegagroup() const;
		void setIsMegagroup(TLTrue is_megagroup);
		TLString title() const;
		void setTitle(TLString title);
		ChatPhoto* photo() const;
		void setPhoto(ChatPhoto* photo);
		TLInt participantsCount() const;
		void setParticipantsCount(TLInt participants_count);
		const TLVector<User*>& participants() const;
		void setParticipants(const TLVector<User*>& participants);

	signals:
		void chatChanged();
		void flagsChanged();
		void isChannelChanged();
		void isBroadcastChanged();
		void isPublicChanged();
		void isMegagroupChanged();
		void titleChanged();
		void photoChanged();
		void participantsCountChanged();
		void participantsChanged();

	private:
		Chat* _chat;
		TLInt _flags;
		TLTrue _is_channel;
		TLTrue _is_broadcast;
		TLTrue _is_public;
		TLTrue _is_megagroup;
		TLString _title;
		ChatPhoto* _photo;
		TLInt _participants_count;
		TLVector<User*> _participants;

};

#endif // CHATINVITE_H
