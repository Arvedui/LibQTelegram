#ifndef MESSAGE_H
#define MESSAGE_H

// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "peer.h"
#include "messagemedia.h"
#include "messageaction.h"
#include "../../types/telegramobject.h"
#include "replymarkup.h"
#include "../../types/basic.h"
#include "messageentity.h"
#include "messagefwdheader.h"

class Message: public TelegramObject
{
	Q_OBJECT

	Q_PROPERTY(TLInt id READ id WRITE setId NOTIFY idChanged)
	Q_PROPERTY(TLInt flags READ flags WRITE setFlags NOTIFY flagsChanged)
	Q_PROPERTY(TLTrue isOut READ isOut WRITE setIsOut NOTIFY isOutChanged)
	Q_PROPERTY(TLTrue isMentioned READ isMentioned WRITE setIsMentioned NOTIFY isMentionedChanged)
	Q_PROPERTY(TLTrue isMediaUnread READ isMediaUnread WRITE setIsMediaUnread NOTIFY isMediaUnreadChanged)
	Q_PROPERTY(TLTrue isSilent READ isSilent WRITE setIsSilent NOTIFY isSilentChanged)
	Q_PROPERTY(TLTrue isPost READ isPost WRITE setIsPost NOTIFY isPostChanged)
	Q_PROPERTY(TLInt fromId READ fromId WRITE setFromId NOTIFY fromIdChanged)
	Q_PROPERTY(Peer* toId READ toId WRITE setToId NOTIFY toIdChanged)
	Q_PROPERTY(MessageFwdHeader* fwdFrom READ fwdFrom WRITE setFwdFrom NOTIFY fwdFromChanged)
	Q_PROPERTY(TLInt viaBotId READ viaBotId WRITE setViaBotId NOTIFY viaBotIdChanged)
	Q_PROPERTY(TLInt replyToMsgId READ replyToMsgId WRITE setReplyToMsgId NOTIFY replyToMsgIdChanged)
	Q_PROPERTY(TLInt date READ date WRITE setDate NOTIFY dateChanged)
	Q_PROPERTY(TLString message READ message WRITE setMessage NOTIFY messageChanged)
	Q_PROPERTY(MessageMedia* media READ media WRITE setMedia NOTIFY mediaChanged)
	Q_PROPERTY(ReplyMarkup* replyMarkup READ replyMarkup WRITE setReplyMarkup NOTIFY replyMarkupChanged)
	Q_PROPERTY(TLVector<MessageEntity*> entities READ entities WRITE setEntities NOTIFY entitiesChanged)
	Q_PROPERTY(TLInt views READ views WRITE setViews NOTIFY viewsChanged)
	Q_PROPERTY(TLInt editDate READ editDate WRITE setEditDate NOTIFY editDateChanged)
	Q_PROPERTY(MessageAction* action READ action WRITE setAction NOTIFY actionChanged)

	Q_ENUMS(Constructors)

	public:
		enum Constructors {
			CtorMessageEmpty = 0x83e5de54,
			CtorMessage = 0xc09be45f,
			CtorMessageService = 0x9e19a1f6,
		};

	public:
		explicit Message(QObject* parent = 0);
		virtual void read(MTProtoStream* mtstream);
		virtual void write(MTProtoStream* mtstream);
	protected:
		virtual void compileFlags();
	public:
		TLInt id() const;
		void setId(TLInt id);
		TLInt flags() const;
		void setFlags(TLInt flags);
		TLTrue isOut() const;
		void setIsOut(TLTrue is_out);
		TLTrue isMentioned() const;
		void setIsMentioned(TLTrue is_mentioned);
		TLTrue isMediaUnread() const;
		void setIsMediaUnread(TLTrue is_media_unread);
		TLTrue isSilent() const;
		void setIsSilent(TLTrue is_silent);
		TLTrue isPost() const;
		void setIsPost(TLTrue is_post);
		TLInt fromId() const;
		void setFromId(TLInt from_id);
		Peer* toId() const;
		void setToId(Peer* to_id);
		MessageFwdHeader* fwdFrom() const;
		void setFwdFrom(MessageFwdHeader* fwd_from);
		TLInt viaBotId() const;
		void setViaBotId(TLInt via_bot_id);
		TLInt replyToMsgId() const;
		void setReplyToMsgId(TLInt reply_to_msg_id);
		TLInt date() const;
		void setDate(TLInt date);
		TLString message() const;
		void setMessage(TLString message);
		MessageMedia* media() const;
		void setMedia(MessageMedia* media);
		ReplyMarkup* replyMarkup() const;
		void setReplyMarkup(ReplyMarkup* reply_markup);
		const TLVector<MessageEntity*>& entities() const;
		void setEntities(const TLVector<MessageEntity*>& entities);
		TLInt views() const;
		void setViews(TLInt views);
		TLInt editDate() const;
		void setEditDate(TLInt edit_date);
		MessageAction* action() const;
		void setAction(MessageAction* action);

	signals:
		void idChanged();
		void flagsChanged();
		void isOutChanged();
		void isMentionedChanged();
		void isMediaUnreadChanged();
		void isSilentChanged();
		void isPostChanged();
		void fromIdChanged();
		void toIdChanged();
		void fwdFromChanged();
		void viaBotIdChanged();
		void replyToMsgIdChanged();
		void dateChanged();
		void messageChanged();
		void mediaChanged();
		void replyMarkupChanged();
		void entitiesChanged();
		void viewsChanged();
		void editDateChanged();
		void actionChanged();

	private:
		TLInt _id;
		TLInt _flags;
		TLTrue _is_out;
		TLTrue _is_mentioned;
		TLTrue _is_media_unread;
		TLTrue _is_silent;
		TLTrue _is_post;
		TLInt _from_id;
		Peer* _to_id;
		MessageFwdHeader* _fwd_from;
		TLInt _via_bot_id;
		TLInt _reply_to_msg_id;
		TLInt _date;
		TLString _message;
		MessageMedia* _media;
		ReplyMarkup* _reply_markup;
		TLVector<MessageEntity*> _entities;
		TLInt _views;
		TLInt _edit_date;
		MessageAction* _action;

};

#endif // MESSAGE_H
