// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "contactsresolvedpeer.h"


ContactsResolvedPeer::ContactsResolvedPeer(QObject* parent) : TelegramObject(parent)
{
	this->_peer = NULL;
	this->_constructorid = ContactsResolvedPeer::ctorContactsResolvedPeer;
}

void ContactsResolvedPeer::read(MTProtoStream* mtstream) 
{
	this->_constructorid = mtstream->readTLConstructor();
	
	Q_ASSERT((this->_constructorid == ContactsResolvedPeer::ctorContactsResolvedPeer));
	
	if(this->_constructorid == ContactsResolvedPeer::ctorContactsResolvedPeer)
	{
		RESET_TLTYPE(Peer, this->_peer);
		this->_peer->read(mtstream);
		mtstream->readTLVector<Chat>(this->_chats, false);
		mtstream->readTLVector<User>(this->_users, false);
	}
}

void ContactsResolvedPeer::write(MTProtoStream* mtstream) 
{
	Q_ASSERT((this->_constructorid == ContactsResolvedPeer::ctorContactsResolvedPeer));
	
	this->compileFlags();
	mtstream->writeTLConstructor(this->_constructorid);
	
	if(this->_constructorid == ContactsResolvedPeer::ctorContactsResolvedPeer)
	{
		Q_ASSERT(this->_peer != NULL);
		this->_peer->write(mtstream);
		mtstream->writeTLVector(this->_chats, false);
		mtstream->writeTLVector(this->_users, false);
	}
}

void ContactsResolvedPeer::compileFlags() 
{
	
}

Peer* ContactsResolvedPeer::peer() const
{
	return this->_peer;
}

void ContactsResolvedPeer::setPeer(Peer* peer) 
{
	if(this->_peer == peer)
		return;

	this->_peer = peer;
	emit peerChanged();
}

const TLVector<Chat*>& ContactsResolvedPeer::chats() const
{
	return this->_chats;
}

void ContactsResolvedPeer::setChats(const TLVector<Chat*>& chats) 
{
	if(this->_chats == chats)
		return;

	this->_chats = chats;
	emit chatsChanged();
}

const TLVector<User*>& ContactsResolvedPeer::users() const
{
	return this->_users;
}

void ContactsResolvedPeer::setUsers(const TLVector<User*>& users) 
{
	if(this->_users == users)
		return;

	this->_users = users;
	emit usersChanged();
}

