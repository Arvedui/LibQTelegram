// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "toppeercategorypeers.h"


TopPeerCategoryPeers::TopPeerCategoryPeers(QObject* parent) : TelegramObject(parent)
{
	this->_category = NULL;
	this->_count = 0;
	this->_constructorid = TopPeerCategoryPeers::ctorTopPeerCategoryPeers;
}

void TopPeerCategoryPeers::read(MTProtoStream* mtstream) 
{
	this->_constructorid = mtstream->readTLConstructor();
	
	Q_ASSERT((this->_constructorid == TopPeerCategoryPeers::ctorTopPeerCategoryPeers));
	
	if(this->_constructorid == TopPeerCategoryPeers::ctorTopPeerCategoryPeers)
	{
		RESET_TLTYPE(TopPeerCategory, this->_category);
		this->_category->read(mtstream);
		this->_count = mtstream->readTLInt();
		mtstream->readTLVector<TopPeer>(this->_peers, false);
	}
}

void TopPeerCategoryPeers::write(MTProtoStream* mtstream) 
{
	Q_ASSERT((this->_constructorid == TopPeerCategoryPeers::ctorTopPeerCategoryPeers));
	
	this->compileFlags();
	mtstream->writeTLConstructor(this->_constructorid);
	
	if(this->_constructorid == TopPeerCategoryPeers::ctorTopPeerCategoryPeers)
	{
		Q_ASSERT(this->_category != NULL);
		this->_category->write(mtstream);
		mtstream->writeTLInt(this->_count);
		mtstream->writeTLVector(this->_peers, false);
	}
}

void TopPeerCategoryPeers::compileFlags() 
{
	
}

TopPeerCategory* TopPeerCategoryPeers::category() const
{
	return this->_category;
}

void TopPeerCategoryPeers::setCategory(TopPeerCategory* category) 
{
	if(this->_category == category)
		return;

	this->_category = category;
	emit categoryChanged();
}

TLInt TopPeerCategoryPeers::count() const
{
	return this->_count;
}

void TopPeerCategoryPeers::setCount(TLInt count) 
{
	if(this->_count == count)
		return;

	this->_count = count;
	emit countChanged();
}

const TLVector<TopPeer*>& TopPeerCategoryPeers::peers() const
{
	return this->_peers;
}

void TopPeerCategoryPeers::setPeers(const TLVector<TopPeer*>& peers) 
{
	if(this->_peers == peers)
		return;

	this->_peers = peers;
	emit peersChanged();
}

