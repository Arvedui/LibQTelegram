// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "inputfilelocation.h"


InputFileLocation::InputFileLocation(QObject* parent) : TelegramObject(parent)
{
	this->_volume_id = 0;
	this->_local_id = 0;
	this->_secret = 0;
	this->_id = 0;
	this->_access_hash = 0;
	this->_version = 0;
}

void InputFileLocation::read(MTProtoStream* mtstream) 
{
	this->_constructorid = mtstream->readTLConstructor();
	
	Q_ASSERT((this->_constructorid == InputFileLocation::ctorInputFileLocation) ||
		 (this->_constructorid == InputFileLocation::ctorInputEncryptedFileLocation) ||
		 (this->_constructorid == InputFileLocation::ctorInputDocumentFileLocation));
	
	if(this->_constructorid == InputFileLocation::ctorInputFileLocation)
	{
		this->_volume_id = mtstream->readTLLong();
		this->_local_id = mtstream->readTLInt();
		this->_secret = mtstream->readTLLong();
	}
	else if(this->_constructorid == InputFileLocation::ctorInputEncryptedFileLocation)
	{
		this->_id = mtstream->readTLLong();
		this->_access_hash = mtstream->readTLLong();
	}
	else if(this->_constructorid == InputFileLocation::ctorInputDocumentFileLocation)
	{
		this->_id = mtstream->readTLLong();
		this->_access_hash = mtstream->readTLLong();
		this->_version = mtstream->readTLInt();
	}
}

void InputFileLocation::write(MTProtoStream* mtstream) 
{
	Q_ASSERT((this->_constructorid == InputFileLocation::ctorInputFileLocation) ||
		 (this->_constructorid == InputFileLocation::ctorInputEncryptedFileLocation) ||
		 (this->_constructorid == InputFileLocation::ctorInputDocumentFileLocation));
	
	this->compileFlags();
	mtstream->writeTLConstructor(this->_constructorid);
	
	if(this->_constructorid == InputFileLocation::ctorInputFileLocation)
	{
		mtstream->writeTLLong(this->_volume_id);
		mtstream->writeTLInt(this->_local_id);
		mtstream->writeTLLong(this->_secret);
	}
	else if(this->_constructorid == InputFileLocation::ctorInputEncryptedFileLocation)
	{
		mtstream->writeTLLong(this->_id);
		mtstream->writeTLLong(this->_access_hash);
	}
	else if(this->_constructorid == InputFileLocation::ctorInputDocumentFileLocation)
	{
		mtstream->writeTLLong(this->_id);
		mtstream->writeTLLong(this->_access_hash);
		mtstream->writeTLInt(this->_version);
	}
}

void InputFileLocation::compileFlags() 
{
	
}

TLLong InputFileLocation::volumeId() const
{
	return this->_volume_id;
}

void InputFileLocation::setVolumeId(TLLong volume_id) 
{
	if(this->_volume_id == volume_id)
		return;

	this->_volume_id = volume_id;
	emit volumeIdChanged();
}

TLInt InputFileLocation::localId() const
{
	return this->_local_id;
}

void InputFileLocation::setLocalId(TLInt local_id) 
{
	if(this->_local_id == local_id)
		return;

	this->_local_id = local_id;
	emit localIdChanged();
}

TLLong InputFileLocation::secret() const
{
	return this->_secret;
}

void InputFileLocation::setSecret(TLLong secret) 
{
	if(this->_secret == secret)
		return;

	this->_secret = secret;
	emit secretChanged();
}

TLLong InputFileLocation::id() const
{
	return this->_id;
}

void InputFileLocation::setId(TLLong id) 
{
	if(this->_id == id)
		return;

	this->_id = id;
	emit idChanged();
}

TLLong InputFileLocation::accessHash() const
{
	return this->_access_hash;
}

void InputFileLocation::setAccessHash(TLLong access_hash) 
{
	if(this->_access_hash == access_hash)
		return;

	this->_access_hash = access_hash;
	emit accessHashChanged();
}

TLInt InputFileLocation::version() const
{
	return this->_version;
}

void InputFileLocation::setVersion(TLInt version) 
{
	if(this->_version == version)
		return;

	this->_version = version;
	emit versionChanged();
}

