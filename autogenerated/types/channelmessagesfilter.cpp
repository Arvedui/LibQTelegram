// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "channelmessagesfilter.h"


ChannelMessagesFilter::ChannelMessagesFilter(QObject* parent) : TelegramObject(parent)
{
	this->_flags = 0;
	this->_is_exclude_new_messages = false;
}

void ChannelMessagesFilter::read(MTProtoStream* mtstream) 
{
	this->_constructorid = mtstream->readTLConstructor();
	
	Q_ASSERT((this->_constructorid == ChannelMessagesFilter::CtorChannelMessagesFilterEmpty) ||
		 (this->_constructorid == ChannelMessagesFilter::CtorChannelMessagesFilter));
	
	if(this->_constructorid == ChannelMessagesFilter::CtorChannelMessagesFilter)
	{
		this->_flags = mtstream->readTLInt();
		this->_is_exclude_new_messages = IS_FLAG_SET(this->_flags, 1);
		mtstream->readTLVector<MessageRange>(this->_ranges, false);
	}
}

void ChannelMessagesFilter::write(MTProtoStream* mtstream) 
{
	Q_ASSERT((this->_constructorid == ChannelMessagesFilter::CtorChannelMessagesFilterEmpty) ||
		 (this->_constructorid == ChannelMessagesFilter::CtorChannelMessagesFilter));
	
	this->compileFlags();
	mtstream->writeTLConstructor(this->_constructorid);
	
	if(this->_constructorid == ChannelMessagesFilter::CtorChannelMessagesFilter)
	{
		mtstream->writeTLInt(this->_flags);
		mtstream->writeTLVector(this->_ranges, false);
	}
}

void ChannelMessagesFilter::compileFlags() 
{
	this->_flags = 0;
	
	if(this->_constructorid == ChannelMessagesFilter::CtorChannelMessagesFilter)
	{
		if(this->_is_exclude_new_messages)
			SET_FLAG_BIT(this->_flags, 1);
	}
}

TLInt ChannelMessagesFilter::flags() const
{
	return this->_flags;
}

void ChannelMessagesFilter::setFlags(TLInt flags) 
{
	if(this->_flags == flags)
		return;

	this->_flags = flags;
	emit flagsChanged();
}

TLTrue ChannelMessagesFilter::isExcludeNewMessages() const
{
	return this->_is_exclude_new_messages;
}

void ChannelMessagesFilter::setIsExcludeNewMessages(TLTrue is_exclude_new_messages) 
{
	if(this->_is_exclude_new_messages == is_exclude_new_messages)
		return;

	this->_is_exclude_new_messages = is_exclude_new_messages;
	emit isExcludeNewMessagesChanged();
}

const TLVector<MessageRange*>& ChannelMessagesFilter::ranges() const
{
	return this->_ranges;
}

void ChannelMessagesFilter::setRanges(const TLVector<MessageRange*>& ranges) 
{
	if(this->_ranges == ranges)
		return;

	this->_ranges = ranges;
	emit rangesChanged();
}

