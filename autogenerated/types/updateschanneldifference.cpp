// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "updateschanneldifference.h"


UpdatesChannelDifference::UpdatesChannelDifference(QObject* parent) : TelegramObject(parent)
{
	this->_flags = 0;
	this->_is_final = false;
	this->_pts = 0;
	this->_timeout = 0;
	this->_top_message = 0;
	this->_read_inbox_max_id = 0;
	this->_read_outbox_max_id = 0;
	this->_unread_count = 0;
}

void UpdatesChannelDifference::read(MTProtoStream* mtstream) 
{
	this->_constructorid = mtstream->readTLConstructor();
	
	Q_ASSERT((this->_constructorid == UpdatesChannelDifference::CtorUpdatesChannelDifferenceEmpty) ||
		 (this->_constructorid == UpdatesChannelDifference::CtorUpdatesChannelDifferenceTooLong) ||
		 (this->_constructorid == UpdatesChannelDifference::CtorUpdatesChannelDifference));
	
	if(this->_constructorid == UpdatesChannelDifference::CtorUpdatesChannelDifferenceEmpty)
	{
		this->_flags = mtstream->readTLInt();
		this->_is_final = IS_FLAG_SET(this->_flags, 0);
		this->_pts = mtstream->readTLInt();
		if(IS_FLAG_SET(this->_flags, 1))
			this->_timeout = mtstream->readTLInt();
	}
	else if(this->_constructorid == UpdatesChannelDifference::CtorUpdatesChannelDifferenceTooLong)
	{
		this->_flags = mtstream->readTLInt();
		this->_is_final = IS_FLAG_SET(this->_flags, 0);
		this->_pts = mtstream->readTLInt();
		if(IS_FLAG_SET(this->_flags, 1))
			this->_timeout = mtstream->readTLInt();
		
		this->_top_message = mtstream->readTLInt();
		this->_read_inbox_max_id = mtstream->readTLInt();
		this->_read_outbox_max_id = mtstream->readTLInt();
		this->_unread_count = mtstream->readTLInt();
		mtstream->readTLVector<Message>(this->_messages, false);
		mtstream->readTLVector<Chat>(this->_chats, false);
		mtstream->readTLVector<User>(this->_users, false);
	}
	else if(this->_constructorid == UpdatesChannelDifference::CtorUpdatesChannelDifference)
	{
		this->_flags = mtstream->readTLInt();
		this->_is_final = IS_FLAG_SET(this->_flags, 0);
		this->_pts = mtstream->readTLInt();
		if(IS_FLAG_SET(this->_flags, 1))
			this->_timeout = mtstream->readTLInt();
		
		mtstream->readTLVector<Message>(this->_new_messages, false);
		mtstream->readTLVector<Update>(this->_other_updates, false);
		mtstream->readTLVector<Chat>(this->_chats, false);
		mtstream->readTLVector<User>(this->_users, false);
	}
}

void UpdatesChannelDifference::write(MTProtoStream* mtstream) 
{
	Q_ASSERT((this->_constructorid == UpdatesChannelDifference::CtorUpdatesChannelDifferenceEmpty) ||
		 (this->_constructorid == UpdatesChannelDifference::CtorUpdatesChannelDifferenceTooLong) ||
		 (this->_constructorid == UpdatesChannelDifference::CtorUpdatesChannelDifference));
	
	this->compileFlags();
	mtstream->writeTLConstructor(this->_constructorid);
	
	if(this->_constructorid == UpdatesChannelDifference::CtorUpdatesChannelDifferenceEmpty)
	{
		mtstream->writeTLInt(this->_flags);
		mtstream->writeTLInt(this->_pts);
		if(IS_FLAG_SET(this->_flags, 1))
			mtstream->writeTLInt(this->_timeout);
	}
	else if(this->_constructorid == UpdatesChannelDifference::CtorUpdatesChannelDifferenceTooLong)
	{
		mtstream->writeTLInt(this->_flags);
		mtstream->writeTLInt(this->_pts);
		if(IS_FLAG_SET(this->_flags, 1))
			mtstream->writeTLInt(this->_timeout);
		
		mtstream->writeTLInt(this->_top_message);
		mtstream->writeTLInt(this->_read_inbox_max_id);
		mtstream->writeTLInt(this->_read_outbox_max_id);
		mtstream->writeTLInt(this->_unread_count);
		mtstream->writeTLVector(this->_messages, false);
		mtstream->writeTLVector(this->_chats, false);
		mtstream->writeTLVector(this->_users, false);
	}
	else if(this->_constructorid == UpdatesChannelDifference::CtorUpdatesChannelDifference)
	{
		mtstream->writeTLInt(this->_flags);
		mtstream->writeTLInt(this->_pts);
		if(IS_FLAG_SET(this->_flags, 1))
			mtstream->writeTLInt(this->_timeout);
		
		mtstream->writeTLVector(this->_new_messages, false);
		mtstream->writeTLVector(this->_other_updates, false);
		mtstream->writeTLVector(this->_chats, false);
		mtstream->writeTLVector(this->_users, false);
	}
}

void UpdatesChannelDifference::compileFlags() 
{
	this->_flags = 0;
	
	if(this->_constructorid == UpdatesChannelDifference::CtorUpdatesChannelDifferenceEmpty)
	{
		if(this->_is_final)
			SET_FLAG_BIT(this->_flags, 0);
		if(this->_timeout)
			SET_FLAG_BIT(this->_flags, 1);
	}
	else if(this->_constructorid == UpdatesChannelDifference::CtorUpdatesChannelDifferenceTooLong)
	{
		if(this->_is_final)
			SET_FLAG_BIT(this->_flags, 0);
		if(this->_timeout)
			SET_FLAG_BIT(this->_flags, 1);
	}
	else if(this->_constructorid == UpdatesChannelDifference::CtorUpdatesChannelDifference)
	{
		if(this->_is_final)
			SET_FLAG_BIT(this->_flags, 0);
		if(this->_timeout)
			SET_FLAG_BIT(this->_flags, 1);
	}
}

TLInt UpdatesChannelDifference::flags() const
{
	return this->_flags;
}

void UpdatesChannelDifference::setFlags(TLInt flags) 
{
	if(this->_flags == flags)
		return;

	this->_flags = flags;
	emit flagsChanged();
}

TLTrue UpdatesChannelDifference::isFinal() const
{
	return this->_is_final;
}

void UpdatesChannelDifference::setIsFinal(TLTrue is_final) 
{
	if(this->_is_final == is_final)
		return;

	this->_is_final = is_final;
	emit isFinalChanged();
}

TLInt UpdatesChannelDifference::pts() const
{
	return this->_pts;
}

void UpdatesChannelDifference::setPts(TLInt pts) 
{
	if(this->_pts == pts)
		return;

	this->_pts = pts;
	emit ptsChanged();
}

TLInt UpdatesChannelDifference::timeout() const
{
	return this->_timeout;
}

void UpdatesChannelDifference::setTimeout(TLInt timeout) 
{
	if(this->_timeout == timeout)
		return;

	this->_timeout = timeout;
	emit timeoutChanged();
}

TLInt UpdatesChannelDifference::topMessage() const
{
	return this->_top_message;
}

void UpdatesChannelDifference::setTopMessage(TLInt top_message) 
{
	if(this->_top_message == top_message)
		return;

	this->_top_message = top_message;
	emit topMessageChanged();
}

TLInt UpdatesChannelDifference::readInboxMaxId() const
{
	return this->_read_inbox_max_id;
}

void UpdatesChannelDifference::setReadInboxMaxId(TLInt read_inbox_max_id) 
{
	if(this->_read_inbox_max_id == read_inbox_max_id)
		return;

	this->_read_inbox_max_id = read_inbox_max_id;
	emit readInboxMaxIdChanged();
}

TLInt UpdatesChannelDifference::readOutboxMaxId() const
{
	return this->_read_outbox_max_id;
}

void UpdatesChannelDifference::setReadOutboxMaxId(TLInt read_outbox_max_id) 
{
	if(this->_read_outbox_max_id == read_outbox_max_id)
		return;

	this->_read_outbox_max_id = read_outbox_max_id;
	emit readOutboxMaxIdChanged();
}

TLInt UpdatesChannelDifference::unreadCount() const
{
	return this->_unread_count;
}

void UpdatesChannelDifference::setUnreadCount(TLInt unread_count) 
{
	if(this->_unread_count == unread_count)
		return;

	this->_unread_count = unread_count;
	emit unreadCountChanged();
}

const TLVector<Message*>& UpdatesChannelDifference::messages() const
{
	return this->_messages;
}

void UpdatesChannelDifference::setMessages(const TLVector<Message*>& messages) 
{
	if(this->_messages == messages)
		return;

	this->_messages = messages;
	emit messagesChanged();
}

const TLVector<Chat*>& UpdatesChannelDifference::chats() const
{
	return this->_chats;
}

void UpdatesChannelDifference::setChats(const TLVector<Chat*>& chats) 
{
	if(this->_chats == chats)
		return;

	this->_chats = chats;
	emit chatsChanged();
}

const TLVector<User*>& UpdatesChannelDifference::users() const
{
	return this->_users;
}

void UpdatesChannelDifference::setUsers(const TLVector<User*>& users) 
{
	if(this->_users == users)
		return;

	this->_users = users;
	emit usersChanged();
}

const TLVector<Message*>& UpdatesChannelDifference::newMessages() const
{
	return this->_new_messages;
}

void UpdatesChannelDifference::setNewMessages(const TLVector<Message*>& new_messages) 
{
	if(this->_new_messages == new_messages)
		return;

	this->_new_messages = new_messages;
	emit newMessagesChanged();
}

const TLVector<Update*>& UpdatesChannelDifference::otherUpdates() const
{
	return this->_other_updates;
}

void UpdatesChannelDifference::setOtherUpdates(const TLVector<Update*>& other_updates) 
{
	if(this->_other_updates == other_updates)
		return;

	this->_other_updates = other_updates;
	emit otherUpdatesChanged();
}

