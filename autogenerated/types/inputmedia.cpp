// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "inputmedia.h"


InputMedia::InputMedia(QObject* parent) : TelegramObject(parent)
{
	this->_flags = 0;
	this->_file = NULL;
	this->_id_inputmediaphoto = NULL;
	this->_geo_point = NULL;
	this->_thumb = NULL;
	this->_id_inputmediadocument = NULL;
	this->_id_inputmediagame = NULL;
}

void InputMedia::read(MTProtoStream* mtstream) 
{
	this->_constructorid = mtstream->readTLConstructor();
	
	Q_ASSERT((this->_constructorid == InputMedia::CtorInputMediaEmpty) ||
		 (this->_constructorid == InputMedia::CtorInputMediaUploadedPhoto) ||
		 (this->_constructorid == InputMedia::CtorInputMediaPhoto) ||
		 (this->_constructorid == InputMedia::CtorInputMediaGeoPoint) ||
		 (this->_constructorid == InputMedia::CtorInputMediaContact) ||
		 (this->_constructorid == InputMedia::CtorInputMediaUploadedDocument) ||
		 (this->_constructorid == InputMedia::CtorInputMediaUploadedThumbDocument) ||
		 (this->_constructorid == InputMedia::CtorInputMediaDocument) ||
		 (this->_constructorid == InputMedia::CtorInputMediaVenue) ||
		 (this->_constructorid == InputMedia::CtorInputMediaGifExternal) ||
		 (this->_constructorid == InputMedia::CtorInputMediaPhotoExternal) ||
		 (this->_constructorid == InputMedia::CtorInputMediaDocumentExternal) ||
		 (this->_constructorid == InputMedia::CtorInputMediaGame));
	
	if(this->_constructorid == InputMedia::CtorInputMediaUploadedPhoto)
	{
		this->_flags = mtstream->readTLInt();
		TLInt file_ctor = mtstream->peekTLConstructor();
		
		if(file_ctor != TLTypes::Null)
		{
			this->resetTLType<InputFile>(&this->_file);
			this->_file->read(mtstream);
		}
		else
		{
			this->nullTLType<InputFile>(&this->_file);
			mtstream->readTLConstructor(); // Skip Null
		}
		
		this->_caption = mtstream->readTLString();
		if(IS_FLAG_SET(this->_flags, 0))
			mtstream->readTLVector<InputDocument>(this->_stickers, false, this);
	}
	else if(this->_constructorid == InputMedia::CtorInputMediaPhoto)
	{
		TLInt id_inputmediaphoto_ctor = mtstream->peekTLConstructor();
		
		if(id_inputmediaphoto_ctor != TLTypes::Null)
		{
			this->resetTLType<InputPhoto>(&this->_id_inputmediaphoto);
			this->_id_inputmediaphoto->read(mtstream);
		}
		else
		{
			this->nullTLType<InputPhoto>(&this->_id_inputmediaphoto);
			mtstream->readTLConstructor(); // Skip Null
		}
		
		this->_caption = mtstream->readTLString();
	}
	else if(this->_constructorid == InputMedia::CtorInputMediaGeoPoint)
	{
		TLInt geo_point_ctor = mtstream->peekTLConstructor();
		
		if(geo_point_ctor != TLTypes::Null)
		{
			this->resetTLType<InputGeoPoint>(&this->_geo_point);
			this->_geo_point->read(mtstream);
		}
		else
		{
			this->nullTLType<InputGeoPoint>(&this->_geo_point);
			mtstream->readTLConstructor(); // Skip Null
		}
	}
	else if(this->_constructorid == InputMedia::CtorInputMediaContact)
	{
		this->_phone_number = mtstream->readTLString();
		this->_first_name = mtstream->readTLString();
		this->_last_name = mtstream->readTLString();
	}
	else if(this->_constructorid == InputMedia::CtorInputMediaUploadedDocument)
	{
		this->_flags = mtstream->readTLInt();
		TLInt file_ctor = mtstream->peekTLConstructor();
		
		if(file_ctor != TLTypes::Null)
		{
			this->resetTLType<InputFile>(&this->_file);
			this->_file->read(mtstream);
		}
		else
		{
			this->nullTLType<InputFile>(&this->_file);
			mtstream->readTLConstructor(); // Skip Null
		}
		
		this->_mime_type = mtstream->readTLString();
		mtstream->readTLVector<DocumentAttribute>(this->_attributes, false, this);
		this->_caption = mtstream->readTLString();
		if(IS_FLAG_SET(this->_flags, 0))
			mtstream->readTLVector<InputDocument>(this->_stickers, false, this);
	}
	else if(this->_constructorid == InputMedia::CtorInputMediaUploadedThumbDocument)
	{
		this->_flags = mtstream->readTLInt();
		TLInt file_ctor = mtstream->peekTLConstructor();
		
		if(file_ctor != TLTypes::Null)
		{
			this->resetTLType<InputFile>(&this->_file);
			this->_file->read(mtstream);
		}
		else
		{
			this->nullTLType<InputFile>(&this->_file);
			mtstream->readTLConstructor(); // Skip Null
		}
		
		TLInt thumb_ctor = mtstream->peekTLConstructor();
		
		if(thumb_ctor != TLTypes::Null)
		{
			this->resetTLType<InputFile>(&this->_thumb);
			this->_thumb->read(mtstream);
		}
		else
		{
			this->nullTLType<InputFile>(&this->_thumb);
			mtstream->readTLConstructor(); // Skip Null
		}
		
		this->_mime_type = mtstream->readTLString();
		mtstream->readTLVector<DocumentAttribute>(this->_attributes, false, this);
		this->_caption = mtstream->readTLString();
		if(IS_FLAG_SET(this->_flags, 0))
			mtstream->readTLVector<InputDocument>(this->_stickers, false, this);
	}
	else if(this->_constructorid == InputMedia::CtorInputMediaDocument)
	{
		TLInt id_inputmediadocument_ctor = mtstream->peekTLConstructor();
		
		if(id_inputmediadocument_ctor != TLTypes::Null)
		{
			this->resetTLType<InputDocument>(&this->_id_inputmediadocument);
			this->_id_inputmediadocument->read(mtstream);
		}
		else
		{
			this->nullTLType<InputDocument>(&this->_id_inputmediadocument);
			mtstream->readTLConstructor(); // Skip Null
		}
		
		this->_caption = mtstream->readTLString();
	}
	else if(this->_constructorid == InputMedia::CtorInputMediaVenue)
	{
		TLInt geo_point_ctor = mtstream->peekTLConstructor();
		
		if(geo_point_ctor != TLTypes::Null)
		{
			this->resetTLType<InputGeoPoint>(&this->_geo_point);
			this->_geo_point->read(mtstream);
		}
		else
		{
			this->nullTLType<InputGeoPoint>(&this->_geo_point);
			mtstream->readTLConstructor(); // Skip Null
		}
		
		this->_title = mtstream->readTLString();
		this->_address = mtstream->readTLString();
		this->_provider = mtstream->readTLString();
		this->_venue_id = mtstream->readTLString();
	}
	else if(this->_constructorid == InputMedia::CtorInputMediaGifExternal)
	{
		this->_url = mtstream->readTLString();
		this->_q = mtstream->readTLString();
	}
	else if(this->_constructorid == InputMedia::CtorInputMediaPhotoExternal)
	{
		this->_url = mtstream->readTLString();
		this->_caption = mtstream->readTLString();
	}
	else if(this->_constructorid == InputMedia::CtorInputMediaDocumentExternal)
	{
		this->_url = mtstream->readTLString();
		this->_caption = mtstream->readTLString();
	}
	else if(this->_constructorid == InputMedia::CtorInputMediaGame)
	{
		TLInt id_inputmediagame_ctor = mtstream->peekTLConstructor();
		
		if(id_inputmediagame_ctor != TLTypes::Null)
		{
			this->resetTLType<InputGame>(&this->_id_inputmediagame);
			this->_id_inputmediagame->read(mtstream);
		}
		else
		{
			this->nullTLType<InputGame>(&this->_id_inputmediagame);
			mtstream->readTLConstructor(); // Skip Null
		}
	}
}

void InputMedia::write(MTProtoStream* mtstream) 
{
	Q_ASSERT((this->_constructorid == InputMedia::CtorInputMediaEmpty) ||
		 (this->_constructorid == InputMedia::CtorInputMediaUploadedPhoto) ||
		 (this->_constructorid == InputMedia::CtorInputMediaPhoto) ||
		 (this->_constructorid == InputMedia::CtorInputMediaGeoPoint) ||
		 (this->_constructorid == InputMedia::CtorInputMediaContact) ||
		 (this->_constructorid == InputMedia::CtorInputMediaUploadedDocument) ||
		 (this->_constructorid == InputMedia::CtorInputMediaUploadedThumbDocument) ||
		 (this->_constructorid == InputMedia::CtorInputMediaDocument) ||
		 (this->_constructorid == InputMedia::CtorInputMediaVenue) ||
		 (this->_constructorid == InputMedia::CtorInputMediaGifExternal) ||
		 (this->_constructorid == InputMedia::CtorInputMediaPhotoExternal) ||
		 (this->_constructorid == InputMedia::CtorInputMediaDocumentExternal) ||
		 (this->_constructorid == InputMedia::CtorInputMediaGame));
	
	this->compileFlags();
	mtstream->writeTLConstructor(this->_constructorid);
	
	if(this->_constructorid == InputMedia::CtorInputMediaUploadedPhoto)
	{
		mtstream->writeTLInt(this->_flags);
		if(this->_file != NULL)
			this->_file->write(mtstream);
		else
			mtstream->writeTLConstructor(TLTypes::Null);
		
		mtstream->writeTLString(this->_caption);
		if(IS_FLAG_SET(this->_flags, 0))
			mtstream->writeTLVector(this->_stickers, false);
	}
	else if(this->_constructorid == InputMedia::CtorInputMediaPhoto)
	{
		if(this->_id_inputmediaphoto != NULL)
			this->_id_inputmediaphoto->write(mtstream);
		else
			mtstream->writeTLConstructor(TLTypes::Null);
		
		mtstream->writeTLString(this->_caption);
	}
	else if(this->_constructorid == InputMedia::CtorInputMediaGeoPoint)
	{
		if(this->_geo_point != NULL)
			this->_geo_point->write(mtstream);
		else
			mtstream->writeTLConstructor(TLTypes::Null);
	}
	else if(this->_constructorid == InputMedia::CtorInputMediaContact)
	{
		mtstream->writeTLString(this->_phone_number);
		mtstream->writeTLString(this->_first_name);
		mtstream->writeTLString(this->_last_name);
	}
	else if(this->_constructorid == InputMedia::CtorInputMediaUploadedDocument)
	{
		mtstream->writeTLInt(this->_flags);
		if(this->_file != NULL)
			this->_file->write(mtstream);
		else
			mtstream->writeTLConstructor(TLTypes::Null);
		
		mtstream->writeTLString(this->_mime_type);
		mtstream->writeTLVector(this->_attributes, false);
		mtstream->writeTLString(this->_caption);
		if(IS_FLAG_SET(this->_flags, 0))
			mtstream->writeTLVector(this->_stickers, false);
	}
	else if(this->_constructorid == InputMedia::CtorInputMediaUploadedThumbDocument)
	{
		mtstream->writeTLInt(this->_flags);
		if(this->_file != NULL)
			this->_file->write(mtstream);
		else
			mtstream->writeTLConstructor(TLTypes::Null);
		
		if(this->_thumb != NULL)
			this->_thumb->write(mtstream);
		else
			mtstream->writeTLConstructor(TLTypes::Null);
		
		mtstream->writeTLString(this->_mime_type);
		mtstream->writeTLVector(this->_attributes, false);
		mtstream->writeTLString(this->_caption);
		if(IS_FLAG_SET(this->_flags, 0))
			mtstream->writeTLVector(this->_stickers, false);
	}
	else if(this->_constructorid == InputMedia::CtorInputMediaDocument)
	{
		if(this->_id_inputmediadocument != NULL)
			this->_id_inputmediadocument->write(mtstream);
		else
			mtstream->writeTLConstructor(TLTypes::Null);
		
		mtstream->writeTLString(this->_caption);
	}
	else if(this->_constructorid == InputMedia::CtorInputMediaVenue)
	{
		if(this->_geo_point != NULL)
			this->_geo_point->write(mtstream);
		else
			mtstream->writeTLConstructor(TLTypes::Null);
		
		mtstream->writeTLString(this->_title);
		mtstream->writeTLString(this->_address);
		mtstream->writeTLString(this->_provider);
		mtstream->writeTLString(this->_venue_id);
	}
	else if(this->_constructorid == InputMedia::CtorInputMediaGifExternal)
	{
		mtstream->writeTLString(this->_url);
		mtstream->writeTLString(this->_q);
	}
	else if(this->_constructorid == InputMedia::CtorInputMediaPhotoExternal)
	{
		mtstream->writeTLString(this->_url);
		mtstream->writeTLString(this->_caption);
	}
	else if(this->_constructorid == InputMedia::CtorInputMediaDocumentExternal)
	{
		mtstream->writeTLString(this->_url);
		mtstream->writeTLString(this->_caption);
	}
	else if(this->_constructorid == InputMedia::CtorInputMediaGame)
	{
		if(this->_id_inputmediagame != NULL)
			this->_id_inputmediagame->write(mtstream);
		else
			mtstream->writeTLConstructor(TLTypes::Null);
	}
}

void InputMedia::compileFlags() 
{
	this->_flags = 0;
	
	if(this->_constructorid == InputMedia::CtorInputMediaUploadedPhoto)
	{
		if(!this->_stickers.isEmpty())
			SET_FLAG_BIT(this->_flags, 0);
	}
	else if(this->_constructorid == InputMedia::CtorInputMediaUploadedDocument)
	{
		if(!this->_stickers.isEmpty())
			SET_FLAG_BIT(this->_flags, 0);
	}
	else if(this->_constructorid == InputMedia::CtorInputMediaUploadedThumbDocument)
	{
		if(!this->_stickers.isEmpty())
			SET_FLAG_BIT(this->_flags, 0);
	}
}

TLInt InputMedia::flags() const
{
	return this->_flags;
}

void InputMedia::setFlags(TLInt flags) 
{
	if(this->_flags == flags)
		return;

	this->_flags = flags;
	emit flagsChanged();
}

InputFile* InputMedia::file() const
{
	return this->_file;
}

void InputMedia::setFile(InputFile* file) 
{
	if(this->_file == file)
		return;

	this->deleteChild(this->_file);
	this->_file = file;

	if(this->_file)
		this->_file->setParent(this);

	emit fileChanged();
}

TLString InputMedia::caption() const
{
	return this->_caption;
}

void InputMedia::setCaption(TLString caption) 
{
	if(this->_caption == caption)
		return;

	this->_caption = caption;
	emit captionChanged();
}

const TLVector<InputDocument*>& InputMedia::stickers() const
{
	return this->_stickers;
}

void InputMedia::setStickers(const TLVector<InputDocument*>& stickers) 
{
	if(this->_stickers == stickers)
		return;

	this->_stickers = stickers;
	emit stickersChanged();
}

InputPhoto* InputMedia::idInputmediaphoto() const
{
	return this->_id_inputmediaphoto;
}

void InputMedia::setIdInputmediaphoto(InputPhoto* id_inputmediaphoto) 
{
	if(this->_id_inputmediaphoto == id_inputmediaphoto)
		return;

	this->deleteChild(this->_id_inputmediaphoto);
	this->_id_inputmediaphoto = id_inputmediaphoto;

	if(this->_id_inputmediaphoto)
		this->_id_inputmediaphoto->setParent(this);

	emit idInputmediaphotoChanged();
}

InputGeoPoint* InputMedia::geoPoint() const
{
	return this->_geo_point;
}

void InputMedia::setGeoPoint(InputGeoPoint* geo_point) 
{
	if(this->_geo_point == geo_point)
		return;

	this->deleteChild(this->_geo_point);
	this->_geo_point = geo_point;

	if(this->_geo_point)
		this->_geo_point->setParent(this);

	emit geoPointChanged();
}

TLString InputMedia::phoneNumber() const
{
	return this->_phone_number;
}

void InputMedia::setPhoneNumber(TLString phone_number) 
{
	if(this->_phone_number == phone_number)
		return;

	this->_phone_number = phone_number;
	emit phoneNumberChanged();
}

TLString InputMedia::firstName() const
{
	return this->_first_name;
}

void InputMedia::setFirstName(TLString first_name) 
{
	if(this->_first_name == first_name)
		return;

	this->_first_name = first_name;
	emit firstNameChanged();
}

TLString InputMedia::lastName() const
{
	return this->_last_name;
}

void InputMedia::setLastName(TLString last_name) 
{
	if(this->_last_name == last_name)
		return;

	this->_last_name = last_name;
	emit lastNameChanged();
}

TLString InputMedia::mimeType() const
{
	return this->_mime_type;
}

void InputMedia::setMimeType(TLString mime_type) 
{
	if(this->_mime_type == mime_type)
		return;

	this->_mime_type = mime_type;
	emit mimeTypeChanged();
}

const TLVector<DocumentAttribute*>& InputMedia::attributes() const
{
	return this->_attributes;
}

void InputMedia::setAttributes(const TLVector<DocumentAttribute*>& attributes) 
{
	if(this->_attributes == attributes)
		return;

	this->_attributes = attributes;
	emit attributesChanged();
}

InputFile* InputMedia::thumb() const
{
	return this->_thumb;
}

void InputMedia::setThumb(InputFile* thumb) 
{
	if(this->_thumb == thumb)
		return;

	this->deleteChild(this->_thumb);
	this->_thumb = thumb;

	if(this->_thumb)
		this->_thumb->setParent(this);

	emit thumbChanged();
}

InputDocument* InputMedia::idInputmediadocument() const
{
	return this->_id_inputmediadocument;
}

void InputMedia::setIdInputmediadocument(InputDocument* id_inputmediadocument) 
{
	if(this->_id_inputmediadocument == id_inputmediadocument)
		return;

	this->deleteChild(this->_id_inputmediadocument);
	this->_id_inputmediadocument = id_inputmediadocument;

	if(this->_id_inputmediadocument)
		this->_id_inputmediadocument->setParent(this);

	emit idInputmediadocumentChanged();
}

TLString InputMedia::title() const
{
	return this->_title;
}

void InputMedia::setTitle(TLString title) 
{
	if(this->_title == title)
		return;

	this->_title = title;
	emit titleChanged();
}

TLString InputMedia::address() const
{
	return this->_address;
}

void InputMedia::setAddress(TLString address) 
{
	if(this->_address == address)
		return;

	this->_address = address;
	emit addressChanged();
}

TLString InputMedia::provider() const
{
	return this->_provider;
}

void InputMedia::setProvider(TLString provider) 
{
	if(this->_provider == provider)
		return;

	this->_provider = provider;
	emit providerChanged();
}

TLString InputMedia::venueId() const
{
	return this->_venue_id;
}

void InputMedia::setVenueId(TLString venue_id) 
{
	if(this->_venue_id == venue_id)
		return;

	this->_venue_id = venue_id;
	emit venueIdChanged();
}

TLString InputMedia::url() const
{
	return this->_url;
}

void InputMedia::setUrl(TLString url) 
{
	if(this->_url == url)
		return;

	this->_url = url;
	emit urlChanged();
}

TLString InputMedia::q() const
{
	return this->_q;
}

void InputMedia::setQ(TLString q) 
{
	if(this->_q == q)
		return;

	this->_q = q;
	emit qChanged();
}

InputGame* InputMedia::idInputmediagame() const
{
	return this->_id_inputmediagame;
}

void InputMedia::setIdInputmediagame(InputGame* id_inputmediagame) 
{
	if(this->_id_inputmediagame == id_inputmediagame)
		return;

	this->deleteChild(this->_id_inputmediagame);
	this->_id_inputmediagame = id_inputmediagame;

	if(this->_id_inputmediagame)
		this->_id_inputmediagame->setParent(this);

	emit idInputmediagameChanged();
}

