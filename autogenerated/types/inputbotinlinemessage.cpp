// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "inputbotinlinemessage.h"


InputBotInlineMessage::InputBotInlineMessage(QObject* parent) : TelegramObject(parent)
{
	this->_flags = 0;
	this->_reply_markup = NULL;
	this->_is_no_webpage = false;
	this->_geo_point = NULL;
}

void InputBotInlineMessage::read(MTProtoStream* mtstream) 
{
	this->_constructorid = mtstream->readTLConstructor();
	
	Q_ASSERT((this->_constructorid == InputBotInlineMessage::ctorInputBotInlineMessageMediaAuto) ||
		 (this->_constructorid == InputBotInlineMessage::ctorInputBotInlineMessageText) ||
		 (this->_constructorid == InputBotInlineMessage::ctorInputBotInlineMessageMediaGeo) ||
		 (this->_constructorid == InputBotInlineMessage::ctorInputBotInlineMessageMediaVenue) ||
		 (this->_constructorid == InputBotInlineMessage::ctorInputBotInlineMessageMediaContact) ||
		 (this->_constructorid == InputBotInlineMessage::ctorInputBotInlineMessageGame));
	
	if(this->_constructorid == InputBotInlineMessage::ctorInputBotInlineMessageMediaAuto)
	{
		this->_flags = mtstream->readTLInt();
		this->_caption = mtstream->readTLString();
		if(IS_FLAG_SET(this->_flags, 2))
		{
			RESET_TLTYPE(ReplyMarkup, this->_reply_markup);
			this->_reply_markup->read(mtstream);
		}
	}
	else if(this->_constructorid == InputBotInlineMessage::ctorInputBotInlineMessageText)
	{
		this->_flags = mtstream->readTLInt();
		this->_is_no_webpage = IS_FLAG_SET(this->_flags, 0);
		this->_message = mtstream->readTLString();
		if(IS_FLAG_SET(this->_flags, 1))
			mtstream->readTLVector<MessageEntity>(this->_entities, false);
		
		if(IS_FLAG_SET(this->_flags, 2))
		{
			RESET_TLTYPE(ReplyMarkup, this->_reply_markup);
			this->_reply_markup->read(mtstream);
		}
	}
	else if(this->_constructorid == InputBotInlineMessage::ctorInputBotInlineMessageMediaGeo)
	{
		this->_flags = mtstream->readTLInt();
		RESET_TLTYPE(InputGeoPoint, this->_geo_point);
		this->_geo_point->read(mtstream);
		if(IS_FLAG_SET(this->_flags, 2))
		{
			RESET_TLTYPE(ReplyMarkup, this->_reply_markup);
			this->_reply_markup->read(mtstream);
		}
	}
	else if(this->_constructorid == InputBotInlineMessage::ctorInputBotInlineMessageMediaVenue)
	{
		this->_flags = mtstream->readTLInt();
		RESET_TLTYPE(InputGeoPoint, this->_geo_point);
		this->_geo_point->read(mtstream);
		this->_title = mtstream->readTLString();
		this->_address = mtstream->readTLString();
		this->_provider = mtstream->readTLString();
		this->_venue_id = mtstream->readTLString();
		if(IS_FLAG_SET(this->_flags, 2))
		{
			RESET_TLTYPE(ReplyMarkup, this->_reply_markup);
			this->_reply_markup->read(mtstream);
		}
	}
	else if(this->_constructorid == InputBotInlineMessage::ctorInputBotInlineMessageMediaContact)
	{
		this->_flags = mtstream->readTLInt();
		this->_phone_number = mtstream->readTLString();
		this->_first_name = mtstream->readTLString();
		this->_last_name = mtstream->readTLString();
		if(IS_FLAG_SET(this->_flags, 2))
		{
			RESET_TLTYPE(ReplyMarkup, this->_reply_markup);
			this->_reply_markup->read(mtstream);
		}
	}
	else if(this->_constructorid == InputBotInlineMessage::ctorInputBotInlineMessageGame)
	{
		this->_flags = mtstream->readTLInt();
		if(IS_FLAG_SET(this->_flags, 2))
		{
			RESET_TLTYPE(ReplyMarkup, this->_reply_markup);
			this->_reply_markup->read(mtstream);
		}
	}
}

void InputBotInlineMessage::write(MTProtoStream* mtstream) 
{
	Q_ASSERT((this->_constructorid == InputBotInlineMessage::ctorInputBotInlineMessageMediaAuto) ||
		 (this->_constructorid == InputBotInlineMessage::ctorInputBotInlineMessageText) ||
		 (this->_constructorid == InputBotInlineMessage::ctorInputBotInlineMessageMediaGeo) ||
		 (this->_constructorid == InputBotInlineMessage::ctorInputBotInlineMessageMediaVenue) ||
		 (this->_constructorid == InputBotInlineMessage::ctorInputBotInlineMessageMediaContact) ||
		 (this->_constructorid == InputBotInlineMessage::ctorInputBotInlineMessageGame));
	
	this->compileFlags();
	mtstream->writeTLConstructor(this->_constructorid);
	
	if(this->_constructorid == InputBotInlineMessage::ctorInputBotInlineMessageMediaAuto)
	{
		mtstream->writeTLInt(this->_flags);
		mtstream->writeTLString(this->_caption);
		if(IS_FLAG_SET(this->_flags, 2))
		{
			Q_ASSERT(this->_reply_markup != NULL);
			this->_reply_markup->write(mtstream);
		}
	}
	else if(this->_constructorid == InputBotInlineMessage::ctorInputBotInlineMessageText)
	{
		mtstream->writeTLInt(this->_flags);
		mtstream->writeTLString(this->_message);
		if(IS_FLAG_SET(this->_flags, 1))
			mtstream->writeTLVector(this->_entities, false);
		
		if(IS_FLAG_SET(this->_flags, 2))
		{
			Q_ASSERT(this->_reply_markup != NULL);
			this->_reply_markup->write(mtstream);
		}
	}
	else if(this->_constructorid == InputBotInlineMessage::ctorInputBotInlineMessageMediaGeo)
	{
		mtstream->writeTLInt(this->_flags);
		Q_ASSERT(this->_geo_point != NULL);
		this->_geo_point->write(mtstream);
		if(IS_FLAG_SET(this->_flags, 2))
		{
			Q_ASSERT(this->_reply_markup != NULL);
			this->_reply_markup->write(mtstream);
		}
	}
	else if(this->_constructorid == InputBotInlineMessage::ctorInputBotInlineMessageMediaVenue)
	{
		mtstream->writeTLInt(this->_flags);
		Q_ASSERT(this->_geo_point != NULL);
		this->_geo_point->write(mtstream);
		mtstream->writeTLString(this->_title);
		mtstream->writeTLString(this->_address);
		mtstream->writeTLString(this->_provider);
		mtstream->writeTLString(this->_venue_id);
		if(IS_FLAG_SET(this->_flags, 2))
		{
			Q_ASSERT(this->_reply_markup != NULL);
			this->_reply_markup->write(mtstream);
		}
	}
	else if(this->_constructorid == InputBotInlineMessage::ctorInputBotInlineMessageMediaContact)
	{
		mtstream->writeTLInt(this->_flags);
		mtstream->writeTLString(this->_phone_number);
		mtstream->writeTLString(this->_first_name);
		mtstream->writeTLString(this->_last_name);
		if(IS_FLAG_SET(this->_flags, 2))
		{
			Q_ASSERT(this->_reply_markup != NULL);
			this->_reply_markup->write(mtstream);
		}
	}
	else if(this->_constructorid == InputBotInlineMessage::ctorInputBotInlineMessageGame)
	{
		mtstream->writeTLInt(this->_flags);
		if(IS_FLAG_SET(this->_flags, 2))
		{
			Q_ASSERT(this->_reply_markup != NULL);
			this->_reply_markup->write(mtstream);
		}
	}
}

void InputBotInlineMessage::compileFlags() 
{
	this->_flags = 0;
	
	if(this->_constructorid == InputBotInlineMessage::ctorInputBotInlineMessageMediaAuto)
	{
		if(this->_reply_markup)
			SET_FLAG_BIT(this->_flags, 2);
	}
	else if(this->_constructorid == InputBotInlineMessage::ctorInputBotInlineMessageText)
	{
		if(this->_is_no_webpage)
			SET_FLAG_BIT(this->_flags, 0);
		if(!this->_entities.isEmpty())
			SET_FLAG_BIT(this->_flags, 1);
		if(this->_reply_markup)
			SET_FLAG_BIT(this->_flags, 2);
	}
	else if(this->_constructorid == InputBotInlineMessage::ctorInputBotInlineMessageMediaGeo)
	{
		if(this->_reply_markup)
			SET_FLAG_BIT(this->_flags, 2);
	}
	else if(this->_constructorid == InputBotInlineMessage::ctorInputBotInlineMessageMediaVenue)
	{
		if(this->_reply_markup)
			SET_FLAG_BIT(this->_flags, 2);
	}
	else if(this->_constructorid == InputBotInlineMessage::ctorInputBotInlineMessageMediaContact)
	{
		if(this->_reply_markup)
			SET_FLAG_BIT(this->_flags, 2);
	}
	else if(this->_constructorid == InputBotInlineMessage::ctorInputBotInlineMessageGame)
	{
		if(this->_reply_markup)
			SET_FLAG_BIT(this->_flags, 2);
	}
}

TLInt InputBotInlineMessage::flags() const
{
	return this->_flags;
}

void InputBotInlineMessage::setFlags(TLInt flags) 
{
	if(this->_flags == flags)
		return;

	this->_flags = flags;
	emit flagsChanged();
}

TLString InputBotInlineMessage::caption() const
{
	return this->_caption;
}

void InputBotInlineMessage::setCaption(TLString caption) 
{
	if(this->_caption == caption)
		return;

	this->_caption = caption;
	emit captionChanged();
}

ReplyMarkup* InputBotInlineMessage::replyMarkup() const
{
	return this->_reply_markup;
}

void InputBotInlineMessage::setReplyMarkup(ReplyMarkup* reply_markup) 
{
	if(this->_reply_markup == reply_markup)
		return;

	this->_reply_markup = reply_markup;
	emit replyMarkupChanged();
}

TLTrue InputBotInlineMessage::isNoWebpage() const
{
	return this->_is_no_webpage;
}

void InputBotInlineMessage::setIsNoWebpage(TLTrue is_no_webpage) 
{
	if(this->_is_no_webpage == is_no_webpage)
		return;

	this->_is_no_webpage = is_no_webpage;
	emit isNoWebpageChanged();
}

TLString InputBotInlineMessage::message() const
{
	return this->_message;
}

void InputBotInlineMessage::setMessage(TLString message) 
{
	if(this->_message == message)
		return;

	this->_message = message;
	emit messageChanged();
}

const TLVector<MessageEntity*>& InputBotInlineMessage::entities() const
{
	return this->_entities;
}

void InputBotInlineMessage::setEntities(const TLVector<MessageEntity*>& entities) 
{
	if(this->_entities == entities)
		return;

	this->_entities = entities;
	emit entitiesChanged();
}

InputGeoPoint* InputBotInlineMessage::geoPoint() const
{
	return this->_geo_point;
}

void InputBotInlineMessage::setGeoPoint(InputGeoPoint* geo_point) 
{
	if(this->_geo_point == geo_point)
		return;

	this->_geo_point = geo_point;
	emit geoPointChanged();
}

TLString InputBotInlineMessage::title() const
{
	return this->_title;
}

void InputBotInlineMessage::setTitle(TLString title) 
{
	if(this->_title == title)
		return;

	this->_title = title;
	emit titleChanged();
}

TLString InputBotInlineMessage::address() const
{
	return this->_address;
}

void InputBotInlineMessage::setAddress(TLString address) 
{
	if(this->_address == address)
		return;

	this->_address = address;
	emit addressChanged();
}

TLString InputBotInlineMessage::provider() const
{
	return this->_provider;
}

void InputBotInlineMessage::setProvider(TLString provider) 
{
	if(this->_provider == provider)
		return;

	this->_provider = provider;
	emit providerChanged();
}

TLString InputBotInlineMessage::venueId() const
{
	return this->_venue_id;
}

void InputBotInlineMessage::setVenueId(TLString venue_id) 
{
	if(this->_venue_id == venue_id)
		return;

	this->_venue_id = venue_id;
	emit venueIdChanged();
}

TLString InputBotInlineMessage::phoneNumber() const
{
	return this->_phone_number;
}

void InputBotInlineMessage::setPhoneNumber(TLString phone_number) 
{
	if(this->_phone_number == phone_number)
		return;

	this->_phone_number = phone_number;
	emit phoneNumberChanged();
}

TLString InputBotInlineMessage::firstName() const
{
	return this->_first_name;
}

void InputBotInlineMessage::setFirstName(TLString first_name) 
{
	if(this->_first_name == first_name)
		return;

	this->_first_name = first_name;
	emit firstNameChanged();
}

TLString InputBotInlineMessage::lastName() const
{
	return this->_last_name;
}

void InputBotInlineMessage::setLastName(TLString last_name) 
{
	if(this->_last_name == last_name)
		return;

	this->_last_name = last_name;
	emit lastNameChanged();
}

