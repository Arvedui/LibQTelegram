#ifndef UPDATESDIFFERENCE_H
#define UPDATESDIFFERENCE_H

// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "chat.h"
#include "../../types/basic.h"
#include "../../types/telegramobject.h"
#include "user.h"
#include "encryptedmessage.h"
#include "update.h"
#include "message.h"
#include "updatesstate.h"

class UpdatesDifference: public TelegramObject
{
	Q_OBJECT

	Q_PROPERTY(TLInt date READ date WRITE setDate NOTIFY dateChanged)
	Q_PROPERTY(TLInt seq READ seq WRITE setSeq NOTIFY seqChanged)
	Q_PROPERTY(TLVector<Message*> newMessages READ newMessages WRITE setNewMessages NOTIFY newMessagesChanged)
	Q_PROPERTY(TLVector<EncryptedMessage*> newEncryptedMessages READ newEncryptedMessages WRITE setNewEncryptedMessages NOTIFY newEncryptedMessagesChanged)
	Q_PROPERTY(TLVector<Update*> otherUpdates READ otherUpdates WRITE setOtherUpdates NOTIFY otherUpdatesChanged)
	Q_PROPERTY(TLVector<Chat*> chats READ chats WRITE setChats NOTIFY chatsChanged)
	Q_PROPERTY(TLVector<User*> users READ users WRITE setUsers NOTIFY usersChanged)
	Q_PROPERTY(UpdatesState* state READ state WRITE setState NOTIFY stateChanged)
	Q_PROPERTY(UpdatesState* intermediateState READ intermediateState WRITE setIntermediateState NOTIFY intermediateStateChanged)

	Q_ENUMS(Constructors)

	public:
		enum Constructors {
			CtorUpdatesDifferenceEmpty = 0x5d75a138,
			CtorUpdatesDifference = 0xf49ca0,
			CtorUpdatesDifferenceSlice = 0xa8fb1981,
		};

	public:
		explicit UpdatesDifference(QObject* parent = 0);
		virtual void read(MTProtoStream* mtstream);
		virtual void write(MTProtoStream* mtstream);
	protected:
		virtual void compileFlags();
	public:
		TLInt date() const;
		void setDate(TLInt date);
		TLInt seq() const;
		void setSeq(TLInt seq);
		const TLVector<Message*>& newMessages() const;
		void setNewMessages(const TLVector<Message*>& new_messages);
		const TLVector<EncryptedMessage*>& newEncryptedMessages() const;
		void setNewEncryptedMessages(const TLVector<EncryptedMessage*>& new_encrypted_messages);
		const TLVector<Update*>& otherUpdates() const;
		void setOtherUpdates(const TLVector<Update*>& other_updates);
		const TLVector<Chat*>& chats() const;
		void setChats(const TLVector<Chat*>& chats);
		const TLVector<User*>& users() const;
		void setUsers(const TLVector<User*>& users);
		UpdatesState* state() const;
		void setState(UpdatesState* state);
		UpdatesState* intermediateState() const;
		void setIntermediateState(UpdatesState* intermediate_state);

	signals:
		void dateChanged();
		void seqChanged();
		void newMessagesChanged();
		void newEncryptedMessagesChanged();
		void otherUpdatesChanged();
		void chatsChanged();
		void usersChanged();
		void stateChanged();
		void intermediateStateChanged();

	private:
		TLInt _date;
		TLInt _seq;
		TLVector<Message*> _new_messages;
		TLVector<EncryptedMessage*> _new_encrypted_messages;
		TLVector<Update*> _other_updates;
		TLVector<Chat*> _chats;
		TLVector<User*> _users;
		UpdatesState* _state;
		UpdatesState* _intermediate_state;

};

#endif // UPDATESDIFFERENCE_H
