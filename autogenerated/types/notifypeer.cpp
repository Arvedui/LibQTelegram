// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "notifypeer.h"


NotifyPeer::NotifyPeer(QObject* parent) : TelegramObject(parent)
{
	this->_peer = NULL;
}

void NotifyPeer::read(MTProtoStream* mtstream) 
{
	this->_constructorid = mtstream->readTLConstructor();
	
	Q_ASSERT((this->_constructorid == NotifyPeer::CtorNotifyPeer) ||
		 (this->_constructorid == NotifyPeer::CtorNotifyUsers) ||
		 (this->_constructorid == NotifyPeer::CtorNotifyChats) ||
		 (this->_constructorid == NotifyPeer::CtorNotifyAll));
	
	if(this->_constructorid == NotifyPeer::CtorNotifyPeer)
	{
		TLInt peer_ctor = mtstream->peekTLConstructor();
		
		if(peer_ctor != TLTypes::Null)
		{
			RESET_TLTYPE(Peer, this->_peer);
			this->_peer->read(mtstream);
		}
		else
		{
			NULL_TLTYPE(this->_peer);
			mtstream->readTLConstructor(); // Skip Null
		}
	}
}

void NotifyPeer::write(MTProtoStream* mtstream) 
{
	Q_ASSERT((this->_constructorid == NotifyPeer::CtorNotifyPeer) ||
		 (this->_constructorid == NotifyPeer::CtorNotifyUsers) ||
		 (this->_constructorid == NotifyPeer::CtorNotifyChats) ||
		 (this->_constructorid == NotifyPeer::CtorNotifyAll));
	
	this->compileFlags();
	mtstream->writeTLConstructor(this->_constructorid);
	
	if(this->_constructorid == NotifyPeer::CtorNotifyPeer)
	{
		if(this->_peer != NULL)
			this->_peer->write(mtstream);
		else
			mtstream->writeTLConstructor(TLTypes::Null);
	}
}

void NotifyPeer::compileFlags() 
{
	
}

Peer* NotifyPeer::peer() const
{
	return this->_peer;
}

void NotifyPeer::setPeer(Peer* peer) 
{
	if(this->_peer == peer)
		return;

	this->_peer = peer;
	emit peerChanged();
}

