#ifndef REPLYMARKUP_H
#define REPLYMARKUP_H

// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "../../types/basic.h"
#include "keyboardbuttonrow.h"
#include "../../types/telegramobject.h"

class ReplyMarkup: public TelegramObject
{
	Q_OBJECT

	Q_PROPERTY(TLInt flags READ flags WRITE setFlags NOTIFY flagsChanged)
	Q_PROPERTY(TLTrue isSelective READ isSelective WRITE setIsSelective NOTIFY isSelectiveChanged)
	Q_PROPERTY(TLTrue isSingleUse READ isSingleUse WRITE setIsSingleUse NOTIFY isSingleUseChanged)
	Q_PROPERTY(TLTrue isResize READ isResize WRITE setIsResize NOTIFY isResizeChanged)
	Q_PROPERTY(TLVector<KeyboardButtonRow*> rows READ rows WRITE setRows NOTIFY rowsChanged)

	public:
		enum Constructors {
			ctorReplyKeyboardHide = 0xa03e5b85,
			ctorReplyKeyboardForceReply = 0xf4108aa0,
			ctorReplyKeyboardMarkup = 0x3502758c,
			ctorReplyInlineMarkup = 0x48a30254,
		};

	public:
		explicit ReplyMarkup(QObject* parent = 0);
		virtual void read(MTProtoStream* mtstream);
		virtual void write(MTProtoStream* mtstream);
	protected:
		virtual void compileFlags();
	public:
		TLInt flags() const;
		void setFlags(TLInt flags);
		TLTrue isSelective() const;
		void setIsSelective(TLTrue is_selective);
		TLTrue isSingleUse() const;
		void setIsSingleUse(TLTrue is_single_use);
		TLTrue isResize() const;
		void setIsResize(TLTrue is_resize);
		const TLVector<KeyboardButtonRow*>& rows() const;
		void setRows(const TLVector<KeyboardButtonRow*>& rows);

	signals:
		void flagsChanged();
		void isSelectiveChanged();
		void isSingleUseChanged();
		void isResizeChanged();
		void rowsChanged();

	private:
		TLInt _flags;
		TLTrue _is_selective;
		TLTrue _is_single_use;
		TLTrue _is_resize;
		TLVector<KeyboardButtonRow*> _rows;

};

#endif // REPLYMARKUP_H
