// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "messagesfoundgifs.h"


MessagesFoundGifs::MessagesFoundGifs(QObject* parent) : TelegramObject(parent)
{
	this->_next_offset = 0;
	this->_constructorid = MessagesFoundGifs::CtorMessagesFoundGifs;
}

void MessagesFoundGifs::read(MTProtoStream* mtstream) 
{
	this->_constructorid = mtstream->readTLConstructor();
	
	Q_ASSERT((this->_constructorid == MessagesFoundGifs::CtorMessagesFoundGifs));
	
	if(this->_constructorid == MessagesFoundGifs::CtorMessagesFoundGifs)
	{
		this->_next_offset = mtstream->readTLInt();
		mtstream->readTLVector<FoundGif>(this->_results, false, this);
	}
}

void MessagesFoundGifs::write(MTProtoStream* mtstream) 
{
	Q_ASSERT((this->_constructorid == MessagesFoundGifs::CtorMessagesFoundGifs));
	
	this->compileFlags();
	mtstream->writeTLConstructor(this->_constructorid);
	
	if(this->_constructorid == MessagesFoundGifs::CtorMessagesFoundGifs)
	{
		mtstream->writeTLInt(this->_next_offset);
		mtstream->writeTLVector(this->_results, false);
	}
}

void MessagesFoundGifs::compileFlags() 
{
	
}

TLInt MessagesFoundGifs::nextOffset() const
{
	return this->_next_offset;
}

void MessagesFoundGifs::setNextOffset(TLInt next_offset) 
{
	if(this->_next_offset == next_offset)
		return;

	this->_next_offset = next_offset;
	emit nextOffsetChanged();
}

const TLVector<FoundGif*>& MessagesFoundGifs::results() const
{
	return this->_results;
}

void MessagesFoundGifs::setResults(const TLVector<FoundGif*>& results) 
{
	if(this->_results == results)
		return;

	this->_results = results;
	emit resultsChanged();
}

