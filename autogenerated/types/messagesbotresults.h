#ifndef MESSAGESBOTRESULTS_H
#define MESSAGESBOTRESULTS_H

// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "../../types/basic.h"
#include "inlinebotswitchpm.h"
#include "../../types/telegramobject.h"
#include "botinlineresult.h"

class MessagesBotResults: public TelegramObject
{
	Q_OBJECT

	Q_PROPERTY(TLInt flags READ flags WRITE setFlags NOTIFY flagsChanged)
	Q_PROPERTY(TLTrue isGallery READ isGallery WRITE setIsGallery NOTIFY isGalleryChanged)
	Q_PROPERTY(TLLong queryId READ queryId WRITE setQueryId NOTIFY queryIdChanged)
	Q_PROPERTY(TLString nextOffset READ nextOffset WRITE setNextOffset NOTIFY nextOffsetChanged)
	Q_PROPERTY(InlineBotSwitchPM* switchPm READ switchPm WRITE setSwitchPm NOTIFY switchPmChanged)
	Q_PROPERTY(TLVector<BotInlineResult*> results READ results WRITE setResults NOTIFY resultsChanged)

	public:
		enum Constructors {
			ctorMessagesBotResults = 0x256709a6,
		};

	public:
		explicit MessagesBotResults(QObject* parent = 0);
		virtual void read(MTProtoStream* mtstream);
		virtual void write(MTProtoStream* mtstream);
	protected:
		virtual void compileFlags();
	public:
		TLInt flags() const;
		void setFlags(TLInt flags);
		TLTrue isGallery() const;
		void setIsGallery(TLTrue is_gallery);
		TLLong queryId() const;
		void setQueryId(TLLong query_id);
		TLString nextOffset() const;
		void setNextOffset(TLString next_offset);
		InlineBotSwitchPM* switchPm() const;
		void setSwitchPm(InlineBotSwitchPM* switch_pm);
		const TLVector<BotInlineResult*>& results() const;
		void setResults(const TLVector<BotInlineResult*>& results);

	signals:
		void flagsChanged();
		void isGalleryChanged();
		void queryIdChanged();
		void nextOffsetChanged();
		void switchPmChanged();
		void resultsChanged();

	private:
		TLInt _flags;
		TLTrue _is_gallery;
		TLLong _query_id;
		TLString _next_offset;
		InlineBotSwitchPM* _switch_pm;
		TLVector<BotInlineResult*> _results;

};

#endif // MESSAGESBOTRESULTS_H
