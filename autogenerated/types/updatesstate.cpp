// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "updatesstate.h"


UpdatesState::UpdatesState(QObject* parent) : TelegramObject(parent)
{
	this->_pts = 0;
	this->_qts = 0;
	this->_date = 0;
	this->_seq = 0;
	this->_unread_count = 0;
	this->_constructorid = UpdatesState::CtorUpdatesState;
}

void UpdatesState::read(MTProtoStream* mtstream) 
{
	this->_constructorid = mtstream->readTLConstructor();
	
	Q_ASSERT((this->_constructorid == UpdatesState::CtorUpdatesState));
	
	if(this->_constructorid == UpdatesState::CtorUpdatesState)
	{
		this->_pts = mtstream->readTLInt();
		this->_qts = mtstream->readTLInt();
		this->_date = mtstream->readTLInt();
		this->_seq = mtstream->readTLInt();
		this->_unread_count = mtstream->readTLInt();
	}
}

void UpdatesState::write(MTProtoStream* mtstream) 
{
	Q_ASSERT((this->_constructorid == UpdatesState::CtorUpdatesState));
	
	this->compileFlags();
	mtstream->writeTLConstructor(this->_constructorid);
	
	if(this->_constructorid == UpdatesState::CtorUpdatesState)
	{
		mtstream->writeTLInt(this->_pts);
		mtstream->writeTLInt(this->_qts);
		mtstream->writeTLInt(this->_date);
		mtstream->writeTLInt(this->_seq);
		mtstream->writeTLInt(this->_unread_count);
	}
}

void UpdatesState::compileFlags() 
{
	
}

TLInt UpdatesState::pts() const
{
	return this->_pts;
}

void UpdatesState::setPts(TLInt pts) 
{
	if(this->_pts == pts)
		return;

	this->_pts = pts;
	emit ptsChanged();
}

TLInt UpdatesState::qts() const
{
	return this->_qts;
}

void UpdatesState::setQts(TLInt qts) 
{
	if(this->_qts == qts)
		return;

	this->_qts = qts;
	emit qtsChanged();
}

TLInt UpdatesState::date() const
{
	return this->_date;
}

void UpdatesState::setDate(TLInt date) 
{
	if(this->_date == date)
		return;

	this->_date = date;
	emit dateChanged();
}

TLInt UpdatesState::seq() const
{
	return this->_seq;
}

void UpdatesState::setSeq(TLInt seq) 
{
	if(this->_seq == seq)
		return;

	this->_seq = seq;
	emit seqChanged();
}

TLInt UpdatesState::unreadCount() const
{
	return this->_unread_count;
}

void UpdatesState::setUnreadCount(TLInt unread_count) 
{
	if(this->_unread_count == unread_count)
		return;

	this->_unread_count = unread_count;
	emit unreadCountChanged();
}

