// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "authorization.h"


Authorization::Authorization(QObject* parent) : TelegramObject(parent)
{
	this->_hash = 0;
	this->_flags = 0;
	this->_api_id = 0;
	this->_date_created = 0;
	this->_date_active = 0;
	this->_constructorid = Authorization::ctorAuthorization;
}

void Authorization::read(MTProtoStream* mtstream) 
{
	this->_constructorid = mtstream->readTLConstructor();
	
	Q_ASSERT((this->_constructorid == Authorization::ctorAuthorization));
	
	if(this->_constructorid == Authorization::ctorAuthorization)
	{
		this->_hash = mtstream->readTLLong();
		this->_flags = mtstream->readTLInt();
		this->_device_model = mtstream->readTLString();
		this->_platform = mtstream->readTLString();
		this->_system_version = mtstream->readTLString();
		this->_api_id = mtstream->readTLInt();
		this->_app_name = mtstream->readTLString();
		this->_app_version = mtstream->readTLString();
		this->_date_created = mtstream->readTLInt();
		this->_date_active = mtstream->readTLInt();
		this->_ip = mtstream->readTLString();
		this->_country = mtstream->readTLString();
		this->_region = mtstream->readTLString();
	}
}

void Authorization::write(MTProtoStream* mtstream) 
{
	Q_ASSERT((this->_constructorid == Authorization::ctorAuthorization));
	
	this->compileFlags();
	mtstream->writeTLConstructor(this->_constructorid);
	
	if(this->_constructorid == Authorization::ctorAuthorization)
	{
		mtstream->writeTLLong(this->_hash);
		mtstream->writeTLInt(this->_flags);
		mtstream->writeTLString(this->_device_model);
		mtstream->writeTLString(this->_platform);
		mtstream->writeTLString(this->_system_version);
		mtstream->writeTLInt(this->_api_id);
		mtstream->writeTLString(this->_app_name);
		mtstream->writeTLString(this->_app_version);
		mtstream->writeTLInt(this->_date_created);
		mtstream->writeTLInt(this->_date_active);
		mtstream->writeTLString(this->_ip);
		mtstream->writeTLString(this->_country);
		mtstream->writeTLString(this->_region);
	}
}

void Authorization::compileFlags() 
{
	
}

TLLong Authorization::hash() const
{
	return this->_hash;
}

void Authorization::setHash(TLLong hash) 
{
	if(this->_hash == hash)
		return;

	this->_hash = hash;
	emit hashChanged();
}

TLInt Authorization::flags() const
{
	return this->_flags;
}

void Authorization::setFlags(TLInt flags) 
{
	if(this->_flags == flags)
		return;

	this->_flags = flags;
	emit flagsChanged();
}

TLString Authorization::deviceModel() const
{
	return this->_device_model;
}

void Authorization::setDeviceModel(TLString device_model) 
{
	if(this->_device_model == device_model)
		return;

	this->_device_model = device_model;
	emit deviceModelChanged();
}

TLString Authorization::platform() const
{
	return this->_platform;
}

void Authorization::setPlatform(TLString platform) 
{
	if(this->_platform == platform)
		return;

	this->_platform = platform;
	emit platformChanged();
}

TLString Authorization::systemVersion() const
{
	return this->_system_version;
}

void Authorization::setSystemVersion(TLString system_version) 
{
	if(this->_system_version == system_version)
		return;

	this->_system_version = system_version;
	emit systemVersionChanged();
}

TLInt Authorization::apiId() const
{
	return this->_api_id;
}

void Authorization::setApiId(TLInt api_id) 
{
	if(this->_api_id == api_id)
		return;

	this->_api_id = api_id;
	emit apiIdChanged();
}

TLString Authorization::appName() const
{
	return this->_app_name;
}

void Authorization::setAppName(TLString app_name) 
{
	if(this->_app_name == app_name)
		return;

	this->_app_name = app_name;
	emit appNameChanged();
}

TLString Authorization::appVersion() const
{
	return this->_app_version;
}

void Authorization::setAppVersion(TLString app_version) 
{
	if(this->_app_version == app_version)
		return;

	this->_app_version = app_version;
	emit appVersionChanged();
}

TLInt Authorization::dateCreated() const
{
	return this->_date_created;
}

void Authorization::setDateCreated(TLInt date_created) 
{
	if(this->_date_created == date_created)
		return;

	this->_date_created = date_created;
	emit dateCreatedChanged();
}

TLInt Authorization::dateActive() const
{
	return this->_date_active;
}

void Authorization::setDateActive(TLInt date_active) 
{
	if(this->_date_active == date_active)
		return;

	this->_date_active = date_active;
	emit dateActiveChanged();
}

TLString Authorization::ip() const
{
	return this->_ip;
}

void Authorization::setIp(TLString ip) 
{
	if(this->_ip == ip)
		return;

	this->_ip = ip;
	emit ipChanged();
}

TLString Authorization::country() const
{
	return this->_country;
}

void Authorization::setCountry(TLString country) 
{
	if(this->_country == country)
		return;

	this->_country = country;
	emit countryChanged();
}

TLString Authorization::region() const
{
	return this->_region;
}

void Authorization::setRegion(TLString region) 
{
	if(this->_region == region)
		return;

	this->_region = region;
	emit regionChanged();
}

