// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "filelocation.h"


FileLocation::FileLocation(QObject* parent) : TelegramObject(parent)
{
	this->_volume_id = 0;
	this->_local_id = 0;
	this->_secret = 0;
	this->_dc_id = 0;
}

void FileLocation::read(MTProtoStream* mtstream) 
{
	this->_constructorid = mtstream->readTLConstructor();
	
	Q_ASSERT((this->_constructorid == FileLocation::ctorFileLocationUnavailable) ||
		 (this->_constructorid == FileLocation::ctorFileLocation));
	
	if(this->_constructorid == FileLocation::ctorFileLocationUnavailable)
	{
		this->_volume_id = mtstream->readTLLong();
		this->_local_id = mtstream->readTLInt();
		this->_secret = mtstream->readTLLong();
	}
	else if(this->_constructorid == FileLocation::ctorFileLocation)
	{
		this->_dc_id = mtstream->readTLInt();
		this->_volume_id = mtstream->readTLLong();
		this->_local_id = mtstream->readTLInt();
		this->_secret = mtstream->readTLLong();
	}
}

void FileLocation::write(MTProtoStream* mtstream) 
{
	Q_ASSERT((this->_constructorid == FileLocation::ctorFileLocationUnavailable) ||
		 (this->_constructorid == FileLocation::ctorFileLocation));
	
	this->compileFlags();
	mtstream->writeTLConstructor(this->_constructorid);
	
	if(this->_constructorid == FileLocation::ctorFileLocationUnavailable)
	{
		mtstream->writeTLLong(this->_volume_id);
		mtstream->writeTLInt(this->_local_id);
		mtstream->writeTLLong(this->_secret);
	}
	else if(this->_constructorid == FileLocation::ctorFileLocation)
	{
		mtstream->writeTLInt(this->_dc_id);
		mtstream->writeTLLong(this->_volume_id);
		mtstream->writeTLInt(this->_local_id);
		mtstream->writeTLLong(this->_secret);
	}
}

void FileLocation::compileFlags() 
{
	
}

TLLong FileLocation::volumeId() const
{
	return this->_volume_id;
}

void FileLocation::setVolumeId(TLLong volume_id) 
{
	if(this->_volume_id == volume_id)
		return;

	this->_volume_id = volume_id;
	emit volumeIdChanged();
}

TLInt FileLocation::localId() const
{
	return this->_local_id;
}

void FileLocation::setLocalId(TLInt local_id) 
{
	if(this->_local_id == local_id)
		return;

	this->_local_id = local_id;
	emit localIdChanged();
}

TLLong FileLocation::secret() const
{
	return this->_secret;
}

void FileLocation::setSecret(TLLong secret) 
{
	if(this->_secret == secret)
		return;

	this->_secret = secret;
	emit secretChanged();
}

TLInt FileLocation::dcId() const
{
	return this->_dc_id;
}

void FileLocation::setDcId(TLInt dc_id) 
{
	if(this->_dc_id == dc_id)
		return;

	this->_dc_id = dc_id;
	emit dcIdChanged();
}

