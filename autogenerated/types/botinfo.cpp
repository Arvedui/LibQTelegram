// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "botinfo.h"


BotInfo::BotInfo(QObject* parent) : TelegramObject(parent)
{
	this->_user_id = 0;
	this->_constructorid = BotInfo::CtorBotInfo;
}

void BotInfo::read(MTProtoStream* mtstream) 
{
	this->_constructorid = mtstream->readTLConstructor();
	
	Q_ASSERT((this->_constructorid == BotInfo::CtorBotInfo));
	
	if(this->_constructorid == BotInfo::CtorBotInfo)
	{
		this->_user_id = mtstream->readTLInt();
		this->_description = mtstream->readTLString();
		mtstream->readTLVector<BotCommand>(this->_commands, false, this);
	}
}

void BotInfo::write(MTProtoStream* mtstream) 
{
	Q_ASSERT((this->_constructorid == BotInfo::CtorBotInfo));
	
	this->compileFlags();
	mtstream->writeTLConstructor(this->_constructorid);
	
	if(this->_constructorid == BotInfo::CtorBotInfo)
	{
		mtstream->writeTLInt(this->_user_id);
		mtstream->writeTLString(this->_description);
		mtstream->writeTLVector(this->_commands, false);
	}
}

void BotInfo::compileFlags() 
{
	
}

TLInt BotInfo::userId() const
{
	return this->_user_id;
}

void BotInfo::setUserId(TLInt user_id) 
{
	if(this->_user_id == user_id)
		return;

	this->_user_id = user_id;
	emit userIdChanged();
}

TLString BotInfo::description() const
{
	return this->_description;
}

void BotInfo::setDescription(TLString description) 
{
	if(this->_description == description)
		return;

	this->_description = description;
	emit descriptionChanged();
}

const TLVector<BotCommand*>& BotInfo::commands() const
{
	return this->_commands;
}

void BotInfo::setCommands(const TLVector<BotCommand*>& commands) 
{
	if(this->_commands == commands)
		return;

	this->_commands = commands;
	emit commandsChanged();
}

