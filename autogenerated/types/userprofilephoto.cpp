// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "userprofilephoto.h"


UserProfilePhoto::UserProfilePhoto(QObject* parent) : TelegramObject(parent)
{
	this->_photo_id = 0;
	this->_photo_small = NULL;
	this->_photo_big = NULL;
}

void UserProfilePhoto::read(MTProtoStream* mtstream) 
{
	this->_constructorid = mtstream->readTLConstructor();
	
	Q_ASSERT((this->_constructorid == UserProfilePhoto::CtorUserProfilePhotoEmpty) ||
		 (this->_constructorid == UserProfilePhoto::CtorUserProfilePhoto));
	
	if(this->_constructorid == UserProfilePhoto::CtorUserProfilePhoto)
	{
		this->_photo_id = mtstream->readTLLong();
		TLInt photo_small_ctor = mtstream->peekTLConstructor();
		
		if(photo_small_ctor != TLTypes::Null)
		{
			this->resetTLType<FileLocation>(&this->_photo_small);
			this->_photo_small->read(mtstream);
		}
		else
		{
			this->nullTLType<FileLocation>(&this->_photo_small);
			mtstream->readTLConstructor(); // Skip Null
		}
		
		TLInt photo_big_ctor = mtstream->peekTLConstructor();
		
		if(photo_big_ctor != TLTypes::Null)
		{
			this->resetTLType<FileLocation>(&this->_photo_big);
			this->_photo_big->read(mtstream);
		}
		else
		{
			this->nullTLType<FileLocation>(&this->_photo_big);
			mtstream->readTLConstructor(); // Skip Null
		}
	}
}

void UserProfilePhoto::write(MTProtoStream* mtstream) 
{
	Q_ASSERT((this->_constructorid == UserProfilePhoto::CtorUserProfilePhotoEmpty) ||
		 (this->_constructorid == UserProfilePhoto::CtorUserProfilePhoto));
	
	this->compileFlags();
	mtstream->writeTLConstructor(this->_constructorid);
	
	if(this->_constructorid == UserProfilePhoto::CtorUserProfilePhoto)
	{
		mtstream->writeTLLong(this->_photo_id);
		if(this->_photo_small != NULL)
			this->_photo_small->write(mtstream);
		else
			mtstream->writeTLConstructor(TLTypes::Null);
		
		if(this->_photo_big != NULL)
			this->_photo_big->write(mtstream);
		else
			mtstream->writeTLConstructor(TLTypes::Null);
	}
}

void UserProfilePhoto::compileFlags() 
{
	
}

TLLong UserProfilePhoto::photoId() const
{
	return this->_photo_id;
}

void UserProfilePhoto::setPhotoId(TLLong photo_id) 
{
	if(this->_photo_id == photo_id)
		return;

	this->_photo_id = photo_id;
	emit photoIdChanged();
}

FileLocation* UserProfilePhoto::photoSmall() const
{
	return this->_photo_small;
}

void UserProfilePhoto::setPhotoSmall(FileLocation* photo_small) 
{
	if(this->_photo_small == photo_small)
		return;

	this->deleteChild(this->_photo_small);
	this->_photo_small = photo_small;

	if(this->_photo_small)
		this->_photo_small->setParent(this);

	emit photoSmallChanged();
}

FileLocation* UserProfilePhoto::photoBig() const
{
	return this->_photo_big;
}

void UserProfilePhoto::setPhotoBig(FileLocation* photo_big) 
{
	if(this->_photo_big == photo_big)
		return;

	this->deleteChild(this->_photo_big);
	this->_photo_big = photo_big;

	if(this->_photo_big)
		this->_photo_big->setParent(this);

	emit photoBigChanged();
}

