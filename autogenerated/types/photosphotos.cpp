// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "photosphotos.h"


PhotosPhotos::PhotosPhotos(QObject* parent) : TelegramObject(parent)
{
	this->_count = 0;
}

void PhotosPhotos::read(MTProtoStream* mtstream) 
{
	this->_constructorid = mtstream->readTLConstructor();
	
	Q_ASSERT((this->_constructorid == PhotosPhotos::ctorPhotosPhotos) ||
		 (this->_constructorid == PhotosPhotos::ctorPhotosPhotosSlice));
	
	if(this->_constructorid == PhotosPhotos::ctorPhotosPhotos)
	{
		mtstream->readTLVector<Photo>(this->_photos, false);
		mtstream->readTLVector<User>(this->_users, false);
	}
	else if(this->_constructorid == PhotosPhotos::ctorPhotosPhotosSlice)
	{
		this->_count = mtstream->readTLInt();
		mtstream->readTLVector<Photo>(this->_photos, false);
		mtstream->readTLVector<User>(this->_users, false);
	}
}

void PhotosPhotos::write(MTProtoStream* mtstream) 
{
	Q_ASSERT((this->_constructorid == PhotosPhotos::ctorPhotosPhotos) ||
		 (this->_constructorid == PhotosPhotos::ctorPhotosPhotosSlice));
	
	this->compileFlags();
	mtstream->writeTLConstructor(this->_constructorid);
	
	if(this->_constructorid == PhotosPhotos::ctorPhotosPhotos)
	{
		mtstream->writeTLVector(this->_photos, false);
		mtstream->writeTLVector(this->_users, false);
	}
	else if(this->_constructorid == PhotosPhotos::ctorPhotosPhotosSlice)
	{
		mtstream->writeTLInt(this->_count);
		mtstream->writeTLVector(this->_photos, false);
		mtstream->writeTLVector(this->_users, false);
	}
}

void PhotosPhotos::compileFlags() 
{
	
}

const TLVector<Photo*>& PhotosPhotos::photos() const
{
	return this->_photos;
}

void PhotosPhotos::setPhotos(const TLVector<Photo*>& photos) 
{
	if(this->_photos == photos)
		return;

	this->_photos = photos;
	emit photosChanged();
}

const TLVector<User*>& PhotosPhotos::users() const
{
	return this->_users;
}

void PhotosPhotos::setUsers(const TLVector<User*>& users) 
{
	if(this->_users == users)
		return;

	this->_users = users;
	emit usersChanged();
}

TLInt PhotosPhotos::count() const
{
	return this->_count;
}

void PhotosPhotos::setCount(TLInt count) 
{
	if(this->_count == count)
		return;

	this->_count = count;
	emit countChanged();
}

