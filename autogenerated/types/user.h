#ifndef USER_H
#define USER_H

// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "userprofilephoto.h"
#include "../../types/telegramobject.h"
#include "../../types/basic.h"
#include "userstatus.h"

class User: public TelegramObject
{
	Q_OBJECT

	Q_PROPERTY(TLInt id READ id WRITE setId NOTIFY idChanged)
	Q_PROPERTY(TLInt flags READ flags WRITE setFlags NOTIFY flagsChanged)
	Q_PROPERTY(TLTrue isSelf READ isSelf WRITE setIsSelf NOTIFY isSelfChanged)
	Q_PROPERTY(TLTrue isContact READ isContact WRITE setIsContact NOTIFY isContactChanged)
	Q_PROPERTY(TLTrue isMutualContact READ isMutualContact WRITE setIsMutualContact NOTIFY isMutualContactChanged)
	Q_PROPERTY(TLTrue isDeleted READ isDeleted WRITE setIsDeleted NOTIFY isDeletedChanged)
	Q_PROPERTY(TLTrue isBot READ isBot WRITE setIsBot NOTIFY isBotChanged)
	Q_PROPERTY(TLTrue isBotChatHistory READ isBotChatHistory WRITE setIsBotChatHistory NOTIFY isBotChatHistoryChanged)
	Q_PROPERTY(TLTrue isBotNochats READ isBotNochats WRITE setIsBotNochats NOTIFY isBotNochatsChanged)
	Q_PROPERTY(TLTrue isVerified READ isVerified WRITE setIsVerified NOTIFY isVerifiedChanged)
	Q_PROPERTY(TLTrue isRestricted READ isRestricted WRITE setIsRestricted NOTIFY isRestrictedChanged)
	Q_PROPERTY(TLTrue isMin READ isMin WRITE setIsMin NOTIFY isMinChanged)
	Q_PROPERTY(TLTrue isBotInlineGeo READ isBotInlineGeo WRITE setIsBotInlineGeo NOTIFY isBotInlineGeoChanged)
	Q_PROPERTY(TLLong accessHash READ accessHash WRITE setAccessHash NOTIFY accessHashChanged)
	Q_PROPERTY(TLString firstName READ firstName WRITE setFirstName NOTIFY firstNameChanged)
	Q_PROPERTY(TLString lastName READ lastName WRITE setLastName NOTIFY lastNameChanged)
	Q_PROPERTY(TLString username READ username WRITE setUsername NOTIFY usernameChanged)
	Q_PROPERTY(TLString phone READ phone WRITE setPhone NOTIFY phoneChanged)
	Q_PROPERTY(UserProfilePhoto* photo READ photo WRITE setPhoto NOTIFY photoChanged)
	Q_PROPERTY(UserStatus* status READ status WRITE setStatus NOTIFY statusChanged)
	Q_PROPERTY(TLInt botInfoVersion READ botInfoVersion WRITE setBotInfoVersion NOTIFY botInfoVersionChanged)
	Q_PROPERTY(TLString restrictionReason READ restrictionReason WRITE setRestrictionReason NOTIFY restrictionReasonChanged)
	Q_PROPERTY(TLString botInlinePlaceholder READ botInlinePlaceholder WRITE setBotInlinePlaceholder NOTIFY botInlinePlaceholderChanged)

	Q_ENUMS(Constructors)

	public:
		enum Constructors {
			ctorUserEmpty = 0x200250ba,
			ctorUser = 0xd10d979a,
		};

	public:
		explicit User(QObject* parent = 0);
		virtual void read(MTProtoStream* mtstream);
		virtual void write(MTProtoStream* mtstream);
	protected:
		virtual void compileFlags();
	public:
		TLInt id() const;
		void setId(TLInt id);
		TLInt flags() const;
		void setFlags(TLInt flags);
		TLTrue isSelf() const;
		void setIsSelf(TLTrue is_self);
		TLTrue isContact() const;
		void setIsContact(TLTrue is_contact);
		TLTrue isMutualContact() const;
		void setIsMutualContact(TLTrue is_mutual_contact);
		TLTrue isDeleted() const;
		void setIsDeleted(TLTrue is_deleted);
		TLTrue isBot() const;
		void setIsBot(TLTrue is_bot);
		TLTrue isBotChatHistory() const;
		void setIsBotChatHistory(TLTrue is_bot_chat_history);
		TLTrue isBotNochats() const;
		void setIsBotNochats(TLTrue is_bot_nochats);
		TLTrue isVerified() const;
		void setIsVerified(TLTrue is_verified);
		TLTrue isRestricted() const;
		void setIsRestricted(TLTrue is_restricted);
		TLTrue isMin() const;
		void setIsMin(TLTrue is_min);
		TLTrue isBotInlineGeo() const;
		void setIsBotInlineGeo(TLTrue is_bot_inline_geo);
		TLLong accessHash() const;
		void setAccessHash(TLLong access_hash);
		TLString firstName() const;
		void setFirstName(TLString first_name);
		TLString lastName() const;
		void setLastName(TLString last_name);
		TLString username() const;
		void setUsername(TLString username);
		TLString phone() const;
		void setPhone(TLString phone);
		UserProfilePhoto* photo() const;
		void setPhoto(UserProfilePhoto* photo);
		UserStatus* status() const;
		void setStatus(UserStatus* status);
		TLInt botInfoVersion() const;
		void setBotInfoVersion(TLInt bot_info_version);
		TLString restrictionReason() const;
		void setRestrictionReason(TLString restriction_reason);
		TLString botInlinePlaceholder() const;
		void setBotInlinePlaceholder(TLString bot_inline_placeholder);

	signals:
		void idChanged();
		void flagsChanged();
		void isSelfChanged();
		void isContactChanged();
		void isMutualContactChanged();
		void isDeletedChanged();
		void isBotChanged();
		void isBotChatHistoryChanged();
		void isBotNochatsChanged();
		void isVerifiedChanged();
		void isRestrictedChanged();
		void isMinChanged();
		void isBotInlineGeoChanged();
		void accessHashChanged();
		void firstNameChanged();
		void lastNameChanged();
		void usernameChanged();
		void phoneChanged();
		void photoChanged();
		void statusChanged();
		void botInfoVersionChanged();
		void restrictionReasonChanged();
		void botInlinePlaceholderChanged();

	private:
		TLInt _id;
		TLInt _flags;
		TLTrue _is_self;
		TLTrue _is_contact;
		TLTrue _is_mutual_contact;
		TLTrue _is_deleted;
		TLTrue _is_bot;
		TLTrue _is_bot_chat_history;
		TLTrue _is_bot_nochats;
		TLTrue _is_verified;
		TLTrue _is_restricted;
		TLTrue _is_min;
		TLTrue _is_bot_inline_geo;
		TLLong _access_hash;
		TLString _first_name;
		TLString _last_name;
		TLString _username;
		TLString _phone;
		UserProfilePhoto* _photo;
		UserStatus* _status;
		TLInt _bot_info_version;
		TLString _restriction_reason;
		TLString _bot_inline_placeholder;

};

#endif // USER_H
