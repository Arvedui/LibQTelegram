// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "contactsblocked.h"


ContactsBlocked::ContactsBlocked(QObject* parent) : TelegramObject(parent)
{
	this->_count = 0;
}

void ContactsBlocked::read(MTProtoStream* mtstream) 
{
	this->_constructorid = mtstream->readTLConstructor();
	
	Q_ASSERT((this->_constructorid == ContactsBlocked::ctorContactsBlocked) ||
		 (this->_constructorid == ContactsBlocked::ctorContactsBlockedSlice));
	
	if(this->_constructorid == ContactsBlocked::ctorContactsBlocked)
	{
		mtstream->readTLVector<ContactBlocked>(this->_blocked, false);
		mtstream->readTLVector<User>(this->_users, false);
	}
	else if(this->_constructorid == ContactsBlocked::ctorContactsBlockedSlice)
	{
		this->_count = mtstream->readTLInt();
		mtstream->readTLVector<ContactBlocked>(this->_blocked, false);
		mtstream->readTLVector<User>(this->_users, false);
	}
}

void ContactsBlocked::write(MTProtoStream* mtstream) 
{
	Q_ASSERT((this->_constructorid == ContactsBlocked::ctorContactsBlocked) ||
		 (this->_constructorid == ContactsBlocked::ctorContactsBlockedSlice));
	
	this->compileFlags();
	mtstream->writeTLConstructor(this->_constructorid);
	
	if(this->_constructorid == ContactsBlocked::ctorContactsBlocked)
	{
		mtstream->writeTLVector(this->_blocked, false);
		mtstream->writeTLVector(this->_users, false);
	}
	else if(this->_constructorid == ContactsBlocked::ctorContactsBlockedSlice)
	{
		mtstream->writeTLInt(this->_count);
		mtstream->writeTLVector(this->_blocked, false);
		mtstream->writeTLVector(this->_users, false);
	}
}

void ContactsBlocked::compileFlags() 
{
	
}

const TLVector<ContactBlocked*>& ContactsBlocked::blocked() const
{
	return this->_blocked;
}

void ContactsBlocked::setBlocked(const TLVector<ContactBlocked*>& blocked) 
{
	if(this->_blocked == blocked)
		return;

	this->_blocked = blocked;
	emit blockedChanged();
}

const TLVector<User*>& ContactsBlocked::users() const
{
	return this->_users;
}

void ContactsBlocked::setUsers(const TLVector<User*>& users) 
{
	if(this->_users == users)
		return;

	this->_users = users;
	emit usersChanged();
}

TLInt ContactsBlocked::count() const
{
	return this->_count;
}

void ContactsBlocked::setCount(TLInt count) 
{
	if(this->_count == count)
		return;

	this->_count = count;
	emit countChanged();
}

