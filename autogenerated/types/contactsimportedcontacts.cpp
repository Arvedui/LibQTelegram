// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "contactsimportedcontacts.h"


ContactsImportedContacts::ContactsImportedContacts(QObject* parent) : TelegramObject(parent)
{
	this->_constructorid = ContactsImportedContacts::CtorContactsImportedContacts;
}

void ContactsImportedContacts::read(MTProtoStream* mtstream) 
{
	this->_constructorid = mtstream->readTLConstructor();
	
	Q_ASSERT((this->_constructorid == ContactsImportedContacts::CtorContactsImportedContacts));
	
	if(this->_constructorid == ContactsImportedContacts::CtorContactsImportedContacts)
	{
		mtstream->readTLVector<ImportedContact>(this->_imported, false);
		mtstream->readTLVector<TLLong>(this->_retry_contacts, false);
		mtstream->readTLVector<User>(this->_users, false);
	}
}

void ContactsImportedContacts::write(MTProtoStream* mtstream) 
{
	Q_ASSERT((this->_constructorid == ContactsImportedContacts::CtorContactsImportedContacts));
	
	this->compileFlags();
	mtstream->writeTLConstructor(this->_constructorid);
	
	if(this->_constructorid == ContactsImportedContacts::CtorContactsImportedContacts)
	{
		mtstream->writeTLVector(this->_imported, false);
		mtstream->writeTLVector(this->_retry_contacts, false);
		mtstream->writeTLVector(this->_users, false);
	}
}

void ContactsImportedContacts::compileFlags() 
{
	
}

const TLVector<ImportedContact*>& ContactsImportedContacts::imported() const
{
	return this->_imported;
}

void ContactsImportedContacts::setImported(const TLVector<ImportedContact*>& imported) 
{
	if(this->_imported == imported)
		return;

	this->_imported = imported;
	emit importedChanged();
}

const TLVector<TLLong>& ContactsImportedContacts::retryContacts() const
{
	return this->_retry_contacts;
}

void ContactsImportedContacts::setRetryContacts(const TLVector<TLLong>& retry_contacts) 
{
	if(this->_retry_contacts == retry_contacts)
		return;

	this->_retry_contacts = retry_contacts;
	emit retryContactsChanged();
}

const TLVector<User*>& ContactsImportedContacts::users() const
{
	return this->_users;
}

void ContactsImportedContacts::setUsers(const TLVector<User*>& users) 
{
	if(this->_users == users)
		return;

	this->_users = users;
	emit usersChanged();
}

