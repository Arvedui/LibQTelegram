#ifndef CHAT_H
#define CHAT_H

// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "chatphoto.h"
#include "../../types/basic.h"
#include "../../types/telegramobject.h"
#include "inputchannel.h"

class Chat: public TelegramObject
{
	Q_OBJECT

	Q_PROPERTY(TLInt id READ id WRITE setId NOTIFY idChanged)
	Q_PROPERTY(TLInt flags READ flags WRITE setFlags NOTIFY flagsChanged)
	Q_PROPERTY(TLTrue isCreator READ isCreator WRITE setIsCreator NOTIFY isCreatorChanged)
	Q_PROPERTY(TLTrue isKicked READ isKicked WRITE setIsKicked NOTIFY isKickedChanged)
	Q_PROPERTY(TLTrue isLeft READ isLeft WRITE setIsLeft NOTIFY isLeftChanged)
	Q_PROPERTY(TLTrue isAdminsEnabled READ isAdminsEnabled WRITE setIsAdminsEnabled NOTIFY isAdminsEnabledChanged)
	Q_PROPERTY(TLTrue isAdmin READ isAdmin WRITE setIsAdmin NOTIFY isAdminChanged)
	Q_PROPERTY(TLTrue isDeactivated READ isDeactivated WRITE setIsDeactivated NOTIFY isDeactivatedChanged)
	Q_PROPERTY(TLString title READ title WRITE setTitle NOTIFY titleChanged)
	Q_PROPERTY(ChatPhoto* photo READ photo WRITE setPhoto NOTIFY photoChanged)
	Q_PROPERTY(TLInt participantsCount READ participantsCount WRITE setParticipantsCount NOTIFY participantsCountChanged)
	Q_PROPERTY(TLInt date READ date WRITE setDate NOTIFY dateChanged)
	Q_PROPERTY(TLInt version READ version WRITE setVersion NOTIFY versionChanged)
	Q_PROPERTY(InputChannel* migratedTo READ migratedTo WRITE setMigratedTo NOTIFY migratedToChanged)
	Q_PROPERTY(TLTrue isEditor READ isEditor WRITE setIsEditor NOTIFY isEditorChanged)
	Q_PROPERTY(TLTrue isModerator READ isModerator WRITE setIsModerator NOTIFY isModeratorChanged)
	Q_PROPERTY(TLTrue isBroadcast READ isBroadcast WRITE setIsBroadcast NOTIFY isBroadcastChanged)
	Q_PROPERTY(TLTrue isVerified READ isVerified WRITE setIsVerified NOTIFY isVerifiedChanged)
	Q_PROPERTY(TLTrue isMegagroup READ isMegagroup WRITE setIsMegagroup NOTIFY isMegagroupChanged)
	Q_PROPERTY(TLTrue isRestricted READ isRestricted WRITE setIsRestricted NOTIFY isRestrictedChanged)
	Q_PROPERTY(TLTrue isDemocracy READ isDemocracy WRITE setIsDemocracy NOTIFY isDemocracyChanged)
	Q_PROPERTY(TLTrue isSignatures READ isSignatures WRITE setIsSignatures NOTIFY isSignaturesChanged)
	Q_PROPERTY(TLTrue isMin READ isMin WRITE setIsMin NOTIFY isMinChanged)
	Q_PROPERTY(TLLong accessHash READ accessHash WRITE setAccessHash NOTIFY accessHashChanged)
	Q_PROPERTY(TLString username READ username WRITE setUsername NOTIFY usernameChanged)
	Q_PROPERTY(TLString restrictionReason READ restrictionReason WRITE setRestrictionReason NOTIFY restrictionReasonChanged)

	Q_ENUMS(Constructors)

	public:
		enum Constructors {
			CtorChatEmpty = 0x9ba2d800,
			CtorChat = 0xd91cdd54,
			CtorChatForbidden = 0x7328bdb,
			CtorChannel = 0xa14dca52,
			CtorChannelForbidden = 0x8537784f,
		};

	public:
		explicit Chat(QObject* parent = 0);
		virtual void read(MTProtoStream* mtstream);
		virtual void write(MTProtoStream* mtstream);
	protected:
		virtual void compileFlags();
	public:
		TLInt id() const;
		void setId(TLInt id);
		TLInt flags() const;
		void setFlags(TLInt flags);
		TLTrue isCreator() const;
		void setIsCreator(TLTrue is_creator);
		TLTrue isKicked() const;
		void setIsKicked(TLTrue is_kicked);
		TLTrue isLeft() const;
		void setIsLeft(TLTrue is_left);
		TLTrue isAdminsEnabled() const;
		void setIsAdminsEnabled(TLTrue is_admins_enabled);
		TLTrue isAdmin() const;
		void setIsAdmin(TLTrue is_admin);
		TLTrue isDeactivated() const;
		void setIsDeactivated(TLTrue is_deactivated);
		TLString title() const;
		void setTitle(TLString title);
		ChatPhoto* photo() const;
		void setPhoto(ChatPhoto* photo);
		TLInt participantsCount() const;
		void setParticipantsCount(TLInt participants_count);
		TLInt date() const;
		void setDate(TLInt date);
		TLInt version() const;
		void setVersion(TLInt version);
		InputChannel* migratedTo() const;
		void setMigratedTo(InputChannel* migrated_to);
		TLTrue isEditor() const;
		void setIsEditor(TLTrue is_editor);
		TLTrue isModerator() const;
		void setIsModerator(TLTrue is_moderator);
		TLTrue isBroadcast() const;
		void setIsBroadcast(TLTrue is_broadcast);
		TLTrue isVerified() const;
		void setIsVerified(TLTrue is_verified);
		TLTrue isMegagroup() const;
		void setIsMegagroup(TLTrue is_megagroup);
		TLTrue isRestricted() const;
		void setIsRestricted(TLTrue is_restricted);
		TLTrue isDemocracy() const;
		void setIsDemocracy(TLTrue is_democracy);
		TLTrue isSignatures() const;
		void setIsSignatures(TLTrue is_signatures);
		TLTrue isMin() const;
		void setIsMin(TLTrue is_min);
		TLLong accessHash() const;
		void setAccessHash(TLLong access_hash);
		TLString username() const;
		void setUsername(TLString username);
		TLString restrictionReason() const;
		void setRestrictionReason(TLString restriction_reason);

	signals:
		void idChanged();
		void flagsChanged();
		void isCreatorChanged();
		void isKickedChanged();
		void isLeftChanged();
		void isAdminsEnabledChanged();
		void isAdminChanged();
		void isDeactivatedChanged();
		void titleChanged();
		void photoChanged();
		void participantsCountChanged();
		void dateChanged();
		void versionChanged();
		void migratedToChanged();
		void isEditorChanged();
		void isModeratorChanged();
		void isBroadcastChanged();
		void isVerifiedChanged();
		void isMegagroupChanged();
		void isRestrictedChanged();
		void isDemocracyChanged();
		void isSignaturesChanged();
		void isMinChanged();
		void accessHashChanged();
		void usernameChanged();
		void restrictionReasonChanged();

	private:
		TLInt _id;
		TLInt _flags;
		TLTrue _is_creator;
		TLTrue _is_kicked;
		TLTrue _is_left;
		TLTrue _is_admins_enabled;
		TLTrue _is_admin;
		TLTrue _is_deactivated;
		TLString _title;
		ChatPhoto* _photo;
		TLInt _participants_count;
		TLInt _date;
		TLInt _version;
		InputChannel* _migrated_to;
		TLTrue _is_editor;
		TLTrue _is_moderator;
		TLTrue _is_broadcast;
		TLTrue _is_verified;
		TLTrue _is_megagroup;
		TLTrue _is_restricted;
		TLTrue _is_democracy;
		TLTrue _is_signatures;
		TLTrue _is_min;
		TLLong _access_hash;
		TLString _username;
		TLString _restriction_reason;

};

#endif // CHAT_H
