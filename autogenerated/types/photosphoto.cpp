// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "photosphoto.h"


PhotosPhoto::PhotosPhoto(QObject* parent) : TelegramObject(parent)
{
	this->_photo = NULL;
	this->_constructorid = PhotosPhoto::CtorPhotosPhoto;
}

void PhotosPhoto::read(MTProtoStream* mtstream) 
{
	this->_constructorid = mtstream->readTLConstructor();
	
	Q_ASSERT((this->_constructorid == PhotosPhoto::CtorPhotosPhoto));
	
	if(this->_constructorid == PhotosPhoto::CtorPhotosPhoto)
	{
		TLInt photo_ctor = mtstream->peekTLConstructor();
		
		if(photo_ctor != TLTypes::Null)
		{
			this->resetTLType<Photo>(&this->_photo);
			this->_photo->read(mtstream);
		}
		else
		{
			this->nullTLType<Photo>(&this->_photo);
			mtstream->readTLConstructor(); // Skip Null
		}
		
		mtstream->readTLVector<User>(this->_users, false, this);
	}
}

void PhotosPhoto::write(MTProtoStream* mtstream) 
{
	Q_ASSERT((this->_constructorid == PhotosPhoto::CtorPhotosPhoto));
	
	this->compileFlags();
	mtstream->writeTLConstructor(this->_constructorid);
	
	if(this->_constructorid == PhotosPhoto::CtorPhotosPhoto)
	{
		if(this->_photo != NULL)
			this->_photo->write(mtstream);
		else
			mtstream->writeTLConstructor(TLTypes::Null);
		
		mtstream->writeTLVector(this->_users, false);
	}
}

void PhotosPhoto::compileFlags() 
{
	
}

Photo* PhotosPhoto::photo() const
{
	return this->_photo;
}

void PhotosPhoto::setPhoto(Photo* photo) 
{
	if(this->_photo == photo)
		return;

	this->deleteChild(this->_photo);
	this->_photo = photo;

	if(this->_photo)
		this->_photo->setParent(this);

	emit photoChanged();
}

const TLVector<User*>& PhotosPhoto::users() const
{
	return this->_users;
}

void PhotosPhoto::setUsers(const TLVector<User*>& users) 
{
	if(this->_users == users)
		return;

	this->_users = users;
	emit usersChanged();
}

