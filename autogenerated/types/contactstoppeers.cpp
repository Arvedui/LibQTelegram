// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "contactstoppeers.h"


ContactsTopPeers::ContactsTopPeers(QObject* parent) : TelegramObject(parent)
{
	
}

void ContactsTopPeers::read(MTProtoStream* mtstream) 
{
	this->_constructorid = mtstream->readTLConstructor();
	
	Q_ASSERT((this->_constructorid == ContactsTopPeers::ctorContactsTopPeersNotModified) ||
		 (this->_constructorid == ContactsTopPeers::ctorContactsTopPeers));
	
	if(this->_constructorid == ContactsTopPeers::ctorContactsTopPeers)
	{
		mtstream->readTLVector<TopPeerCategoryPeers>(this->_categories, false);
		mtstream->readTLVector<Chat>(this->_chats, false);
		mtstream->readTLVector<User>(this->_users, false);
	}
}

void ContactsTopPeers::write(MTProtoStream* mtstream) 
{
	Q_ASSERT((this->_constructorid == ContactsTopPeers::ctorContactsTopPeersNotModified) ||
		 (this->_constructorid == ContactsTopPeers::ctorContactsTopPeers));
	
	this->compileFlags();
	mtstream->writeTLConstructor(this->_constructorid);
	
	if(this->_constructorid == ContactsTopPeers::ctorContactsTopPeers)
	{
		mtstream->writeTLVector(this->_categories, false);
		mtstream->writeTLVector(this->_chats, false);
		mtstream->writeTLVector(this->_users, false);
	}
}

void ContactsTopPeers::compileFlags() 
{
	
}

const TLVector<TopPeerCategoryPeers*>& ContactsTopPeers::categories() const
{
	return this->_categories;
}

void ContactsTopPeers::setCategories(const TLVector<TopPeerCategoryPeers*>& categories) 
{
	if(this->_categories == categories)
		return;

	this->_categories = categories;
	emit categoriesChanged();
}

const TLVector<Chat*>& ContactsTopPeers::chats() const
{
	return this->_chats;
}

void ContactsTopPeers::setChats(const TLVector<Chat*>& chats) 
{
	if(this->_chats == chats)
		return;

	this->_chats = chats;
	emit chatsChanged();
}

const TLVector<User*>& ContactsTopPeers::users() const
{
	return this->_users;
}

void ContactsTopPeers::setUsers(const TLVector<User*>& users) 
{
	if(this->_users == users)
		return;

	this->_users = users;
	emit usersChanged();
}

