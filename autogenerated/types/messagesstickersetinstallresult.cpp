// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "messagesstickersetinstallresult.h"


MessagesStickerSetInstallResult::MessagesStickerSetInstallResult(QObject* parent) : TelegramObject(parent)
{
	
}

void MessagesStickerSetInstallResult::read(MTProtoStream* mtstream) 
{
	this->_constructorid = mtstream->readTLConstructor();
	
	Q_ASSERT((this->_constructorid == MessagesStickerSetInstallResult::ctorMessagesStickerSetInstallResultSuccess) ||
		 (this->_constructorid == MessagesStickerSetInstallResult::ctorMessagesStickerSetInstallResultArchive));
	
	if(this->_constructorid == MessagesStickerSetInstallResult::ctorMessagesStickerSetInstallResultArchive)
		mtstream->readTLVector<StickerSetCovered>(this->_sets, false);
}

void MessagesStickerSetInstallResult::write(MTProtoStream* mtstream) 
{
	Q_ASSERT((this->_constructorid == MessagesStickerSetInstallResult::ctorMessagesStickerSetInstallResultSuccess) ||
		 (this->_constructorid == MessagesStickerSetInstallResult::ctorMessagesStickerSetInstallResultArchive));
	
	this->compileFlags();
	mtstream->writeTLConstructor(this->_constructorid);
	
	if(this->_constructorid == MessagesStickerSetInstallResult::ctorMessagesStickerSetInstallResultArchive)
		mtstream->writeTLVector(this->_sets, false);
}

void MessagesStickerSetInstallResult::compileFlags() 
{
	
}

const TLVector<StickerSetCovered*>& MessagesStickerSetInstallResult::sets() const
{
	return this->_sets;
}

void MessagesStickerSetInstallResult::setSets(const TLVector<StickerSetCovered*>& sets) 
{
	if(this->_sets == sets)
		return;

	this->_sets = sets;
	emit setsChanged();
}

