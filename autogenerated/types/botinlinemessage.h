#ifndef BOTINLINEMESSAGE_H
#define BOTINLINEMESSAGE_H

// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "replymarkup.h"
#include "geopoint.h"
#include "../../types/basic.h"
#include "../../types/telegramobject.h"
#include "messageentity.h"

class BotInlineMessage: public TelegramObject
{
	Q_OBJECT

	Q_PROPERTY(TLInt flags READ flags WRITE setFlags NOTIFY flagsChanged)
	Q_PROPERTY(TLString caption READ caption WRITE setCaption NOTIFY captionChanged)
	Q_PROPERTY(ReplyMarkup* replyMarkup READ replyMarkup WRITE setReplyMarkup NOTIFY replyMarkupChanged)
	Q_PROPERTY(TLTrue isNoWebpage READ isNoWebpage WRITE setIsNoWebpage NOTIFY isNoWebpageChanged)
	Q_PROPERTY(TLString message READ message WRITE setMessage NOTIFY messageChanged)
	Q_PROPERTY(TLVector<MessageEntity*> entities READ entities WRITE setEntities NOTIFY entitiesChanged)
	Q_PROPERTY(GeoPoint* geo READ geo WRITE setGeo NOTIFY geoChanged)
	Q_PROPERTY(TLString title READ title WRITE setTitle NOTIFY titleChanged)
	Q_PROPERTY(TLString address READ address WRITE setAddress NOTIFY addressChanged)
	Q_PROPERTY(TLString provider READ provider WRITE setProvider NOTIFY providerChanged)
	Q_PROPERTY(TLString venueId READ venueId WRITE setVenueId NOTIFY venueIdChanged)
	Q_PROPERTY(TLString phoneNumber READ phoneNumber WRITE setPhoneNumber NOTIFY phoneNumberChanged)
	Q_PROPERTY(TLString firstName READ firstName WRITE setFirstName NOTIFY firstNameChanged)
	Q_PROPERTY(TLString lastName READ lastName WRITE setLastName NOTIFY lastNameChanged)

	Q_ENUMS(Constructors)

	public:
		enum Constructors {
			CtorBotInlineMessageMediaAuto = 0xa74b15b,
			CtorBotInlineMessageText = 0x8c7f65e2,
			CtorBotInlineMessageMediaGeo = 0x3a8fd8b8,
			CtorBotInlineMessageMediaVenue = 0x4366232e,
			CtorBotInlineMessageMediaContact = 0x35edb4d4,
		};

	public:
		explicit BotInlineMessage(QObject* parent = 0);
		virtual void read(MTProtoStream* mtstream);
		virtual void write(MTProtoStream* mtstream);
	protected:
		virtual void compileFlags();
	public:
		TLInt flags() const;
		void setFlags(TLInt flags);
		TLString caption() const;
		void setCaption(TLString caption);
		ReplyMarkup* replyMarkup() const;
		void setReplyMarkup(ReplyMarkup* reply_markup);
		TLTrue isNoWebpage() const;
		void setIsNoWebpage(TLTrue is_no_webpage);
		TLString message() const;
		void setMessage(TLString message);
		const TLVector<MessageEntity*>& entities() const;
		void setEntities(const TLVector<MessageEntity*>& entities);
		GeoPoint* geo() const;
		void setGeo(GeoPoint* geo);
		TLString title() const;
		void setTitle(TLString title);
		TLString address() const;
		void setAddress(TLString address);
		TLString provider() const;
		void setProvider(TLString provider);
		TLString venueId() const;
		void setVenueId(TLString venue_id);
		TLString phoneNumber() const;
		void setPhoneNumber(TLString phone_number);
		TLString firstName() const;
		void setFirstName(TLString first_name);
		TLString lastName() const;
		void setLastName(TLString last_name);

	signals:
		void flagsChanged();
		void captionChanged();
		void replyMarkupChanged();
		void isNoWebpageChanged();
		void messageChanged();
		void entitiesChanged();
		void geoChanged();
		void titleChanged();
		void addressChanged();
		void providerChanged();
		void venueIdChanged();
		void phoneNumberChanged();
		void firstNameChanged();
		void lastNameChanged();

	private:
		TLInt _flags;
		TLString _caption;
		ReplyMarkup* _reply_markup;
		TLTrue _is_no_webpage;
		TLString _message;
		TLVector<MessageEntity*> _entities;
		GeoPoint* _geo;
		TLString _title;
		TLString _address;
		TLString _provider;
		TLString _venue_id;
		TLString _phone_number;
		TLString _first_name;
		TLString _last_name;

};

#endif // BOTINLINEMESSAGE_H
