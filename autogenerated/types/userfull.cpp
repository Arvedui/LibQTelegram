// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "userfull.h"


UserFull::UserFull(QObject* parent) : TelegramObject(parent)
{
	this->_flags = 0;
	this->_is_blocked = false;
	this->_user = NULL;
	this->_link = NULL;
	this->_profile_photo = NULL;
	this->_notify_settings = NULL;
	this->_bot_info = NULL;
	this->_constructorid = UserFull::ctorUserFull;
}

void UserFull::read(MTProtoStream* mtstream) 
{
	this->_constructorid = mtstream->readTLConstructor();
	
	Q_ASSERT((this->_constructorid == UserFull::ctorUserFull));
	
	if(this->_constructorid == UserFull::ctorUserFull)
	{
		this->_flags = mtstream->readTLInt();
		this->_is_blocked = IS_FLAG_SET(this->_flags, 0);
		TLInt user_ctor = mtstream->peekTLConstructor();
		
		if(user_ctor != TLTypes::Null)
		{
			RESET_TLTYPE(User, this->_user);
			this->_user->read(mtstream);
		}
		else
		{
			NULL_TLTYPE(this->_user);
			mtstream->readTLConstructor(); // Skip Null
		}
		
		if(IS_FLAG_SET(this->_flags, 1))
			this->_about = mtstream->readTLString();
		
		TLInt link_ctor = mtstream->peekTLConstructor();
		
		if(link_ctor != TLTypes::Null)
		{
			RESET_TLTYPE(ContactsLink, this->_link);
			this->_link->read(mtstream);
		}
		else
		{
			NULL_TLTYPE(this->_link);
			mtstream->readTLConstructor(); // Skip Null
		}
		
		if(IS_FLAG_SET(this->_flags, 2))
		{
			TLInt profile_photo_ctor = mtstream->peekTLConstructor();
			
			if(profile_photo_ctor != TLTypes::Null)
			{
				RESET_TLTYPE(Photo, this->_profile_photo);
				this->_profile_photo->read(mtstream);
			}
			else
			{
				NULL_TLTYPE(this->_profile_photo);
				mtstream->readTLConstructor(); // Skip Null
			}
		}
		
		TLInt notify_settings_ctor = mtstream->peekTLConstructor();
		
		if(notify_settings_ctor != TLTypes::Null)
		{
			RESET_TLTYPE(PeerNotifySettings, this->_notify_settings);
			this->_notify_settings->read(mtstream);
		}
		else
		{
			NULL_TLTYPE(this->_notify_settings);
			mtstream->readTLConstructor(); // Skip Null
		}
		
		if(IS_FLAG_SET(this->_flags, 3))
		{
			TLInt bot_info_ctor = mtstream->peekTLConstructor();
			
			if(bot_info_ctor != TLTypes::Null)
			{
				RESET_TLTYPE(BotInfo, this->_bot_info);
				this->_bot_info->read(mtstream);
			}
			else
			{
				NULL_TLTYPE(this->_bot_info);
				mtstream->readTLConstructor(); // Skip Null
			}
		}
	}
}

void UserFull::write(MTProtoStream* mtstream) 
{
	Q_ASSERT((this->_constructorid == UserFull::ctorUserFull));
	
	this->compileFlags();
	mtstream->writeTLConstructor(this->_constructorid);
	
	if(this->_constructorid == UserFull::ctorUserFull)
	{
		mtstream->writeTLInt(this->_flags);
		if(this->_user != NULL)
			this->_user->write(mtstream);
		else
			mtstream->writeTLConstructor(TLTypes::Null);
		
		if(IS_FLAG_SET(this->_flags, 1))
			mtstream->writeTLString(this->_about);
		
		if(this->_link != NULL)
			this->_link->write(mtstream);
		else
			mtstream->writeTLConstructor(TLTypes::Null);
		
		if(IS_FLAG_SET(this->_flags, 2))
		{
			if(this->_profile_photo != NULL)
				this->_profile_photo->write(mtstream);
			else
				mtstream->writeTLConstructor(TLTypes::Null);
		}
		
		if(this->_notify_settings != NULL)
			this->_notify_settings->write(mtstream);
		else
			mtstream->writeTLConstructor(TLTypes::Null);
		
		if(IS_FLAG_SET(this->_flags, 3))
		{
			if(this->_bot_info != NULL)
				this->_bot_info->write(mtstream);
			else
				mtstream->writeTLConstructor(TLTypes::Null);
		}
	}
}

void UserFull::compileFlags() 
{
	this->_flags = 0;
	
	if(this->_constructorid == UserFull::ctorUserFull)
	{
		if(this->_is_blocked)
			SET_FLAG_BIT(this->_flags, 0);
		if(!this->_about.isEmpty())
			SET_FLAG_BIT(this->_flags, 1);
		if(this->_profile_photo)
			SET_FLAG_BIT(this->_flags, 2);
		if(this->_bot_info)
			SET_FLAG_BIT(this->_flags, 3);
	}
}

TLInt UserFull::flags() const
{
	return this->_flags;
}

void UserFull::setFlags(TLInt flags) 
{
	if(this->_flags == flags)
		return;

	this->_flags = flags;
	emit flagsChanged();
}

TLTrue UserFull::isBlocked() const
{
	return this->_is_blocked;
}

void UserFull::setIsBlocked(TLTrue is_blocked) 
{
	if(this->_is_blocked == is_blocked)
		return;

	this->_is_blocked = is_blocked;
	emit isBlockedChanged();
}

User* UserFull::user() const
{
	return this->_user;
}

void UserFull::setUser(User* user) 
{
	if(this->_user == user)
		return;

	this->_user = user;
	emit userChanged();
}

TLString UserFull::about() const
{
	return this->_about;
}

void UserFull::setAbout(TLString about) 
{
	if(this->_about == about)
		return;

	this->_about = about;
	emit aboutChanged();
}

ContactsLink* UserFull::link() const
{
	return this->_link;
}

void UserFull::setLink(ContactsLink* link) 
{
	if(this->_link == link)
		return;

	this->_link = link;
	emit linkChanged();
}

Photo* UserFull::profilePhoto() const
{
	return this->_profile_photo;
}

void UserFull::setProfilePhoto(Photo* profile_photo) 
{
	if(this->_profile_photo == profile_photo)
		return;

	this->_profile_photo = profile_photo;
	emit profilePhotoChanged();
}

PeerNotifySettings* UserFull::notifySettings() const
{
	return this->_notify_settings;
}

void UserFull::setNotifySettings(PeerNotifySettings* notify_settings) 
{
	if(this->_notify_settings == notify_settings)
		return;

	this->_notify_settings = notify_settings;
	emit notifySettingsChanged();
}

BotInfo* UserFull::botInfo() const
{
	return this->_bot_info;
}

void UserFull::setBotInfo(BotInfo* bot_info) 
{
	if(this->_bot_info == bot_info)
		return;

	this->_bot_info = bot_info;
	emit botInfoChanged();
}

