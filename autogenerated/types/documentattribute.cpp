// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "documentattribute.h"


DocumentAttribute::DocumentAttribute(QObject* parent) : TelegramObject(parent)
{
	this->_w = 0;
	this->_h = 0;
	this->_flags = 0;
	this->_is_mask = false;
	this->_stickerset = NULL;
	this->_mask_coords = NULL;
	this->_duration = 0;
	this->_is_voice = false;
}

void DocumentAttribute::read(MTProtoStream* mtstream) 
{
	this->_constructorid = mtstream->readTLConstructor();
	
	Q_ASSERT((this->_constructorid == DocumentAttribute::ctorDocumentAttributeImageSize) ||
		 (this->_constructorid == DocumentAttribute::ctorDocumentAttributeAnimated) ||
		 (this->_constructorid == DocumentAttribute::ctorDocumentAttributeSticker) ||
		 (this->_constructorid == DocumentAttribute::ctorDocumentAttributeVideo) ||
		 (this->_constructorid == DocumentAttribute::ctorDocumentAttributeAudio) ||
		 (this->_constructorid == DocumentAttribute::ctorDocumentAttributeFilename) ||
		 (this->_constructorid == DocumentAttribute::ctorDocumentAttributeHasStickers));
	
	if(this->_constructorid == DocumentAttribute::ctorDocumentAttributeImageSize)
	{
		this->_w = mtstream->readTLInt();
		this->_h = mtstream->readTLInt();
	}
	else if(this->_constructorid == DocumentAttribute::ctorDocumentAttributeSticker)
	{
		this->_flags = mtstream->readTLInt();
		this->_is_mask = IS_FLAG_SET(this->_flags, 1);
		this->_alt = mtstream->readTLString();
		TLInt stickerset_ctor = mtstream->peekTLConstructor();
		
		if(stickerset_ctor != TLTypes::Null)
		{
			RESET_TLTYPE(InputStickerSet, this->_stickerset);
			this->_stickerset->read(mtstream);
		}
		else
		{
			NULL_TLTYPE(this->_stickerset);
			mtstream->readTLConstructor(); // Skip Null
		}
		
		if(IS_FLAG_SET(this->_flags, 0))
		{
			TLInt mask_coords_ctor = mtstream->peekTLConstructor();
			
			if(mask_coords_ctor != TLTypes::Null)
			{
				RESET_TLTYPE(MaskCoords, this->_mask_coords);
				this->_mask_coords->read(mtstream);
			}
			else
			{
				NULL_TLTYPE(this->_mask_coords);
				mtstream->readTLConstructor(); // Skip Null
			}
		}
	}
	else if(this->_constructorid == DocumentAttribute::ctorDocumentAttributeVideo)
	{
		this->_duration = mtstream->readTLInt();
		this->_w = mtstream->readTLInt();
		this->_h = mtstream->readTLInt();
	}
	else if(this->_constructorid == DocumentAttribute::ctorDocumentAttributeAudio)
	{
		this->_flags = mtstream->readTLInt();
		this->_is_voice = IS_FLAG_SET(this->_flags, 10);
		this->_duration = mtstream->readTLInt();
		if(IS_FLAG_SET(this->_flags, 0))
			this->_title = mtstream->readTLString();
		
		if(IS_FLAG_SET(this->_flags, 1))
			this->_performer = mtstream->readTLString();
		
		if(IS_FLAG_SET(this->_flags, 2))
			this->_waveform = mtstream->readTLBytes();
	}
	else if(this->_constructorid == DocumentAttribute::ctorDocumentAttributeFilename)
		this->_file_name = mtstream->readTLString();
}

void DocumentAttribute::write(MTProtoStream* mtstream) 
{
	Q_ASSERT((this->_constructorid == DocumentAttribute::ctorDocumentAttributeImageSize) ||
		 (this->_constructorid == DocumentAttribute::ctorDocumentAttributeAnimated) ||
		 (this->_constructorid == DocumentAttribute::ctorDocumentAttributeSticker) ||
		 (this->_constructorid == DocumentAttribute::ctorDocumentAttributeVideo) ||
		 (this->_constructorid == DocumentAttribute::ctorDocumentAttributeAudio) ||
		 (this->_constructorid == DocumentAttribute::ctorDocumentAttributeFilename) ||
		 (this->_constructorid == DocumentAttribute::ctorDocumentAttributeHasStickers));
	
	this->compileFlags();
	mtstream->writeTLConstructor(this->_constructorid);
	
	if(this->_constructorid == DocumentAttribute::ctorDocumentAttributeImageSize)
	{
		mtstream->writeTLInt(this->_w);
		mtstream->writeTLInt(this->_h);
	}
	else if(this->_constructorid == DocumentAttribute::ctorDocumentAttributeSticker)
	{
		mtstream->writeTLInt(this->_flags);
		mtstream->writeTLString(this->_alt);
		if(this->_stickerset != NULL)
			this->_stickerset->write(mtstream);
		else
			mtstream->writeTLConstructor(TLTypes::Null);
		
		if(IS_FLAG_SET(this->_flags, 0))
		{
			if(this->_mask_coords != NULL)
				this->_mask_coords->write(mtstream);
			else
				mtstream->writeTLConstructor(TLTypes::Null);
		}
	}
	else if(this->_constructorid == DocumentAttribute::ctorDocumentAttributeVideo)
	{
		mtstream->writeTLInt(this->_duration);
		mtstream->writeTLInt(this->_w);
		mtstream->writeTLInt(this->_h);
	}
	else if(this->_constructorid == DocumentAttribute::ctorDocumentAttributeAudio)
	{
		mtstream->writeTLInt(this->_flags);
		mtstream->writeTLInt(this->_duration);
		if(IS_FLAG_SET(this->_flags, 0))
			mtstream->writeTLString(this->_title);
		
		if(IS_FLAG_SET(this->_flags, 1))
			mtstream->writeTLString(this->_performer);
		
		if(IS_FLAG_SET(this->_flags, 2))
			mtstream->writeTLBytes(this->_waveform);
	}
	else if(this->_constructorid == DocumentAttribute::ctorDocumentAttributeFilename)
		mtstream->writeTLString(this->_file_name);
}

void DocumentAttribute::compileFlags() 
{
	this->_flags = 0;
	
	if(this->_constructorid == DocumentAttribute::ctorDocumentAttributeSticker)
	{
		if(this->_is_mask)
			SET_FLAG_BIT(this->_flags, 1);
		if(this->_mask_coords)
			SET_FLAG_BIT(this->_flags, 0);
	}
	else if(this->_constructorid == DocumentAttribute::ctorDocumentAttributeAudio)
	{
		if(this->_is_voice)
			SET_FLAG_BIT(this->_flags, 10);
		if(!this->_title.isEmpty())
			SET_FLAG_BIT(this->_flags, 0);
		if(!this->_performer.isEmpty())
			SET_FLAG_BIT(this->_flags, 1);
		if(!this->_waveform.isEmpty())
			SET_FLAG_BIT(this->_flags, 2);
	}
}

TLInt DocumentAttribute::w() const
{
	return this->_w;
}

void DocumentAttribute::setW(TLInt w) 
{
	if(this->_w == w)
		return;

	this->_w = w;
	emit wChanged();
}

TLInt DocumentAttribute::h() const
{
	return this->_h;
}

void DocumentAttribute::setH(TLInt h) 
{
	if(this->_h == h)
		return;

	this->_h = h;
	emit hChanged();
}

TLInt DocumentAttribute::flags() const
{
	return this->_flags;
}

void DocumentAttribute::setFlags(TLInt flags) 
{
	if(this->_flags == flags)
		return;

	this->_flags = flags;
	emit flagsChanged();
}

TLTrue DocumentAttribute::isMask() const
{
	return this->_is_mask;
}

void DocumentAttribute::setIsMask(TLTrue is_mask) 
{
	if(this->_is_mask == is_mask)
		return;

	this->_is_mask = is_mask;
	emit isMaskChanged();
}

TLString DocumentAttribute::alt() const
{
	return this->_alt;
}

void DocumentAttribute::setAlt(TLString alt) 
{
	if(this->_alt == alt)
		return;

	this->_alt = alt;
	emit altChanged();
}

InputStickerSet* DocumentAttribute::stickerset() const
{
	return this->_stickerset;
}

void DocumentAttribute::setStickerset(InputStickerSet* stickerset) 
{
	if(this->_stickerset == stickerset)
		return;

	this->_stickerset = stickerset;
	emit stickersetChanged();
}

MaskCoords* DocumentAttribute::maskCoords() const
{
	return this->_mask_coords;
}

void DocumentAttribute::setMaskCoords(MaskCoords* mask_coords) 
{
	if(this->_mask_coords == mask_coords)
		return;

	this->_mask_coords = mask_coords;
	emit maskCoordsChanged();
}

TLInt DocumentAttribute::duration() const
{
	return this->_duration;
}

void DocumentAttribute::setDuration(TLInt duration) 
{
	if(this->_duration == duration)
		return;

	this->_duration = duration;
	emit durationChanged();
}

TLTrue DocumentAttribute::isVoice() const
{
	return this->_is_voice;
}

void DocumentAttribute::setIsVoice(TLTrue is_voice) 
{
	if(this->_is_voice == is_voice)
		return;

	this->_is_voice = is_voice;
	emit isVoiceChanged();
}

TLString DocumentAttribute::title() const
{
	return this->_title;
}

void DocumentAttribute::setTitle(TLString title) 
{
	if(this->_title == title)
		return;

	this->_title = title;
	emit titleChanged();
}

TLString DocumentAttribute::performer() const
{
	return this->_performer;
}

void DocumentAttribute::setPerformer(TLString performer) 
{
	if(this->_performer == performer)
		return;

	this->_performer = performer;
	emit performerChanged();
}

TLBytes DocumentAttribute::waveform() const
{
	return this->_waveform;
}

void DocumentAttribute::setWaveform(TLBytes waveform) 
{
	if(this->_waveform == waveform)
		return;

	this->_waveform = waveform;
	emit waveformChanged();
}

TLString DocumentAttribute::fileName() const
{
	return this->_file_name;
}

void DocumentAttribute::setFileName(TLString file_name) 
{
	if(this->_file_name == file_name)
		return;

	this->_file_name = file_name;
	emit fileNameChanged();
}

