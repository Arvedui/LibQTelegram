// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "accountprivacyrules.h"


AccountPrivacyRules::AccountPrivacyRules(QObject* parent) : TelegramObject(parent)
{
	this->_constructorid = AccountPrivacyRules::ctorAccountPrivacyRules;
}

void AccountPrivacyRules::read(MTProtoStream* mtstream) 
{
	this->_constructorid = mtstream->readTLConstructor();
	
	Q_ASSERT((this->_constructorid == AccountPrivacyRules::ctorAccountPrivacyRules));
	
	if(this->_constructorid == AccountPrivacyRules::ctorAccountPrivacyRules)
	{
		mtstream->readTLVector<PrivacyRule>(this->_rules, false);
		mtstream->readTLVector<User>(this->_users, false);
	}
}

void AccountPrivacyRules::write(MTProtoStream* mtstream) 
{
	Q_ASSERT((this->_constructorid == AccountPrivacyRules::ctorAccountPrivacyRules));
	
	this->compileFlags();
	mtstream->writeTLConstructor(this->_constructorid);
	
	if(this->_constructorid == AccountPrivacyRules::ctorAccountPrivacyRules)
	{
		mtstream->writeTLVector(this->_rules, false);
		mtstream->writeTLVector(this->_users, false);
	}
}

void AccountPrivacyRules::compileFlags() 
{
	
}

const TLVector<PrivacyRule*>& AccountPrivacyRules::rules() const
{
	return this->_rules;
}

void AccountPrivacyRules::setRules(const TLVector<PrivacyRule*>& rules) 
{
	if(this->_rules == rules)
		return;

	this->_rules = rules;
	emit rulesChanged();
}

const TLVector<User*>& AccountPrivacyRules::users() const
{
	return this->_users;
}

void AccountPrivacyRules::setUsers(const TLVector<User*>& users) 
{
	if(this->_users == users)
		return;

	this->_users = users;
	emit usersChanged();
}

