#ifndef CHATFULL_H
#define CHATFULL_H

// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "../../types/basic.h"
#include "../../types/telegramobject.h"
#include "chatparticipants.h"
#include "botinfo.h"
#include "photo.h"
#include "peernotifysettings.h"
#include "exportedchatinvite.h"

class ChatFull: public TelegramObject
{
	Q_OBJECT

	Q_PROPERTY(TLInt id READ id WRITE setId NOTIFY idChanged)
	Q_PROPERTY(ChatParticipants* participants READ participants WRITE setParticipants NOTIFY participantsChanged)
	Q_PROPERTY(Photo* chatPhoto READ chatPhoto WRITE setChatPhoto NOTIFY chatPhotoChanged)
	Q_PROPERTY(PeerNotifySettings* notifySettings READ notifySettings WRITE setNotifySettings NOTIFY notifySettingsChanged)
	Q_PROPERTY(ExportedChatInvite* exportedInvite READ exportedInvite WRITE setExportedInvite NOTIFY exportedInviteChanged)
	Q_PROPERTY(TLVector<BotInfo*> botInfo READ botInfo WRITE setBotInfo NOTIFY botInfoChanged)
	Q_PROPERTY(TLInt flags READ flags WRITE setFlags NOTIFY flagsChanged)
	Q_PROPERTY(TLTrue isCanViewParticipants READ isCanViewParticipants WRITE setIsCanViewParticipants NOTIFY isCanViewParticipantsChanged)
	Q_PROPERTY(TLTrue isCanSetUsername READ isCanSetUsername WRITE setIsCanSetUsername NOTIFY isCanSetUsernameChanged)
	Q_PROPERTY(TLString about READ about WRITE setAbout NOTIFY aboutChanged)
	Q_PROPERTY(TLInt participantsCount READ participantsCount WRITE setParticipantsCount NOTIFY participantsCountChanged)
	Q_PROPERTY(TLInt adminsCount READ adminsCount WRITE setAdminsCount NOTIFY adminsCountChanged)
	Q_PROPERTY(TLInt kickedCount READ kickedCount WRITE setKickedCount NOTIFY kickedCountChanged)
	Q_PROPERTY(TLInt readInboxMaxId READ readInboxMaxId WRITE setReadInboxMaxId NOTIFY readInboxMaxIdChanged)
	Q_PROPERTY(TLInt readOutboxMaxId READ readOutboxMaxId WRITE setReadOutboxMaxId NOTIFY readOutboxMaxIdChanged)
	Q_PROPERTY(TLInt unreadCount READ unreadCount WRITE setUnreadCount NOTIFY unreadCountChanged)
	Q_PROPERTY(TLInt migratedFromChatId READ migratedFromChatId WRITE setMigratedFromChatId NOTIFY migratedFromChatIdChanged)
	Q_PROPERTY(TLInt migratedFromMaxId READ migratedFromMaxId WRITE setMigratedFromMaxId NOTIFY migratedFromMaxIdChanged)
	Q_PROPERTY(TLInt pinnedMsgId READ pinnedMsgId WRITE setPinnedMsgId NOTIFY pinnedMsgIdChanged)

	Q_ENUMS(Constructors)

	public:
		enum Constructors {
			CtorChatFull = 0x2e02a614,
			CtorChannelFull = 0xc3d5512f,
		};

	public:
		explicit ChatFull(QObject* parent = 0);
		virtual void read(MTProtoStream* mtstream);
		virtual void write(MTProtoStream* mtstream);
	protected:
		virtual void compileFlags();
	public:
		TLInt id() const;
		void setId(TLInt id);
		ChatParticipants* participants() const;
		void setParticipants(ChatParticipants* participants);
		Photo* chatPhoto() const;
		void setChatPhoto(Photo* chat_photo);
		PeerNotifySettings* notifySettings() const;
		void setNotifySettings(PeerNotifySettings* notify_settings);
		ExportedChatInvite* exportedInvite() const;
		void setExportedInvite(ExportedChatInvite* exported_invite);
		const TLVector<BotInfo*>& botInfo() const;
		void setBotInfo(const TLVector<BotInfo*>& bot_info);
		TLInt flags() const;
		void setFlags(TLInt flags);
		TLTrue isCanViewParticipants() const;
		void setIsCanViewParticipants(TLTrue is_can_view_participants);
		TLTrue isCanSetUsername() const;
		void setIsCanSetUsername(TLTrue is_can_set_username);
		TLString about() const;
		void setAbout(TLString about);
		TLInt participantsCount() const;
		void setParticipantsCount(TLInt participants_count);
		TLInt adminsCount() const;
		void setAdminsCount(TLInt admins_count);
		TLInt kickedCount() const;
		void setKickedCount(TLInt kicked_count);
		TLInt readInboxMaxId() const;
		void setReadInboxMaxId(TLInt read_inbox_max_id);
		TLInt readOutboxMaxId() const;
		void setReadOutboxMaxId(TLInt read_outbox_max_id);
		TLInt unreadCount() const;
		void setUnreadCount(TLInt unread_count);
		TLInt migratedFromChatId() const;
		void setMigratedFromChatId(TLInt migrated_from_chat_id);
		TLInt migratedFromMaxId() const;
		void setMigratedFromMaxId(TLInt migrated_from_max_id);
		TLInt pinnedMsgId() const;
		void setPinnedMsgId(TLInt pinned_msg_id);

	signals:
		void idChanged();
		void participantsChanged();
		void chatPhotoChanged();
		void notifySettingsChanged();
		void exportedInviteChanged();
		void botInfoChanged();
		void flagsChanged();
		void isCanViewParticipantsChanged();
		void isCanSetUsernameChanged();
		void aboutChanged();
		void participantsCountChanged();
		void adminsCountChanged();
		void kickedCountChanged();
		void readInboxMaxIdChanged();
		void readOutboxMaxIdChanged();
		void unreadCountChanged();
		void migratedFromChatIdChanged();
		void migratedFromMaxIdChanged();
		void pinnedMsgIdChanged();

	private:
		TLInt _id;
		ChatParticipants* _participants;
		Photo* _chat_photo;
		PeerNotifySettings* _notify_settings;
		ExportedChatInvite* _exported_invite;
		TLVector<BotInfo*> _bot_info;
		TLInt _flags;
		TLTrue _is_can_view_participants;
		TLTrue _is_can_set_username;
		TLString _about;
		TLInt _participants_count;
		TLInt _admins_count;
		TLInt _kicked_count;
		TLInt _read_inbox_max_id;
		TLInt _read_outbox_max_id;
		TLInt _unread_count;
		TLInt _migrated_from_chat_id;
		TLInt _migrated_from_max_id;
		TLInt _pinned_msg_id;

};

#endif // CHATFULL_H
