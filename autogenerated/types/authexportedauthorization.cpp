// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "authexportedauthorization.h"


AuthExportedAuthorization::AuthExportedAuthorization(QObject* parent) : TelegramObject(parent)
{
	this->_id = 0;
	this->_constructorid = AuthExportedAuthorization::ctorAuthExportedAuthorization;
}

void AuthExportedAuthorization::read(MTProtoStream* mtstream) 
{
	this->_constructorid = mtstream->readTLConstructor();
	
	Q_ASSERT((this->_constructorid == AuthExportedAuthorization::ctorAuthExportedAuthorization));
	
	if(this->_constructorid == AuthExportedAuthorization::ctorAuthExportedAuthorization)
	{
		this->_id = mtstream->readTLInt();
		this->_bytes = mtstream->readTLBytes();
	}
}

void AuthExportedAuthorization::write(MTProtoStream* mtstream) 
{
	Q_ASSERT((this->_constructorid == AuthExportedAuthorization::ctorAuthExportedAuthorization));
	
	this->compileFlags();
	mtstream->writeTLConstructor(this->_constructorid);
	
	if(this->_constructorid == AuthExportedAuthorization::ctorAuthExportedAuthorization)
	{
		mtstream->writeTLInt(this->_id);
		mtstream->writeTLBytes(this->_bytes);
	}
}

void AuthExportedAuthorization::compileFlags() 
{
	
}

TLInt AuthExportedAuthorization::id() const
{
	return this->_id;
}

void AuthExportedAuthorization::setId(TLInt id) 
{
	if(this->_id == id)
		return;

	this->_id = id;
	emit idChanged();
}

TLBytes AuthExportedAuthorization::bytes() const
{
	return this->_bytes;
}

void AuthExportedAuthorization::setBytes(TLBytes bytes) 
{
	if(this->_bytes == bytes)
		return;

	this->_bytes = bytes;
	emit bytesChanged();
}

