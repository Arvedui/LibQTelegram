// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "chat.h"


Chat::Chat(QObject* parent) : TelegramObject(parent)
{
	this->_id = 0;
	this->_flags = 0;
	this->_is_creator = false;
	this->_is_kicked = false;
	this->_is_left = false;
	this->_is_admins_enabled = false;
	this->_is_admin = false;
	this->_is_deactivated = false;
	this->_photo = NULL;
	this->_participants_count = 0;
	this->_date = 0;
	this->_version = 0;
	this->_migrated_to = NULL;
	this->_is_editor = false;
	this->_is_moderator = false;
	this->_is_broadcast = false;
	this->_is_verified = false;
	this->_is_megagroup = false;
	this->_is_restricted = false;
	this->_is_democracy = false;
	this->_is_signatures = false;
	this->_is_min = false;
	this->_access_hash = 0;
}

void Chat::read(MTProtoStream* mtstream) 
{
	this->_constructorid = mtstream->readTLConstructor();
	
	Q_ASSERT((this->_constructorid == Chat::ctorChatEmpty) ||
		 (this->_constructorid == Chat::ctorChat) ||
		 (this->_constructorid == Chat::ctorChatForbidden) ||
		 (this->_constructorid == Chat::ctorChannel) ||
		 (this->_constructorid == Chat::ctorChannelForbidden));
	
	if(this->_constructorid == Chat::ctorChatEmpty)
		this->_id = mtstream->readTLInt();
	else if(this->_constructorid == Chat::ctorChat)
	{
		this->_flags = mtstream->readTLInt();
		this->_is_creator = IS_FLAG_SET(this->_flags, 0);
		this->_is_kicked = IS_FLAG_SET(this->_flags, 1);
		this->_is_left = IS_FLAG_SET(this->_flags, 2);
		this->_is_admins_enabled = IS_FLAG_SET(this->_flags, 3);
		this->_is_admin = IS_FLAG_SET(this->_flags, 4);
		this->_is_deactivated = IS_FLAG_SET(this->_flags, 5);
		this->_id = mtstream->readTLInt();
		this->_title = mtstream->readTLString();
		TLInt photo_ctor = mtstream->peekTLConstructor();
		
		if(photo_ctor != TLTypes::Null)
		{
			RESET_TLTYPE(ChatPhoto, this->_photo);
			this->_photo->read(mtstream);
		}
		else
		{
			NULL_TLTYPE(this->_photo);
			mtstream->readTLConstructor(); // Skip Null
		}
		
		this->_participants_count = mtstream->readTLInt();
		this->_date = mtstream->readTLInt();
		this->_version = mtstream->readTLInt();
		if(IS_FLAG_SET(this->_flags, 6))
		{
			TLInt migrated_to_ctor = mtstream->peekTLConstructor();
			
			if(migrated_to_ctor != TLTypes::Null)
			{
				RESET_TLTYPE(InputChannel, this->_migrated_to);
				this->_migrated_to->read(mtstream);
			}
			else
			{
				NULL_TLTYPE(this->_migrated_to);
				mtstream->readTLConstructor(); // Skip Null
			}
		}
	}
	else if(this->_constructorid == Chat::ctorChatForbidden)
	{
		this->_id = mtstream->readTLInt();
		this->_title = mtstream->readTLString();
	}
	else if(this->_constructorid == Chat::ctorChannel)
	{
		this->_flags = mtstream->readTLInt();
		this->_is_creator = IS_FLAG_SET(this->_flags, 0);
		this->_is_kicked = IS_FLAG_SET(this->_flags, 1);
		this->_is_left = IS_FLAG_SET(this->_flags, 2);
		this->_is_editor = IS_FLAG_SET(this->_flags, 3);
		this->_is_moderator = IS_FLAG_SET(this->_flags, 4);
		this->_is_broadcast = IS_FLAG_SET(this->_flags, 5);
		this->_is_verified = IS_FLAG_SET(this->_flags, 7);
		this->_is_megagroup = IS_FLAG_SET(this->_flags, 8);
		this->_is_restricted = IS_FLAG_SET(this->_flags, 9);
		this->_is_democracy = IS_FLAG_SET(this->_flags, 10);
		this->_is_signatures = IS_FLAG_SET(this->_flags, 11);
		this->_is_min = IS_FLAG_SET(this->_flags, 12);
		this->_id = mtstream->readTLInt();
		if(IS_FLAG_SET(this->_flags, 13))
			this->_access_hash = mtstream->readTLLong();
		
		this->_title = mtstream->readTLString();
		if(IS_FLAG_SET(this->_flags, 6))
			this->_username = mtstream->readTLString();
		
		TLInt photo_ctor = mtstream->peekTLConstructor();
		
		if(photo_ctor != TLTypes::Null)
		{
			RESET_TLTYPE(ChatPhoto, this->_photo);
			this->_photo->read(mtstream);
		}
		else
		{
			NULL_TLTYPE(this->_photo);
			mtstream->readTLConstructor(); // Skip Null
		}
		
		this->_date = mtstream->readTLInt();
		this->_version = mtstream->readTLInt();
		if(IS_FLAG_SET(this->_flags, 9))
			this->_restriction_reason = mtstream->readTLString();
	}
	else if(this->_constructorid == Chat::ctorChannelForbidden)
	{
		this->_flags = mtstream->readTLInt();
		this->_is_broadcast = IS_FLAG_SET(this->_flags, 5);
		this->_is_megagroup = IS_FLAG_SET(this->_flags, 8);
		this->_id = mtstream->readTLInt();
		this->_access_hash = mtstream->readTLLong();
		this->_title = mtstream->readTLString();
	}
}

void Chat::write(MTProtoStream* mtstream) 
{
	Q_ASSERT((this->_constructorid == Chat::ctorChatEmpty) ||
		 (this->_constructorid == Chat::ctorChat) ||
		 (this->_constructorid == Chat::ctorChatForbidden) ||
		 (this->_constructorid == Chat::ctorChannel) ||
		 (this->_constructorid == Chat::ctorChannelForbidden));
	
	this->compileFlags();
	mtstream->writeTLConstructor(this->_constructorid);
	
	if(this->_constructorid == Chat::ctorChatEmpty)
		mtstream->writeTLInt(this->_id);
	else if(this->_constructorid == Chat::ctorChat)
	{
		mtstream->writeTLInt(this->_flags);
		mtstream->writeTLInt(this->_id);
		mtstream->writeTLString(this->_title);
		if(this->_photo != NULL)
			this->_photo->write(mtstream);
		else
			mtstream->writeTLConstructor(TLTypes::Null);
		
		mtstream->writeTLInt(this->_participants_count);
		mtstream->writeTLInt(this->_date);
		mtstream->writeTLInt(this->_version);
		if(IS_FLAG_SET(this->_flags, 6))
		{
			if(this->_migrated_to != NULL)
				this->_migrated_to->write(mtstream);
			else
				mtstream->writeTLConstructor(TLTypes::Null);
		}
	}
	else if(this->_constructorid == Chat::ctorChatForbidden)
	{
		mtstream->writeTLInt(this->_id);
		mtstream->writeTLString(this->_title);
	}
	else if(this->_constructorid == Chat::ctorChannel)
	{
		mtstream->writeTLInt(this->_flags);
		mtstream->writeTLInt(this->_id);
		if(IS_FLAG_SET(this->_flags, 13))
			mtstream->writeTLLong(this->_access_hash);
		
		mtstream->writeTLString(this->_title);
		if(IS_FLAG_SET(this->_flags, 6))
			mtstream->writeTLString(this->_username);
		
		if(this->_photo != NULL)
			this->_photo->write(mtstream);
		else
			mtstream->writeTLConstructor(TLTypes::Null);
		
		mtstream->writeTLInt(this->_date);
		mtstream->writeTLInt(this->_version);
		if(IS_FLAG_SET(this->_flags, 9))
			mtstream->writeTLString(this->_restriction_reason);
	}
	else if(this->_constructorid == Chat::ctorChannelForbidden)
	{
		mtstream->writeTLInt(this->_flags);
		mtstream->writeTLInt(this->_id);
		mtstream->writeTLLong(this->_access_hash);
		mtstream->writeTLString(this->_title);
	}
}

void Chat::compileFlags() 
{
	this->_flags = 0;
	
	if(this->_constructorid == Chat::ctorChat)
	{
		if(this->_is_creator)
			SET_FLAG_BIT(this->_flags, 0);
		if(this->_is_kicked)
			SET_FLAG_BIT(this->_flags, 1);
		if(this->_is_left)
			SET_FLAG_BIT(this->_flags, 2);
		if(this->_is_admins_enabled)
			SET_FLAG_BIT(this->_flags, 3);
		if(this->_is_admin)
			SET_FLAG_BIT(this->_flags, 4);
		if(this->_is_deactivated)
			SET_FLAG_BIT(this->_flags, 5);
		if(this->_migrated_to)
			SET_FLAG_BIT(this->_flags, 6);
	}
	else if(this->_constructorid == Chat::ctorChannel)
	{
		if(this->_is_creator)
			SET_FLAG_BIT(this->_flags, 0);
		if(this->_is_kicked)
			SET_FLAG_BIT(this->_flags, 1);
		if(this->_is_left)
			SET_FLAG_BIT(this->_flags, 2);
		if(this->_is_editor)
			SET_FLAG_BIT(this->_flags, 3);
		if(this->_is_moderator)
			SET_FLAG_BIT(this->_flags, 4);
		if(this->_is_broadcast)
			SET_FLAG_BIT(this->_flags, 5);
		if(this->_is_verified)
			SET_FLAG_BIT(this->_flags, 7);
		if(this->_is_megagroup)
			SET_FLAG_BIT(this->_flags, 8);
		if(this->_is_restricted)
			SET_FLAG_BIT(this->_flags, 9);
		if(this->_is_democracy)
			SET_FLAG_BIT(this->_flags, 10);
		if(this->_is_signatures)
			SET_FLAG_BIT(this->_flags, 11);
		if(this->_is_min)
			SET_FLAG_BIT(this->_flags, 12);
		if(this->_access_hash)
			SET_FLAG_BIT(this->_flags, 13);
		if(!this->_username.isEmpty())
			SET_FLAG_BIT(this->_flags, 6);
		if(!this->_restriction_reason.isEmpty())
			SET_FLAG_BIT(this->_flags, 9);
	}
	else if(this->_constructorid == Chat::ctorChannelForbidden)
	{
		if(this->_is_broadcast)
			SET_FLAG_BIT(this->_flags, 5);
		if(this->_is_megagroup)
			SET_FLAG_BIT(this->_flags, 8);
	}
}

TLInt Chat::id() const
{
	return this->_id;
}

void Chat::setId(TLInt id) 
{
	if(this->_id == id)
		return;

	this->_id = id;
	emit idChanged();
}

TLInt Chat::flags() const
{
	return this->_flags;
}

void Chat::setFlags(TLInt flags) 
{
	if(this->_flags == flags)
		return;

	this->_flags = flags;
	emit flagsChanged();
}

TLTrue Chat::isCreator() const
{
	return this->_is_creator;
}

void Chat::setIsCreator(TLTrue is_creator) 
{
	if(this->_is_creator == is_creator)
		return;

	this->_is_creator = is_creator;
	emit isCreatorChanged();
}

TLTrue Chat::isKicked() const
{
	return this->_is_kicked;
}

void Chat::setIsKicked(TLTrue is_kicked) 
{
	if(this->_is_kicked == is_kicked)
		return;

	this->_is_kicked = is_kicked;
	emit isKickedChanged();
}

TLTrue Chat::isLeft() const
{
	return this->_is_left;
}

void Chat::setIsLeft(TLTrue is_left) 
{
	if(this->_is_left == is_left)
		return;

	this->_is_left = is_left;
	emit isLeftChanged();
}

TLTrue Chat::isAdminsEnabled() const
{
	return this->_is_admins_enabled;
}

void Chat::setIsAdminsEnabled(TLTrue is_admins_enabled) 
{
	if(this->_is_admins_enabled == is_admins_enabled)
		return;

	this->_is_admins_enabled = is_admins_enabled;
	emit isAdminsEnabledChanged();
}

TLTrue Chat::isAdmin() const
{
	return this->_is_admin;
}

void Chat::setIsAdmin(TLTrue is_admin) 
{
	if(this->_is_admin == is_admin)
		return;

	this->_is_admin = is_admin;
	emit isAdminChanged();
}

TLTrue Chat::isDeactivated() const
{
	return this->_is_deactivated;
}

void Chat::setIsDeactivated(TLTrue is_deactivated) 
{
	if(this->_is_deactivated == is_deactivated)
		return;

	this->_is_deactivated = is_deactivated;
	emit isDeactivatedChanged();
}

TLString Chat::title() const
{
	return this->_title;
}

void Chat::setTitle(TLString title) 
{
	if(this->_title == title)
		return;

	this->_title = title;
	emit titleChanged();
}

ChatPhoto* Chat::photo() const
{
	return this->_photo;
}

void Chat::setPhoto(ChatPhoto* photo) 
{
	if(this->_photo == photo)
		return;

	this->_photo = photo;
	emit photoChanged();
}

TLInt Chat::participantsCount() const
{
	return this->_participants_count;
}

void Chat::setParticipantsCount(TLInt participants_count) 
{
	if(this->_participants_count == participants_count)
		return;

	this->_participants_count = participants_count;
	emit participantsCountChanged();
}

TLInt Chat::date() const
{
	return this->_date;
}

void Chat::setDate(TLInt date) 
{
	if(this->_date == date)
		return;

	this->_date = date;
	emit dateChanged();
}

TLInt Chat::version() const
{
	return this->_version;
}

void Chat::setVersion(TLInt version) 
{
	if(this->_version == version)
		return;

	this->_version = version;
	emit versionChanged();
}

InputChannel* Chat::migratedTo() const
{
	return this->_migrated_to;
}

void Chat::setMigratedTo(InputChannel* migrated_to) 
{
	if(this->_migrated_to == migrated_to)
		return;

	this->_migrated_to = migrated_to;
	emit migratedToChanged();
}

TLTrue Chat::isEditor() const
{
	return this->_is_editor;
}

void Chat::setIsEditor(TLTrue is_editor) 
{
	if(this->_is_editor == is_editor)
		return;

	this->_is_editor = is_editor;
	emit isEditorChanged();
}

TLTrue Chat::isModerator() const
{
	return this->_is_moderator;
}

void Chat::setIsModerator(TLTrue is_moderator) 
{
	if(this->_is_moderator == is_moderator)
		return;

	this->_is_moderator = is_moderator;
	emit isModeratorChanged();
}

TLTrue Chat::isBroadcast() const
{
	return this->_is_broadcast;
}

void Chat::setIsBroadcast(TLTrue is_broadcast) 
{
	if(this->_is_broadcast == is_broadcast)
		return;

	this->_is_broadcast = is_broadcast;
	emit isBroadcastChanged();
}

TLTrue Chat::isVerified() const
{
	return this->_is_verified;
}

void Chat::setIsVerified(TLTrue is_verified) 
{
	if(this->_is_verified == is_verified)
		return;

	this->_is_verified = is_verified;
	emit isVerifiedChanged();
}

TLTrue Chat::isMegagroup() const
{
	return this->_is_megagroup;
}

void Chat::setIsMegagroup(TLTrue is_megagroup) 
{
	if(this->_is_megagroup == is_megagroup)
		return;

	this->_is_megagroup = is_megagroup;
	emit isMegagroupChanged();
}

TLTrue Chat::isRestricted() const
{
	return this->_is_restricted;
}

void Chat::setIsRestricted(TLTrue is_restricted) 
{
	if(this->_is_restricted == is_restricted)
		return;

	this->_is_restricted = is_restricted;
	emit isRestrictedChanged();
}

TLTrue Chat::isDemocracy() const
{
	return this->_is_democracy;
}

void Chat::setIsDemocracy(TLTrue is_democracy) 
{
	if(this->_is_democracy == is_democracy)
		return;

	this->_is_democracy = is_democracy;
	emit isDemocracyChanged();
}

TLTrue Chat::isSignatures() const
{
	return this->_is_signatures;
}

void Chat::setIsSignatures(TLTrue is_signatures) 
{
	if(this->_is_signatures == is_signatures)
		return;

	this->_is_signatures = is_signatures;
	emit isSignaturesChanged();
}

TLTrue Chat::isMin() const
{
	return this->_is_min;
}

void Chat::setIsMin(TLTrue is_min) 
{
	if(this->_is_min == is_min)
		return;

	this->_is_min = is_min;
	emit isMinChanged();
}

TLLong Chat::accessHash() const
{
	return this->_access_hash;
}

void Chat::setAccessHash(TLLong access_hash) 
{
	if(this->_access_hash == access_hash)
		return;

	this->_access_hash = access_hash;
	emit accessHashChanged();
}

TLString Chat::username() const
{
	return this->_username;
}

void Chat::setUsername(TLString username) 
{
	if(this->_username == username)
		return;

	this->_username = username;
	emit usernameChanged();
}

TLString Chat::restrictionReason() const
{
	return this->_restriction_reason;
}

void Chat::setRestrictionReason(TLString restriction_reason) 
{
	if(this->_restriction_reason == restriction_reason)
		return;

	this->_restriction_reason = restriction_reason;
	emit restrictionReasonChanged();
}

