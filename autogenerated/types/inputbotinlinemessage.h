#ifndef INPUTBOTINLINEMESSAGE_H
#define INPUTBOTINLINEMESSAGE_H

// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "replymarkup.h"
#include "../../types/basic.h"
#include "../../types/telegramobject.h"
#include "messageentity.h"
#include "inputgeopoint.h"

class InputBotInlineMessage: public TelegramObject
{
	Q_OBJECT

	Q_PROPERTY(TLInt flags READ flags WRITE setFlags NOTIFY flagsChanged)
	Q_PROPERTY(TLString caption READ caption WRITE setCaption NOTIFY captionChanged)
	Q_PROPERTY(ReplyMarkup* replyMarkup READ replyMarkup WRITE setReplyMarkup NOTIFY replyMarkupChanged)
	Q_PROPERTY(TLTrue isNoWebpage READ isNoWebpage WRITE setIsNoWebpage NOTIFY isNoWebpageChanged)
	Q_PROPERTY(TLString message READ message WRITE setMessage NOTIFY messageChanged)
	Q_PROPERTY(TLVector<MessageEntity*> entities READ entities WRITE setEntities NOTIFY entitiesChanged)
	Q_PROPERTY(InputGeoPoint* geoPoint READ geoPoint WRITE setGeoPoint NOTIFY geoPointChanged)
	Q_PROPERTY(TLString title READ title WRITE setTitle NOTIFY titleChanged)
	Q_PROPERTY(TLString address READ address WRITE setAddress NOTIFY addressChanged)
	Q_PROPERTY(TLString provider READ provider WRITE setProvider NOTIFY providerChanged)
	Q_PROPERTY(TLString venueId READ venueId WRITE setVenueId NOTIFY venueIdChanged)
	Q_PROPERTY(TLString phoneNumber READ phoneNumber WRITE setPhoneNumber NOTIFY phoneNumberChanged)
	Q_PROPERTY(TLString firstName READ firstName WRITE setFirstName NOTIFY firstNameChanged)
	Q_PROPERTY(TLString lastName READ lastName WRITE setLastName NOTIFY lastNameChanged)

	Q_ENUMS(Constructors)

	public:
		enum Constructors {
			CtorInputBotInlineMessageMediaAuto = 0x292fed13,
			CtorInputBotInlineMessageText = 0x3dcd7a87,
			CtorInputBotInlineMessageMediaGeo = 0xf4a59de1,
			CtorInputBotInlineMessageMediaVenue = 0xaaafadc8,
			CtorInputBotInlineMessageMediaContact = 0x2daf01a7,
			CtorInputBotInlineMessageGame = 0x4b425864,
		};

	public:
		explicit InputBotInlineMessage(QObject* parent = 0);
		virtual void read(MTProtoStream* mtstream);
		virtual void write(MTProtoStream* mtstream);
	protected:
		virtual void compileFlags();
	public:
		TLInt flags() const;
		void setFlags(TLInt flags);
		TLString caption() const;
		void setCaption(TLString caption);
		ReplyMarkup* replyMarkup() const;
		void setReplyMarkup(ReplyMarkup* reply_markup);
		TLTrue isNoWebpage() const;
		void setIsNoWebpage(TLTrue is_no_webpage);
		TLString message() const;
		void setMessage(TLString message);
		const TLVector<MessageEntity*>& entities() const;
		void setEntities(const TLVector<MessageEntity*>& entities);
		InputGeoPoint* geoPoint() const;
		void setGeoPoint(InputGeoPoint* geo_point);
		TLString title() const;
		void setTitle(TLString title);
		TLString address() const;
		void setAddress(TLString address);
		TLString provider() const;
		void setProvider(TLString provider);
		TLString venueId() const;
		void setVenueId(TLString venue_id);
		TLString phoneNumber() const;
		void setPhoneNumber(TLString phone_number);
		TLString firstName() const;
		void setFirstName(TLString first_name);
		TLString lastName() const;
		void setLastName(TLString last_name);

	signals:
		void flagsChanged();
		void captionChanged();
		void replyMarkupChanged();
		void isNoWebpageChanged();
		void messageChanged();
		void entitiesChanged();
		void geoPointChanged();
		void titleChanged();
		void addressChanged();
		void providerChanged();
		void venueIdChanged();
		void phoneNumberChanged();
		void firstNameChanged();
		void lastNameChanged();

	private:
		TLInt _flags;
		TLString _caption;
		ReplyMarkup* _reply_markup;
		TLTrue _is_no_webpage;
		TLString _message;
		TLVector<MessageEntity*> _entities;
		InputGeoPoint* _geo_point;
		TLString _title;
		TLString _address;
		TLString _provider;
		TLString _venue_id;
		TLString _phone_number;
		TLString _first_name;
		TLString _last_name;

};

#endif // INPUTBOTINLINEMESSAGE_H
