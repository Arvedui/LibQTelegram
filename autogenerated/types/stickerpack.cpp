// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "stickerpack.h"


StickerPack::StickerPack(QObject* parent) : TelegramObject(parent)
{
	this->_constructorid = StickerPack::CtorStickerPack;
}

void StickerPack::read(MTProtoStream* mtstream) 
{
	this->_constructorid = mtstream->readTLConstructor();
	
	Q_ASSERT((this->_constructorid == StickerPack::CtorStickerPack));
	
	if(this->_constructorid == StickerPack::CtorStickerPack)
	{
		this->_emoticon = mtstream->readTLString();
		mtstream->readTLVector<TLLong>(this->_documents, false);
	}
}

void StickerPack::write(MTProtoStream* mtstream) 
{
	Q_ASSERT((this->_constructorid == StickerPack::CtorStickerPack));
	
	this->compileFlags();
	mtstream->writeTLConstructor(this->_constructorid);
	
	if(this->_constructorid == StickerPack::CtorStickerPack)
	{
		mtstream->writeTLString(this->_emoticon);
		mtstream->writeTLVector(this->_documents, false);
	}
}

void StickerPack::compileFlags() 
{
	
}

TLString StickerPack::emoticon() const
{
	return this->_emoticon;
}

void StickerPack::setEmoticon(TLString emoticon) 
{
	if(this->_emoticon == emoticon)
		return;

	this->_emoticon = emoticon;
	emit emoticonChanged();
}

const TLVector<TLLong>& StickerPack::documents() const
{
	return this->_documents;
}

void StickerPack::setDocuments(const TLVector<TLLong>& documents) 
{
	if(this->_documents == documents)
		return;

	this->_documents = documents;
	emit documentsChanged();
}

