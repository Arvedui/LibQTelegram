#ifndef STICKERSET_H
#define STICKERSET_H

// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "../../types/basic.h"
#include "../../types/telegramobject.h"

class StickerSet: public TelegramObject
{
	Q_OBJECT

	Q_PROPERTY(TLInt flags READ flags WRITE setFlags NOTIFY flagsChanged)
	Q_PROPERTY(TLTrue isInstalled READ isInstalled WRITE setIsInstalled NOTIFY isInstalledChanged)
	Q_PROPERTY(TLTrue isArchived READ isArchived WRITE setIsArchived NOTIFY isArchivedChanged)
	Q_PROPERTY(TLTrue isOfficial READ isOfficial WRITE setIsOfficial NOTIFY isOfficialChanged)
	Q_PROPERTY(TLTrue isMasks READ isMasks WRITE setIsMasks NOTIFY isMasksChanged)
	Q_PROPERTY(TLLong id READ id WRITE setId NOTIFY idChanged)
	Q_PROPERTY(TLLong accessHash READ accessHash WRITE setAccessHash NOTIFY accessHashChanged)
	Q_PROPERTY(TLString title READ title WRITE setTitle NOTIFY titleChanged)
	Q_PROPERTY(TLString shortName READ shortName WRITE setShortName NOTIFY shortNameChanged)
	Q_PROPERTY(TLInt count READ count WRITE setCount NOTIFY countChanged)
	Q_PROPERTY(TLInt hash READ hash WRITE setHash NOTIFY hashChanged)

	public:
		enum Constructors {
			ctorStickerSet = 0xcd303b41,
		};

	public:
		explicit StickerSet(QObject* parent = 0);
		virtual void read(MTProtoStream* mtstream);
		virtual void write(MTProtoStream* mtstream);
	protected:
		virtual void compileFlags();
	public:
		TLInt flags() const;
		void setFlags(TLInt flags);
		TLTrue isInstalled() const;
		void setIsInstalled(TLTrue is_installed);
		TLTrue isArchived() const;
		void setIsArchived(TLTrue is_archived);
		TLTrue isOfficial() const;
		void setIsOfficial(TLTrue is_official);
		TLTrue isMasks() const;
		void setIsMasks(TLTrue is_masks);
		TLLong id() const;
		void setId(TLLong id);
		TLLong accessHash() const;
		void setAccessHash(TLLong access_hash);
		TLString title() const;
		void setTitle(TLString title);
		TLString shortName() const;
		void setShortName(TLString short_name);
		TLInt count() const;
		void setCount(TLInt count);
		TLInt hash() const;
		void setHash(TLInt hash);

	signals:
		void flagsChanged();
		void isInstalledChanged();
		void isArchivedChanged();
		void isOfficialChanged();
		void isMasksChanged();
		void idChanged();
		void accessHashChanged();
		void titleChanged();
		void shortNameChanged();
		void countChanged();
		void hashChanged();

	private:
		TLInt _flags;
		TLTrue _is_installed;
		TLTrue _is_archived;
		TLTrue _is_official;
		TLTrue _is_masks;
		TLLong _id;
		TLLong _access_hash;
		TLString _title;
		TLString _short_name;
		TLInt _count;
		TLInt _hash;

};

#endif // STICKERSET_H
