// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "document.h"


Document::Document(QObject* parent) : TelegramObject(parent)
{
	this->_id = 0;
	this->_access_hash = 0;
	this->_date = 0;
	this->_size = 0;
	this->_thumb = NULL;
	this->_dc_id = 0;
	this->_version = 0;
}

void Document::read(MTProtoStream* mtstream) 
{
	this->_constructorid = mtstream->readTLConstructor();
	
	Q_ASSERT((this->_constructorid == Document::CtorDocumentEmpty) ||
		 (this->_constructorid == Document::CtorDocument));
	
	if(this->_constructorid == Document::CtorDocumentEmpty)
		this->_id = mtstream->readTLLong();
	else if(this->_constructorid == Document::CtorDocument)
	{
		this->_id = mtstream->readTLLong();
		this->_access_hash = mtstream->readTLLong();
		this->_date = mtstream->readTLInt();
		this->_mime_type = mtstream->readTLString();
		this->_size = mtstream->readTLInt();
		TLInt thumb_ctor = mtstream->peekTLConstructor();
		
		if(thumb_ctor != TLTypes::Null)
		{
			this->resetTLType<PhotoSize>(&this->_thumb);
			this->_thumb->read(mtstream);
		}
		else
		{
			this->nullTLType<PhotoSize>(&this->_thumb);
			mtstream->readTLConstructor(); // Skip Null
		}
		
		this->_dc_id = mtstream->readTLInt();
		this->_version = mtstream->readTLInt();
		mtstream->readTLVector<DocumentAttribute>(this->_attributes, false, this);
	}
}

void Document::write(MTProtoStream* mtstream) 
{
	Q_ASSERT((this->_constructorid == Document::CtorDocumentEmpty) ||
		 (this->_constructorid == Document::CtorDocument));
	
	this->compileFlags();
	mtstream->writeTLConstructor(this->_constructorid);
	
	if(this->_constructorid == Document::CtorDocumentEmpty)
		mtstream->writeTLLong(this->_id);
	else if(this->_constructorid == Document::CtorDocument)
	{
		mtstream->writeTLLong(this->_id);
		mtstream->writeTLLong(this->_access_hash);
		mtstream->writeTLInt(this->_date);
		mtstream->writeTLString(this->_mime_type);
		mtstream->writeTLInt(this->_size);
		if(this->_thumb != NULL)
			this->_thumb->write(mtstream);
		else
			mtstream->writeTLConstructor(TLTypes::Null);
		
		mtstream->writeTLInt(this->_dc_id);
		mtstream->writeTLInt(this->_version);
		mtstream->writeTLVector(this->_attributes, false);
	}
}

void Document::compileFlags() 
{
	
}

TLLong Document::id() const
{
	return this->_id;
}

void Document::setId(TLLong id) 
{
	if(this->_id == id)
		return;

	this->_id = id;
	emit idChanged();
}

TLLong Document::accessHash() const
{
	return this->_access_hash;
}

void Document::setAccessHash(TLLong access_hash) 
{
	if(this->_access_hash == access_hash)
		return;

	this->_access_hash = access_hash;
	emit accessHashChanged();
}

TLInt Document::date() const
{
	return this->_date;
}

void Document::setDate(TLInt date) 
{
	if(this->_date == date)
		return;

	this->_date = date;
	emit dateChanged();
}

TLString Document::mimeType() const
{
	return this->_mime_type;
}

void Document::setMimeType(TLString mime_type) 
{
	if(this->_mime_type == mime_type)
		return;

	this->_mime_type = mime_type;
	emit mimeTypeChanged();
}

TLInt Document::size() const
{
	return this->_size;
}

void Document::setSize(TLInt size) 
{
	if(this->_size == size)
		return;

	this->_size = size;
	emit sizeChanged();
}

PhotoSize* Document::thumb() const
{
	return this->_thumb;
}

void Document::setThumb(PhotoSize* thumb) 
{
	if(this->_thumb == thumb)
		return;

	this->deleteChild(this->_thumb);
	this->_thumb = thumb;

	if(this->_thumb)
		this->_thumb->setParent(this);

	emit thumbChanged();
}

TLInt Document::dcId() const
{
	return this->_dc_id;
}

void Document::setDcId(TLInt dc_id) 
{
	if(this->_dc_id == dc_id)
		return;

	this->_dc_id = dc_id;
	emit dcIdChanged();
}

TLInt Document::version() const
{
	return this->_version;
}

void Document::setVersion(TLInt version) 
{
	if(this->_version == version)
		return;

	this->_version = version;
	emit versionChanged();
}

const TLVector<DocumentAttribute*>& Document::attributes() const
{
	return this->_attributes;
}

void Document::setAttributes(const TLVector<DocumentAttribute*>& attributes) 
{
	if(this->_attributes == attributes)
		return;

	this->_attributes = attributes;
	emit attributesChanged();
}

