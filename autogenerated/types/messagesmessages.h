#ifndef MESSAGESMESSAGES_H
#define MESSAGESMESSAGES_H

// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "../../types/basic.h"
#include "../../types/telegramobject.h"
#include "message.h"
#include "chat.h"
#include "user.h"

class MessagesMessages: public TelegramObject
{
	Q_OBJECT

	Q_PROPERTY(TLVector<Message*> messages READ messages WRITE setMessages NOTIFY messagesChanged)
	Q_PROPERTY(TLVector<Chat*> chats READ chats WRITE setChats NOTIFY chatsChanged)
	Q_PROPERTY(TLVector<User*> users READ users WRITE setUsers NOTIFY usersChanged)
	Q_PROPERTY(TLInt count READ count WRITE setCount NOTIFY countChanged)
	Q_PROPERTY(TLInt flags READ flags WRITE setFlags NOTIFY flagsChanged)
	Q_PROPERTY(TLInt pts READ pts WRITE setPts NOTIFY ptsChanged)

	Q_ENUMS(Constructors)

	public:
		enum Constructors {
			CtorMessagesMessages = 0x8c718e87,
			CtorMessagesMessagesSlice = 0xb446ae3,
			CtorMessagesChannelMessages = 0x99262e37,
		};

	public:
		explicit MessagesMessages(QObject* parent = 0);
		virtual void read(MTProtoStream* mtstream);
		virtual void write(MTProtoStream* mtstream);
	protected:
		virtual void compileFlags();
	public:
		const TLVector<Message*>& messages() const;
		void setMessages(const TLVector<Message*>& messages);
		const TLVector<Chat*>& chats() const;
		void setChats(const TLVector<Chat*>& chats);
		const TLVector<User*>& users() const;
		void setUsers(const TLVector<User*>& users);
		TLInt count() const;
		void setCount(TLInt count);
		TLInt flags() const;
		void setFlags(TLInt flags);
		TLInt pts() const;
		void setPts(TLInt pts);

	signals:
		void messagesChanged();
		void chatsChanged();
		void usersChanged();
		void countChanged();
		void flagsChanged();
		void ptsChanged();

	private:
		TLVector<Message*> _messages;
		TLVector<Chat*> _chats;
		TLVector<User*> _users;
		TLInt _count;
		TLInt _flags;
		TLInt _pts;

};

#endif // MESSAGESMESSAGES_H
