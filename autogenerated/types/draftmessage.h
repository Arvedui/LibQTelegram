#ifndef DRAFTMESSAGE_H
#define DRAFTMESSAGE_H

// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "../../types/basic.h"
#include "messageentity.h"
#include "../../types/telegramobject.h"

class DraftMessage: public TelegramObject
{
	Q_OBJECT

	Q_PROPERTY(TLInt flags READ flags WRITE setFlags NOTIFY flagsChanged)
	Q_PROPERTY(TLTrue isNoWebpage READ isNoWebpage WRITE setIsNoWebpage NOTIFY isNoWebpageChanged)
	Q_PROPERTY(TLInt replyToMsgId READ replyToMsgId WRITE setReplyToMsgId NOTIFY replyToMsgIdChanged)
	Q_PROPERTY(TLString message READ message WRITE setMessage NOTIFY messageChanged)
	Q_PROPERTY(TLVector<MessageEntity*> entities READ entities WRITE setEntities NOTIFY entitiesChanged)
	Q_PROPERTY(TLInt date READ date WRITE setDate NOTIFY dateChanged)

	public:
		enum Constructors {
			ctorDraftMessageEmpty = 0xba4baec5,
			ctorDraftMessage = 0xfd8e711f,
		};

	public:
		explicit DraftMessage(QObject* parent = 0);
		virtual void read(MTProtoStream* mtstream);
		virtual void write(MTProtoStream* mtstream);
	protected:
		virtual void compileFlags();
	public:
		TLInt flags() const;
		void setFlags(TLInt flags);
		TLTrue isNoWebpage() const;
		void setIsNoWebpage(TLTrue is_no_webpage);
		TLInt replyToMsgId() const;
		void setReplyToMsgId(TLInt reply_to_msg_id);
		TLString message() const;
		void setMessage(TLString message);
		const TLVector<MessageEntity*>& entities() const;
		void setEntities(const TLVector<MessageEntity*>& entities);
		TLInt date() const;
		void setDate(TLInt date);

	signals:
		void flagsChanged();
		void isNoWebpageChanged();
		void replyToMsgIdChanged();
		void messageChanged();
		void entitiesChanged();
		void dateChanged();

	private:
		TLInt _flags;
		TLTrue _is_no_webpage;
		TLInt _reply_to_msg_id;
		TLString _message;
		TLVector<MessageEntity*> _entities;
		TLInt _date;

};

#endif // DRAFTMESSAGE_H
