// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "message.h"


Message::Message(QObject* parent) : TelegramObject(parent)
{
	this->_id = 0;
	this->_flags = 0;
	this->_is_out = false;
	this->_is_mentioned = false;
	this->_is_media_unread = false;
	this->_is_silent = false;
	this->_is_post = false;
	this->_from_id = 0;
	this->_to_id = NULL;
	this->_fwd_from = NULL;
	this->_via_bot_id = 0;
	this->_reply_to_msg_id = 0;
	this->_date = 0;
	this->_media = NULL;
	this->_reply_markup = NULL;
	this->_views = 0;
	this->_edit_date = 0;
	this->_action = NULL;
}

void Message::read(MTProtoStream* mtstream) 
{
	this->_constructorid = mtstream->readTLConstructor();
	
	Q_ASSERT((this->_constructorid == Message::CtorMessageEmpty) ||
		 (this->_constructorid == Message::CtorMessage) ||
		 (this->_constructorid == Message::CtorMessageService));
	
	if(this->_constructorid == Message::CtorMessageEmpty)
		this->_id = mtstream->readTLInt();
	else if(this->_constructorid == Message::CtorMessage)
	{
		this->_flags = mtstream->readTLInt();
		this->_is_out = IS_FLAG_SET(this->_flags, 1);
		this->_is_mentioned = IS_FLAG_SET(this->_flags, 4);
		this->_is_media_unread = IS_FLAG_SET(this->_flags, 5);
		this->_is_silent = IS_FLAG_SET(this->_flags, 13);
		this->_is_post = IS_FLAG_SET(this->_flags, 14);
		this->_id = mtstream->readTLInt();
		if(IS_FLAG_SET(this->_flags, 8))
			this->_from_id = mtstream->readTLInt();
		
		TLInt to_id_ctor = mtstream->peekTLConstructor();
		
		if(to_id_ctor != TLTypes::Null)
		{
			RESET_TLTYPE(Peer, this->_to_id);
			this->_to_id->read(mtstream);
		}
		else
		{
			NULL_TLTYPE(this->_to_id);
			mtstream->readTLConstructor(); // Skip Null
		}
		
		if(IS_FLAG_SET(this->_flags, 2))
		{
			TLInt fwd_from_ctor = mtstream->peekTLConstructor();
			
			if(fwd_from_ctor != TLTypes::Null)
			{
				RESET_TLTYPE(MessageFwdHeader, this->_fwd_from);
				this->_fwd_from->read(mtstream);
			}
			else
			{
				NULL_TLTYPE(this->_fwd_from);
				mtstream->readTLConstructor(); // Skip Null
			}
		}
		
		if(IS_FLAG_SET(this->_flags, 11))
			this->_via_bot_id = mtstream->readTLInt();
		
		if(IS_FLAG_SET(this->_flags, 3))
			this->_reply_to_msg_id = mtstream->readTLInt();
		
		this->_date = mtstream->readTLInt();
		this->_message = mtstream->readTLString();
		if(IS_FLAG_SET(this->_flags, 9))
		{
			TLInt media_ctor = mtstream->peekTLConstructor();
			
			if(media_ctor != TLTypes::Null)
			{
				RESET_TLTYPE(MessageMedia, this->_media);
				this->_media->read(mtstream);
			}
			else
			{
				NULL_TLTYPE(this->_media);
				mtstream->readTLConstructor(); // Skip Null
			}
		}
		
		if(IS_FLAG_SET(this->_flags, 6))
		{
			TLInt reply_markup_ctor = mtstream->peekTLConstructor();
			
			if(reply_markup_ctor != TLTypes::Null)
			{
				RESET_TLTYPE(ReplyMarkup, this->_reply_markup);
				this->_reply_markup->read(mtstream);
			}
			else
			{
				NULL_TLTYPE(this->_reply_markup);
				mtstream->readTLConstructor(); // Skip Null
			}
		}
		
		if(IS_FLAG_SET(this->_flags, 7))
			mtstream->readTLVector<MessageEntity>(this->_entities, false);
		
		if(IS_FLAG_SET(this->_flags, 10))
			this->_views = mtstream->readTLInt();
		
		if(IS_FLAG_SET(this->_flags, 15))
			this->_edit_date = mtstream->readTLInt();
	}
	else if(this->_constructorid == Message::CtorMessageService)
	{
		this->_flags = mtstream->readTLInt();
		this->_is_out = IS_FLAG_SET(this->_flags, 1);
		this->_is_mentioned = IS_FLAG_SET(this->_flags, 4);
		this->_is_media_unread = IS_FLAG_SET(this->_flags, 5);
		this->_is_silent = IS_FLAG_SET(this->_flags, 13);
		this->_is_post = IS_FLAG_SET(this->_flags, 14);
		this->_id = mtstream->readTLInt();
		if(IS_FLAG_SET(this->_flags, 8))
			this->_from_id = mtstream->readTLInt();
		
		TLInt to_id_ctor = mtstream->peekTLConstructor();
		
		if(to_id_ctor != TLTypes::Null)
		{
			RESET_TLTYPE(Peer, this->_to_id);
			this->_to_id->read(mtstream);
		}
		else
		{
			NULL_TLTYPE(this->_to_id);
			mtstream->readTLConstructor(); // Skip Null
		}
		
		if(IS_FLAG_SET(this->_flags, 3))
			this->_reply_to_msg_id = mtstream->readTLInt();
		
		this->_date = mtstream->readTLInt();
		TLInt action_ctor = mtstream->peekTLConstructor();
		
		if(action_ctor != TLTypes::Null)
		{
			RESET_TLTYPE(MessageAction, this->_action);
			this->_action->read(mtstream);
		}
		else
		{
			NULL_TLTYPE(this->_action);
			mtstream->readTLConstructor(); // Skip Null
		}
	}
}

void Message::write(MTProtoStream* mtstream) 
{
	Q_ASSERT((this->_constructorid == Message::CtorMessageEmpty) ||
		 (this->_constructorid == Message::CtorMessage) ||
		 (this->_constructorid == Message::CtorMessageService));
	
	this->compileFlags();
	mtstream->writeTLConstructor(this->_constructorid);
	
	if(this->_constructorid == Message::CtorMessageEmpty)
		mtstream->writeTLInt(this->_id);
	else if(this->_constructorid == Message::CtorMessage)
	{
		mtstream->writeTLInt(this->_flags);
		mtstream->writeTLInt(this->_id);
		if(IS_FLAG_SET(this->_flags, 8))
			mtstream->writeTLInt(this->_from_id);
		
		if(this->_to_id != NULL)
			this->_to_id->write(mtstream);
		else
			mtstream->writeTLConstructor(TLTypes::Null);
		
		if(IS_FLAG_SET(this->_flags, 2))
		{
			if(this->_fwd_from != NULL)
				this->_fwd_from->write(mtstream);
			else
				mtstream->writeTLConstructor(TLTypes::Null);
		}
		
		if(IS_FLAG_SET(this->_flags, 11))
			mtstream->writeTLInt(this->_via_bot_id);
		
		if(IS_FLAG_SET(this->_flags, 3))
			mtstream->writeTLInt(this->_reply_to_msg_id);
		
		mtstream->writeTLInt(this->_date);
		mtstream->writeTLString(this->_message);
		if(IS_FLAG_SET(this->_flags, 9))
		{
			if(this->_media != NULL)
				this->_media->write(mtstream);
			else
				mtstream->writeTLConstructor(TLTypes::Null);
		}
		
		if(IS_FLAG_SET(this->_flags, 6))
		{
			if(this->_reply_markup != NULL)
				this->_reply_markup->write(mtstream);
			else
				mtstream->writeTLConstructor(TLTypes::Null);
		}
		
		if(IS_FLAG_SET(this->_flags, 7))
			mtstream->writeTLVector(this->_entities, false);
		
		if(IS_FLAG_SET(this->_flags, 10))
			mtstream->writeTLInt(this->_views);
		
		if(IS_FLAG_SET(this->_flags, 15))
			mtstream->writeTLInt(this->_edit_date);
	}
	else if(this->_constructorid == Message::CtorMessageService)
	{
		mtstream->writeTLInt(this->_flags);
		mtstream->writeTLInt(this->_id);
		if(IS_FLAG_SET(this->_flags, 8))
			mtstream->writeTLInt(this->_from_id);
		
		if(this->_to_id != NULL)
			this->_to_id->write(mtstream);
		else
			mtstream->writeTLConstructor(TLTypes::Null);
		
		if(IS_FLAG_SET(this->_flags, 3))
			mtstream->writeTLInt(this->_reply_to_msg_id);
		
		mtstream->writeTLInt(this->_date);
		if(this->_action != NULL)
			this->_action->write(mtstream);
		else
			mtstream->writeTLConstructor(TLTypes::Null);
	}
}

void Message::compileFlags() 
{
	this->_flags = 0;
	
	if(this->_constructorid == Message::CtorMessage)
	{
		if(this->_is_out)
			SET_FLAG_BIT(this->_flags, 1);
		if(this->_is_mentioned)
			SET_FLAG_BIT(this->_flags, 4);
		if(this->_is_media_unread)
			SET_FLAG_BIT(this->_flags, 5);
		if(this->_is_silent)
			SET_FLAG_BIT(this->_flags, 13);
		if(this->_is_post)
			SET_FLAG_BIT(this->_flags, 14);
		if(this->_from_id)
			SET_FLAG_BIT(this->_flags, 8);
		if(this->_fwd_from)
			SET_FLAG_BIT(this->_flags, 2);
		if(this->_via_bot_id)
			SET_FLAG_BIT(this->_flags, 11);
		if(this->_reply_to_msg_id)
			SET_FLAG_BIT(this->_flags, 3);
		if(this->_media)
			SET_FLAG_BIT(this->_flags, 9);
		if(this->_reply_markup)
			SET_FLAG_BIT(this->_flags, 6);
		if(!this->_entities.isEmpty())
			SET_FLAG_BIT(this->_flags, 7);
		if(this->_views)
			SET_FLAG_BIT(this->_flags, 10);
		if(this->_edit_date)
			SET_FLAG_BIT(this->_flags, 15);
	}
	else if(this->_constructorid == Message::CtorMessageService)
	{
		if(this->_is_out)
			SET_FLAG_BIT(this->_flags, 1);
		if(this->_is_mentioned)
			SET_FLAG_BIT(this->_flags, 4);
		if(this->_is_media_unread)
			SET_FLAG_BIT(this->_flags, 5);
		if(this->_is_silent)
			SET_FLAG_BIT(this->_flags, 13);
		if(this->_is_post)
			SET_FLAG_BIT(this->_flags, 14);
		if(this->_from_id)
			SET_FLAG_BIT(this->_flags, 8);
		if(this->_reply_to_msg_id)
			SET_FLAG_BIT(this->_flags, 3);
	}
}

TLInt Message::id() const
{
	return this->_id;
}

void Message::setId(TLInt id) 
{
	if(this->_id == id)
		return;

	this->_id = id;
	emit idChanged();
}

TLInt Message::flags() const
{
	return this->_flags;
}

void Message::setFlags(TLInt flags) 
{
	if(this->_flags == flags)
		return;

	this->_flags = flags;
	emit flagsChanged();
}

TLTrue Message::isOut() const
{
	return this->_is_out;
}

void Message::setIsOut(TLTrue is_out) 
{
	if(this->_is_out == is_out)
		return;

	this->_is_out = is_out;
	emit isOutChanged();
}

TLTrue Message::isMentioned() const
{
	return this->_is_mentioned;
}

void Message::setIsMentioned(TLTrue is_mentioned) 
{
	if(this->_is_mentioned == is_mentioned)
		return;

	this->_is_mentioned = is_mentioned;
	emit isMentionedChanged();
}

TLTrue Message::isMediaUnread() const
{
	return this->_is_media_unread;
}

void Message::setIsMediaUnread(TLTrue is_media_unread) 
{
	if(this->_is_media_unread == is_media_unread)
		return;

	this->_is_media_unread = is_media_unread;
	emit isMediaUnreadChanged();
}

TLTrue Message::isSilent() const
{
	return this->_is_silent;
}

void Message::setIsSilent(TLTrue is_silent) 
{
	if(this->_is_silent == is_silent)
		return;

	this->_is_silent = is_silent;
	emit isSilentChanged();
}

TLTrue Message::isPost() const
{
	return this->_is_post;
}

void Message::setIsPost(TLTrue is_post) 
{
	if(this->_is_post == is_post)
		return;

	this->_is_post = is_post;
	emit isPostChanged();
}

TLInt Message::fromId() const
{
	return this->_from_id;
}

void Message::setFromId(TLInt from_id) 
{
	if(this->_from_id == from_id)
		return;

	this->_from_id = from_id;
	emit fromIdChanged();
}

Peer* Message::toId() const
{
	return this->_to_id;
}

void Message::setToId(Peer* to_id) 
{
	if(this->_to_id == to_id)
		return;

	this->_to_id = to_id;
	emit toIdChanged();
}

MessageFwdHeader* Message::fwdFrom() const
{
	return this->_fwd_from;
}

void Message::setFwdFrom(MessageFwdHeader* fwd_from) 
{
	if(this->_fwd_from == fwd_from)
		return;

	this->_fwd_from = fwd_from;
	emit fwdFromChanged();
}

TLInt Message::viaBotId() const
{
	return this->_via_bot_id;
}

void Message::setViaBotId(TLInt via_bot_id) 
{
	if(this->_via_bot_id == via_bot_id)
		return;

	this->_via_bot_id = via_bot_id;
	emit viaBotIdChanged();
}

TLInt Message::replyToMsgId() const
{
	return this->_reply_to_msg_id;
}

void Message::setReplyToMsgId(TLInt reply_to_msg_id) 
{
	if(this->_reply_to_msg_id == reply_to_msg_id)
		return;

	this->_reply_to_msg_id = reply_to_msg_id;
	emit replyToMsgIdChanged();
}

TLInt Message::date() const
{
	return this->_date;
}

void Message::setDate(TLInt date) 
{
	if(this->_date == date)
		return;

	this->_date = date;
	emit dateChanged();
}

TLString Message::message() const
{
	return this->_message;
}

void Message::setMessage(TLString message) 
{
	if(this->_message == message)
		return;

	this->_message = message;
	emit messageChanged();
}

MessageMedia* Message::media() const
{
	return this->_media;
}

void Message::setMedia(MessageMedia* media) 
{
	if(this->_media == media)
		return;

	this->_media = media;
	emit mediaChanged();
}

ReplyMarkup* Message::replyMarkup() const
{
	return this->_reply_markup;
}

void Message::setReplyMarkup(ReplyMarkup* reply_markup) 
{
	if(this->_reply_markup == reply_markup)
		return;

	this->_reply_markup = reply_markup;
	emit replyMarkupChanged();
}

const TLVector<MessageEntity*>& Message::entities() const
{
	return this->_entities;
}

void Message::setEntities(const TLVector<MessageEntity*>& entities) 
{
	if(this->_entities == entities)
		return;

	this->_entities = entities;
	emit entitiesChanged();
}

TLInt Message::views() const
{
	return this->_views;
}

void Message::setViews(TLInt views) 
{
	if(this->_views == views)
		return;

	this->_views = views;
	emit viewsChanged();
}

TLInt Message::editDate() const
{
	return this->_edit_date;
}

void Message::setEditDate(TLInt edit_date) 
{
	if(this->_edit_date == edit_date)
		return;

	this->_edit_date = edit_date;
	emit editDateChanged();
}

MessageAction* Message::action() const
{
	return this->_action;
}

void Message::setAction(MessageAction* action) 
{
	if(this->_action == action)
		return;

	this->_action = action;
	emit actionChanged();
}

