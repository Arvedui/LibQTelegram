// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "authsentcode.h"


AuthSentCode::AuthSentCode(QObject* parent) : TelegramObject(parent)
{
	this->_flags = 0;
	this->_is_phone_registered = false;
	this->_type = NULL;
	this->_next_type = NULL;
	this->_timeout = 0;
	this->_constructorid = AuthSentCode::ctorAuthSentCode;
}

void AuthSentCode::read(MTProtoStream* mtstream) 
{
	this->_constructorid = mtstream->readTLConstructor();
	
	Q_ASSERT((this->_constructorid == AuthSentCode::ctorAuthSentCode));
	
	if(this->_constructorid == AuthSentCode::ctorAuthSentCode)
	{
		this->_flags = mtstream->readTLInt();
		this->_is_phone_registered = IS_FLAG_SET(this->_flags, 0);
		RESET_TLTYPE(AuthSentCodeType, this->_type);
		this->_type->read(mtstream);
		this->_phone_code_hash = mtstream->readTLString();
		if(IS_FLAG_SET(this->_flags, 1))
		{
			RESET_TLTYPE(AuthCodeType, this->_next_type);
			this->_next_type->read(mtstream);
		}
		
		if(IS_FLAG_SET(this->_flags, 2))
			this->_timeout = mtstream->readTLInt();
	}
}

void AuthSentCode::write(MTProtoStream* mtstream) 
{
	Q_ASSERT((this->_constructorid == AuthSentCode::ctorAuthSentCode));
	
	this->compileFlags();
	mtstream->writeTLConstructor(this->_constructorid);
	
	if(this->_constructorid == AuthSentCode::ctorAuthSentCode)
	{
		mtstream->writeTLInt(this->_flags);
		Q_ASSERT(this->_type != NULL);
		this->_type->write(mtstream);
		mtstream->writeTLString(this->_phone_code_hash);
		if(IS_FLAG_SET(this->_flags, 1))
		{
			Q_ASSERT(this->_next_type != NULL);
			this->_next_type->write(mtstream);
		}
		
		if(IS_FLAG_SET(this->_flags, 2))
			mtstream->writeTLInt(this->_timeout);
	}
}

void AuthSentCode::compileFlags() 
{
	this->_flags = 0;
	
	if(this->_constructorid == AuthSentCode::ctorAuthSentCode)
	{
		if(this->_is_phone_registered)
			SET_FLAG_BIT(this->_flags, 0);
		if(this->_next_type)
			SET_FLAG_BIT(this->_flags, 1);
		if(this->_timeout)
			SET_FLAG_BIT(this->_flags, 2);
	}
}

TLInt AuthSentCode::flags() const
{
	return this->_flags;
}

void AuthSentCode::setFlags(TLInt flags) 
{
	if(this->_flags == flags)
		return;

	this->_flags = flags;
	emit flagsChanged();
}

TLTrue AuthSentCode::isPhoneRegistered() const
{
	return this->_is_phone_registered;
}

void AuthSentCode::setIsPhoneRegistered(TLTrue is_phone_registered) 
{
	if(this->_is_phone_registered == is_phone_registered)
		return;

	this->_is_phone_registered = is_phone_registered;
	emit isPhoneRegisteredChanged();
}

AuthSentCodeType* AuthSentCode::type() const
{
	return this->_type;
}

void AuthSentCode::setType(AuthSentCodeType* type) 
{
	if(this->_type == type)
		return;

	this->_type = type;
	emit typeChanged();
}

TLString AuthSentCode::phoneCodeHash() const
{
	return this->_phone_code_hash;
}

void AuthSentCode::setPhoneCodeHash(TLString phone_code_hash) 
{
	if(this->_phone_code_hash == phone_code_hash)
		return;

	this->_phone_code_hash = phone_code_hash;
	emit phoneCodeHashChanged();
}

AuthCodeType* AuthSentCode::nextType() const
{
	return this->_next_type;
}

void AuthSentCode::setNextType(AuthCodeType* next_type) 
{
	if(this->_next_type == next_type)
		return;

	this->_next_type = next_type;
	emit nextTypeChanged();
}

TLInt AuthSentCode::timeout() const
{
	return this->_timeout;
}

void AuthSentCode::setTimeout(TLInt timeout) 
{
	if(this->_timeout == timeout)
		return;

	this->_timeout = timeout;
	emit timeoutChanged();
}

