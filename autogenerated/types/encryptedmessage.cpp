// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "encryptedmessage.h"


EncryptedMessage::EncryptedMessage(QObject* parent) : TelegramObject(parent)
{
	this->_random_id = 0;
	this->_chat_id = 0;
	this->_date = 0;
	this->_file = NULL;
}

void EncryptedMessage::read(MTProtoStream* mtstream) 
{
	this->_constructorid = mtstream->readTLConstructor();
	
	Q_ASSERT((this->_constructorid == EncryptedMessage::ctorEncryptedMessage) ||
		 (this->_constructorid == EncryptedMessage::ctorEncryptedMessageService));
	
	if(this->_constructorid == EncryptedMessage::ctorEncryptedMessage)
	{
		this->_random_id = mtstream->readTLLong();
		this->_chat_id = mtstream->readTLInt();
		this->_date = mtstream->readTLInt();
		this->_bytes = mtstream->readTLBytes();
		RESET_TLTYPE(EncryptedFile, this->_file);
		this->_file->read(mtstream);
	}
	else if(this->_constructorid == EncryptedMessage::ctorEncryptedMessageService)
	{
		this->_random_id = mtstream->readTLLong();
		this->_chat_id = mtstream->readTLInt();
		this->_date = mtstream->readTLInt();
		this->_bytes = mtstream->readTLBytes();
	}
}

void EncryptedMessage::write(MTProtoStream* mtstream) 
{
	Q_ASSERT((this->_constructorid == EncryptedMessage::ctorEncryptedMessage) ||
		 (this->_constructorid == EncryptedMessage::ctorEncryptedMessageService));
	
	this->compileFlags();
	mtstream->writeTLConstructor(this->_constructorid);
	
	if(this->_constructorid == EncryptedMessage::ctorEncryptedMessage)
	{
		mtstream->writeTLLong(this->_random_id);
		mtstream->writeTLInt(this->_chat_id);
		mtstream->writeTLInt(this->_date);
		mtstream->writeTLBytes(this->_bytes);
		Q_ASSERT(this->_file != NULL);
		this->_file->write(mtstream);
	}
	else if(this->_constructorid == EncryptedMessage::ctorEncryptedMessageService)
	{
		mtstream->writeTLLong(this->_random_id);
		mtstream->writeTLInt(this->_chat_id);
		mtstream->writeTLInt(this->_date);
		mtstream->writeTLBytes(this->_bytes);
	}
}

void EncryptedMessage::compileFlags() 
{
	
}

TLLong EncryptedMessage::randomId() const
{
	return this->_random_id;
}

void EncryptedMessage::setRandomId(TLLong random_id) 
{
	if(this->_random_id == random_id)
		return;

	this->_random_id = random_id;
	emit randomIdChanged();
}

TLInt EncryptedMessage::chatId() const
{
	return this->_chat_id;
}

void EncryptedMessage::setChatId(TLInt chat_id) 
{
	if(this->_chat_id == chat_id)
		return;

	this->_chat_id = chat_id;
	emit chatIdChanged();
}

TLInt EncryptedMessage::date() const
{
	return this->_date;
}

void EncryptedMessage::setDate(TLInt date) 
{
	if(this->_date == date)
		return;

	this->_date = date;
	emit dateChanged();
}

TLBytes EncryptedMessage::bytes() const
{
	return this->_bytes;
}

void EncryptedMessage::setBytes(TLBytes bytes) 
{
	if(this->_bytes == bytes)
		return;

	this->_bytes = bytes;
	emit bytesChanged();
}

EncryptedFile* EncryptedMessage::file() const
{
	return this->_file;
}

void EncryptedMessage::setFile(EncryptedFile* file) 
{
	if(this->_file == file)
		return;

	this->_file = file;
	emit fileChanged();
}

