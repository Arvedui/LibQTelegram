// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "messagesdhconfig.h"


MessagesDhConfig::MessagesDhConfig(QObject* parent) : TelegramObject(parent)
{
	this->_g = 0;
	this->_version = 0;
}

void MessagesDhConfig::read(MTProtoStream* mtstream) 
{
	this->_constructorid = mtstream->readTLConstructor();
	
	Q_ASSERT((this->_constructorid == MessagesDhConfig::CtorMessagesDhConfigNotModified) ||
		 (this->_constructorid == MessagesDhConfig::CtorMessagesDhConfig));
	
	if(this->_constructorid == MessagesDhConfig::CtorMessagesDhConfigNotModified)
		this->_random = mtstream->readTLBytes();
	else if(this->_constructorid == MessagesDhConfig::CtorMessagesDhConfig)
	{
		this->_g = mtstream->readTLInt();
		this->_p = mtstream->readTLBytes();
		this->_version = mtstream->readTLInt();
		this->_random = mtstream->readTLBytes();
	}
}

void MessagesDhConfig::write(MTProtoStream* mtstream) 
{
	Q_ASSERT((this->_constructorid == MessagesDhConfig::CtorMessagesDhConfigNotModified) ||
		 (this->_constructorid == MessagesDhConfig::CtorMessagesDhConfig));
	
	this->compileFlags();
	mtstream->writeTLConstructor(this->_constructorid);
	
	if(this->_constructorid == MessagesDhConfig::CtorMessagesDhConfigNotModified)
		mtstream->writeTLBytes(this->_random);
	else if(this->_constructorid == MessagesDhConfig::CtorMessagesDhConfig)
	{
		mtstream->writeTLInt(this->_g);
		mtstream->writeTLBytes(this->_p);
		mtstream->writeTLInt(this->_version);
		mtstream->writeTLBytes(this->_random);
	}
}

void MessagesDhConfig::compileFlags() 
{
	
}

TLBytes MessagesDhConfig::random() const
{
	return this->_random;
}

void MessagesDhConfig::setRandom(TLBytes random) 
{
	if(this->_random == random)
		return;

	this->_random = random;
	emit randomChanged();
}

TLInt MessagesDhConfig::g() const
{
	return this->_g;
}

void MessagesDhConfig::setG(TLInt g) 
{
	if(this->_g == g)
		return;

	this->_g = g;
	emit gChanged();
}

TLBytes MessagesDhConfig::p() const
{
	return this->_p;
}

void MessagesDhConfig::setP(TLBytes p) 
{
	if(this->_p == p)
		return;

	this->_p = p;
	emit pChanged();
}

TLInt MessagesDhConfig::version() const
{
	return this->_version;
}

void MessagesDhConfig::setVersion(TLInt version) 
{
	if(this->_version == version)
		return;

	this->_version = version;
	emit versionChanged();
}

