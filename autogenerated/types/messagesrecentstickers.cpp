// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "messagesrecentstickers.h"


MessagesRecentStickers::MessagesRecentStickers(QObject* parent) : TelegramObject(parent)
{
	this->_hash = 0;
}

void MessagesRecentStickers::read(MTProtoStream* mtstream) 
{
	this->_constructorid = mtstream->readTLConstructor();
	
	Q_ASSERT((this->_constructorid == MessagesRecentStickers::CtorMessagesRecentStickersNotModified) ||
		 (this->_constructorid == MessagesRecentStickers::CtorMessagesRecentStickers));
	
	if(this->_constructorid == MessagesRecentStickers::CtorMessagesRecentStickers)
	{
		this->_hash = mtstream->readTLInt();
		mtstream->readTLVector<Document>(this->_stickers, false);
	}
}

void MessagesRecentStickers::write(MTProtoStream* mtstream) 
{
	Q_ASSERT((this->_constructorid == MessagesRecentStickers::CtorMessagesRecentStickersNotModified) ||
		 (this->_constructorid == MessagesRecentStickers::CtorMessagesRecentStickers));
	
	this->compileFlags();
	mtstream->writeTLConstructor(this->_constructorid);
	
	if(this->_constructorid == MessagesRecentStickers::CtorMessagesRecentStickers)
	{
		mtstream->writeTLInt(this->_hash);
		mtstream->writeTLVector(this->_stickers, false);
	}
}

void MessagesRecentStickers::compileFlags() 
{
	
}

TLInt MessagesRecentStickers::hash() const
{
	return this->_hash;
}

void MessagesRecentStickers::setHash(TLInt hash) 
{
	if(this->_hash == hash)
		return;

	this->_hash = hash;
	emit hashChanged();
}

const TLVector<Document*>& MessagesRecentStickers::stickers() const
{
	return this->_stickers;
}

void MessagesRecentStickers::setStickers(const TLVector<Document*>& stickers) 
{
	if(this->_stickers == stickers)
		return;

	this->_stickers = stickers;
	emit stickersChanged();
}

