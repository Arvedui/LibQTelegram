// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "peer.h"


Peer::Peer(QObject* parent) : TelegramObject(parent)
{
	this->_user_id = 0;
	this->_chat_id = 0;
	this->_channel_id = 0;
}

void Peer::read(MTProtoStream* mtstream) 
{
	this->_constructorid = mtstream->readTLConstructor();
	
	Q_ASSERT((this->_constructorid == Peer::CtorPeerUser) ||
		 (this->_constructorid == Peer::CtorPeerChat) ||
		 (this->_constructorid == Peer::CtorPeerChannel));
	
	if(this->_constructorid == Peer::CtorPeerUser)
		this->_user_id = mtstream->readTLInt();
	else if(this->_constructorid == Peer::CtorPeerChat)
		this->_chat_id = mtstream->readTLInt();
	else if(this->_constructorid == Peer::CtorPeerChannel)
		this->_channel_id = mtstream->readTLInt();
}

void Peer::write(MTProtoStream* mtstream) 
{
	Q_ASSERT((this->_constructorid == Peer::CtorPeerUser) ||
		 (this->_constructorid == Peer::CtorPeerChat) ||
		 (this->_constructorid == Peer::CtorPeerChannel));
	
	this->compileFlags();
	mtstream->writeTLConstructor(this->_constructorid);
	
	if(this->_constructorid == Peer::CtorPeerUser)
		mtstream->writeTLInt(this->_user_id);
	else if(this->_constructorid == Peer::CtorPeerChat)
		mtstream->writeTLInt(this->_chat_id);
	else if(this->_constructorid == Peer::CtorPeerChannel)
		mtstream->writeTLInt(this->_channel_id);
}

void Peer::compileFlags() 
{
	
}

TLInt Peer::userId() const
{
	return this->_user_id;
}

void Peer::setUserId(TLInt user_id) 
{
	if(this->_user_id == user_id)
		return;

	this->_user_id = user_id;
	emit userIdChanged();
}

TLInt Peer::chatId() const
{
	return this->_chat_id;
}

void Peer::setChatId(TLInt chat_id) 
{
	if(this->_chat_id == chat_id)
		return;

	this->_chat_id = chat_id;
	emit chatIdChanged();
}

TLInt Peer::channelId() const
{
	return this->_channel_id;
}

void Peer::setChannelId(TLInt channel_id) 
{
	if(this->_channel_id == channel_id)
		return;

	this->_channel_id = channel_id;
	emit channelIdChanged();
}

