// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "inputnotifypeer.h"


InputNotifyPeer::InputNotifyPeer(QObject* parent) : TelegramObject(parent)
{
	this->_peer = NULL;
}

void InputNotifyPeer::read(MTProtoStream* mtstream) 
{
	this->_constructorid = mtstream->readTLConstructor();
	
	Q_ASSERT((this->_constructorid == InputNotifyPeer::ctorInputNotifyPeer) ||
		 (this->_constructorid == InputNotifyPeer::ctorInputNotifyUsers) ||
		 (this->_constructorid == InputNotifyPeer::ctorInputNotifyChats) ||
		 (this->_constructorid == InputNotifyPeer::ctorInputNotifyAll));
	
	if(this->_constructorid == InputNotifyPeer::ctorInputNotifyPeer)
	{
		RESET_TLTYPE(InputPeer, this->_peer);
		this->_peer->read(mtstream);
	}
}

void InputNotifyPeer::write(MTProtoStream* mtstream) 
{
	Q_ASSERT((this->_constructorid == InputNotifyPeer::ctorInputNotifyPeer) ||
		 (this->_constructorid == InputNotifyPeer::ctorInputNotifyUsers) ||
		 (this->_constructorid == InputNotifyPeer::ctorInputNotifyChats) ||
		 (this->_constructorid == InputNotifyPeer::ctorInputNotifyAll));
	
	this->compileFlags();
	mtstream->writeTLConstructor(this->_constructorid);
	
	if(this->_constructorid == InputNotifyPeer::ctorInputNotifyPeer)
	{
		Q_ASSERT(this->_peer != NULL);
		this->_peer->write(mtstream);
	}
}

void InputNotifyPeer::compileFlags() 
{
	
}

InputPeer* InputNotifyPeer::peer() const
{
	return this->_peer;
}

void InputNotifyPeer::setPeer(InputPeer* peer) 
{
	if(this->_peer == peer)
		return;

	this->_peer = peer;
	emit peerChanged();
}

