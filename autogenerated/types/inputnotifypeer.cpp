// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "inputnotifypeer.h"


InputNotifyPeer::InputNotifyPeer(QObject* parent) : TelegramObject(parent)
{
	this->_peer = NULL;
}

void InputNotifyPeer::read(MTProtoStream* mtstream) 
{
	this->_constructorid = mtstream->readTLConstructor();
	
	Q_ASSERT((this->_constructorid == InputNotifyPeer::CtorInputNotifyPeer) ||
		 (this->_constructorid == InputNotifyPeer::CtorInputNotifyUsers) ||
		 (this->_constructorid == InputNotifyPeer::CtorInputNotifyChats) ||
		 (this->_constructorid == InputNotifyPeer::CtorInputNotifyAll));
	
	if(this->_constructorid == InputNotifyPeer::CtorInputNotifyPeer)
	{
		TLInt peer_ctor = mtstream->peekTLConstructor();
		
		if(peer_ctor != TLTypes::Null)
		{
			this->resetTLType<InputPeer>(&this->_peer);
			this->_peer->read(mtstream);
		}
		else
		{
			this->nullTLType<InputPeer>(&this->_peer);
			mtstream->readTLConstructor(); // Skip Null
		}
	}
}

void InputNotifyPeer::write(MTProtoStream* mtstream) 
{
	Q_ASSERT((this->_constructorid == InputNotifyPeer::CtorInputNotifyPeer) ||
		 (this->_constructorid == InputNotifyPeer::CtorInputNotifyUsers) ||
		 (this->_constructorid == InputNotifyPeer::CtorInputNotifyChats) ||
		 (this->_constructorid == InputNotifyPeer::CtorInputNotifyAll));
	
	this->compileFlags();
	mtstream->writeTLConstructor(this->_constructorid);
	
	if(this->_constructorid == InputNotifyPeer::CtorInputNotifyPeer)
	{
		if(this->_peer != NULL)
			this->_peer->write(mtstream);
		else
			mtstream->writeTLConstructor(TLTypes::Null);
	}
}

void InputNotifyPeer::compileFlags() 
{
	
}

InputPeer* InputNotifyPeer::peer() const
{
	return this->_peer;
}

void InputNotifyPeer::setPeer(InputPeer* peer) 
{
	if(this->_peer == peer)
		return;

	this->deleteChild(this->_peer);
	this->_peer = peer;

	if(this->_peer)
		this->_peer->setParent(this);

	emit peerChanged();
}

