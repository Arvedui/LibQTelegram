// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "inputencryptedfile.h"


InputEncryptedFile::InputEncryptedFile(QObject* parent) : TelegramObject(parent)
{
	this->_id = 0;
	this->_parts = 0;
	this->_key_fingerprint = 0;
	this->_access_hash = 0;
}

void InputEncryptedFile::read(MTProtoStream* mtstream) 
{
	this->_constructorid = mtstream->readTLConstructor();
	
	Q_ASSERT((this->_constructorid == InputEncryptedFile::CtorInputEncryptedFileEmpty) ||
		 (this->_constructorid == InputEncryptedFile::CtorInputEncryptedFileUploaded) ||
		 (this->_constructorid == InputEncryptedFile::CtorInputEncryptedFile) ||
		 (this->_constructorid == InputEncryptedFile::CtorInputEncryptedFileBigUploaded));
	
	if(this->_constructorid == InputEncryptedFile::CtorInputEncryptedFileUploaded)
	{
		this->_id = mtstream->readTLLong();
		this->_parts = mtstream->readTLInt();
		this->_md5_checksum = mtstream->readTLString();
		this->_key_fingerprint = mtstream->readTLInt();
	}
	else if(this->_constructorid == InputEncryptedFile::CtorInputEncryptedFile)
	{
		this->_id = mtstream->readTLLong();
		this->_access_hash = mtstream->readTLLong();
	}
	else if(this->_constructorid == InputEncryptedFile::CtorInputEncryptedFileBigUploaded)
	{
		this->_id = mtstream->readTLLong();
		this->_parts = mtstream->readTLInt();
		this->_key_fingerprint = mtstream->readTLInt();
	}
}

void InputEncryptedFile::write(MTProtoStream* mtstream) 
{
	Q_ASSERT((this->_constructorid == InputEncryptedFile::CtorInputEncryptedFileEmpty) ||
		 (this->_constructorid == InputEncryptedFile::CtorInputEncryptedFileUploaded) ||
		 (this->_constructorid == InputEncryptedFile::CtorInputEncryptedFile) ||
		 (this->_constructorid == InputEncryptedFile::CtorInputEncryptedFileBigUploaded));
	
	this->compileFlags();
	mtstream->writeTLConstructor(this->_constructorid);
	
	if(this->_constructorid == InputEncryptedFile::CtorInputEncryptedFileUploaded)
	{
		mtstream->writeTLLong(this->_id);
		mtstream->writeTLInt(this->_parts);
		mtstream->writeTLString(this->_md5_checksum);
		mtstream->writeTLInt(this->_key_fingerprint);
	}
	else if(this->_constructorid == InputEncryptedFile::CtorInputEncryptedFile)
	{
		mtstream->writeTLLong(this->_id);
		mtstream->writeTLLong(this->_access_hash);
	}
	else if(this->_constructorid == InputEncryptedFile::CtorInputEncryptedFileBigUploaded)
	{
		mtstream->writeTLLong(this->_id);
		mtstream->writeTLInt(this->_parts);
		mtstream->writeTLInt(this->_key_fingerprint);
	}
}

void InputEncryptedFile::compileFlags() 
{
	
}

TLLong InputEncryptedFile::id() const
{
	return this->_id;
}

void InputEncryptedFile::setId(TLLong id) 
{
	if(this->_id == id)
		return;

	this->_id = id;
	emit idChanged();
}

TLInt InputEncryptedFile::parts() const
{
	return this->_parts;
}

void InputEncryptedFile::setParts(TLInt parts) 
{
	if(this->_parts == parts)
		return;

	this->_parts = parts;
	emit partsChanged();
}

TLString InputEncryptedFile::md5Checksum() const
{
	return this->_md5_checksum;
}

void InputEncryptedFile::setMd5Checksum(TLString md5_checksum) 
{
	if(this->_md5_checksum == md5_checksum)
		return;

	this->_md5_checksum = md5_checksum;
	emit md5ChecksumChanged();
}

TLInt InputEncryptedFile::keyFingerprint() const
{
	return this->_key_fingerprint;
}

void InputEncryptedFile::setKeyFingerprint(TLInt key_fingerprint) 
{
	if(this->_key_fingerprint == key_fingerprint)
		return;

	this->_key_fingerprint = key_fingerprint;
	emit keyFingerprintChanged();
}

TLLong InputEncryptedFile::accessHash() const
{
	return this->_access_hash;
}

void InputEncryptedFile::setAccessHash(TLLong access_hash) 
{
	if(this->_access_hash == access_hash)
		return;

	this->_access_hash = access_hash;
	emit accessHashChanged();
}

