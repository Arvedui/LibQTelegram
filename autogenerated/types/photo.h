#ifndef PHOTO_H
#define PHOTO_H

// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "../../types/telegramobject.h"
#include "photosize.h"
#include "../../types/basic.h"

class Photo: public TelegramObject
{
	Q_OBJECT

	Q_PROPERTY(TLLong id READ id WRITE setId NOTIFY idChanged)
	Q_PROPERTY(TLInt flags READ flags WRITE setFlags NOTIFY flagsChanged)
	Q_PROPERTY(TLTrue hasStickers READ hasStickers WRITE setHasStickers NOTIFY hasStickersChanged)
	Q_PROPERTY(TLLong accessHash READ accessHash WRITE setAccessHash NOTIFY accessHashChanged)
	Q_PROPERTY(TLInt date READ date WRITE setDate NOTIFY dateChanged)
	Q_PROPERTY(TLVector<PhotoSize*> sizes READ sizes WRITE setSizes NOTIFY sizesChanged)

	Q_ENUMS(Constructors)

	public:
		enum Constructors {
			CtorPhotoEmpty = 0x2331b22d,
			CtorPhoto = 0x9288dd29,
		};

	public:
		explicit Photo(QObject* parent = 0);
		virtual void read(MTProtoStream* mtstream);
		virtual void write(MTProtoStream* mtstream);
	protected:
		virtual void compileFlags();
	public:
		TLLong id() const;
		void setId(TLLong id);
		TLInt flags() const;
		void setFlags(TLInt flags);
		TLTrue hasStickers() const;
		void setHasStickers(TLTrue has_stickers);
		TLLong accessHash() const;
		void setAccessHash(TLLong access_hash);
		TLInt date() const;
		void setDate(TLInt date);
		const TLVector<PhotoSize*>& sizes() const;
		void setSizes(const TLVector<PhotoSize*>& sizes);

	signals:
		void idChanged();
		void flagsChanged();
		void hasStickersChanged();
		void accessHashChanged();
		void dateChanged();
		void sizesChanged();

	private:
		TLLong _id;
		TLInt _flags;
		TLTrue _has_stickers;
		TLLong _access_hash;
		TLInt _date;
		TLVector<PhotoSize*> _sizes;

};

#endif // PHOTO_H
