// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "channelparticipant.h"


ChannelParticipant::ChannelParticipant(QObject* parent) : TelegramObject(parent)
{
	this->_user_id = 0;
	this->_date = 0;
	this->_inviter_id = 0;
	this->_kicked_by = 0;
}

void ChannelParticipant::read(MTProtoStream* mtstream) 
{
	this->_constructorid = mtstream->readTLConstructor();
	
	Q_ASSERT((this->_constructorid == ChannelParticipant::ctorChannelParticipant) ||
		 (this->_constructorid == ChannelParticipant::ctorChannelParticipantSelf) ||
		 (this->_constructorid == ChannelParticipant::ctorChannelParticipantModerator) ||
		 (this->_constructorid == ChannelParticipant::ctorChannelParticipantEditor) ||
		 (this->_constructorid == ChannelParticipant::ctorChannelParticipantKicked) ||
		 (this->_constructorid == ChannelParticipant::ctorChannelParticipantCreator));
	
	if(this->_constructorid == ChannelParticipant::ctorChannelParticipant)
	{
		this->_user_id = mtstream->readTLInt();
		this->_date = mtstream->readTLInt();
	}
	else if(this->_constructorid == ChannelParticipant::ctorChannelParticipantSelf)
	{
		this->_user_id = mtstream->readTLInt();
		this->_inviter_id = mtstream->readTLInt();
		this->_date = mtstream->readTLInt();
	}
	else if(this->_constructorid == ChannelParticipant::ctorChannelParticipantModerator)
	{
		this->_user_id = mtstream->readTLInt();
		this->_inviter_id = mtstream->readTLInt();
		this->_date = mtstream->readTLInt();
	}
	else if(this->_constructorid == ChannelParticipant::ctorChannelParticipantEditor)
	{
		this->_user_id = mtstream->readTLInt();
		this->_inviter_id = mtstream->readTLInt();
		this->_date = mtstream->readTLInt();
	}
	else if(this->_constructorid == ChannelParticipant::ctorChannelParticipantKicked)
	{
		this->_user_id = mtstream->readTLInt();
		this->_kicked_by = mtstream->readTLInt();
		this->_date = mtstream->readTLInt();
	}
	else if(this->_constructorid == ChannelParticipant::ctorChannelParticipantCreator)
		this->_user_id = mtstream->readTLInt();
}

void ChannelParticipant::write(MTProtoStream* mtstream) 
{
	Q_ASSERT((this->_constructorid == ChannelParticipant::ctorChannelParticipant) ||
		 (this->_constructorid == ChannelParticipant::ctorChannelParticipantSelf) ||
		 (this->_constructorid == ChannelParticipant::ctorChannelParticipantModerator) ||
		 (this->_constructorid == ChannelParticipant::ctorChannelParticipantEditor) ||
		 (this->_constructorid == ChannelParticipant::ctorChannelParticipantKicked) ||
		 (this->_constructorid == ChannelParticipant::ctorChannelParticipantCreator));
	
	this->compileFlags();
	mtstream->writeTLConstructor(this->_constructorid);
	
	if(this->_constructorid == ChannelParticipant::ctorChannelParticipant)
	{
		mtstream->writeTLInt(this->_user_id);
		mtstream->writeTLInt(this->_date);
	}
	else if(this->_constructorid == ChannelParticipant::ctorChannelParticipantSelf)
	{
		mtstream->writeTLInt(this->_user_id);
		mtstream->writeTLInt(this->_inviter_id);
		mtstream->writeTLInt(this->_date);
	}
	else if(this->_constructorid == ChannelParticipant::ctorChannelParticipantModerator)
	{
		mtstream->writeTLInt(this->_user_id);
		mtstream->writeTLInt(this->_inviter_id);
		mtstream->writeTLInt(this->_date);
	}
	else if(this->_constructorid == ChannelParticipant::ctorChannelParticipantEditor)
	{
		mtstream->writeTLInt(this->_user_id);
		mtstream->writeTLInt(this->_inviter_id);
		mtstream->writeTLInt(this->_date);
	}
	else if(this->_constructorid == ChannelParticipant::ctorChannelParticipantKicked)
	{
		mtstream->writeTLInt(this->_user_id);
		mtstream->writeTLInt(this->_kicked_by);
		mtstream->writeTLInt(this->_date);
	}
	else if(this->_constructorid == ChannelParticipant::ctorChannelParticipantCreator)
		mtstream->writeTLInt(this->_user_id);
}

void ChannelParticipant::compileFlags() 
{
	
}

TLInt ChannelParticipant::userId() const
{
	return this->_user_id;
}

void ChannelParticipant::setUserId(TLInt user_id) 
{
	if(this->_user_id == user_id)
		return;

	this->_user_id = user_id;
	emit userIdChanged();
}

TLInt ChannelParticipant::date() const
{
	return this->_date;
}

void ChannelParticipant::setDate(TLInt date) 
{
	if(this->_date == date)
		return;

	this->_date = date;
	emit dateChanged();
}

TLInt ChannelParticipant::inviterId() const
{
	return this->_inviter_id;
}

void ChannelParticipant::setInviterId(TLInt inviter_id) 
{
	if(this->_inviter_id == inviter_id)
		return;

	this->_inviter_id = inviter_id;
	emit inviterIdChanged();
}

TLInt ChannelParticipant::kickedBy() const
{
	return this->_kicked_by;
}

void ChannelParticipant::setKickedBy(TLInt kicked_by) 
{
	if(this->_kicked_by == kicked_by)
		return;

	this->_kicked_by = kicked_by;
	emit kickedByChanged();
}

