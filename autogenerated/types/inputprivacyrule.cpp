// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "inputprivacyrule.h"


InputPrivacyRule::InputPrivacyRule(QObject* parent) : TelegramObject(parent)
{
	
}

void InputPrivacyRule::read(MTProtoStream* mtstream) 
{
	this->_constructorid = mtstream->readTLConstructor();
	
	Q_ASSERT((this->_constructorid == InputPrivacyRule::ctorInputPrivacyValueAllowContacts) ||
		 (this->_constructorid == InputPrivacyRule::ctorInputPrivacyValueAllowAll) ||
		 (this->_constructorid == InputPrivacyRule::ctorInputPrivacyValueAllowUsers) ||
		 (this->_constructorid == InputPrivacyRule::ctorInputPrivacyValueDisallowContacts) ||
		 (this->_constructorid == InputPrivacyRule::ctorInputPrivacyValueDisallowAll) ||
		 (this->_constructorid == InputPrivacyRule::ctorInputPrivacyValueDisallowUsers));
	
	if(this->_constructorid == InputPrivacyRule::ctorInputPrivacyValueAllowUsers)
		mtstream->readTLVector<InputUser>(this->_users, false);
	else if(this->_constructorid == InputPrivacyRule::ctorInputPrivacyValueDisallowUsers)
		mtstream->readTLVector<InputUser>(this->_users, false);
}

void InputPrivacyRule::write(MTProtoStream* mtstream) 
{
	Q_ASSERT((this->_constructorid == InputPrivacyRule::ctorInputPrivacyValueAllowContacts) ||
		 (this->_constructorid == InputPrivacyRule::ctorInputPrivacyValueAllowAll) ||
		 (this->_constructorid == InputPrivacyRule::ctorInputPrivacyValueAllowUsers) ||
		 (this->_constructorid == InputPrivacyRule::ctorInputPrivacyValueDisallowContacts) ||
		 (this->_constructorid == InputPrivacyRule::ctorInputPrivacyValueDisallowAll) ||
		 (this->_constructorid == InputPrivacyRule::ctorInputPrivacyValueDisallowUsers));
	
	this->compileFlags();
	mtstream->writeTLConstructor(this->_constructorid);
	
	if(this->_constructorid == InputPrivacyRule::ctorInputPrivacyValueAllowUsers)
		mtstream->writeTLVector(this->_users, false);
	else if(this->_constructorid == InputPrivacyRule::ctorInputPrivacyValueDisallowUsers)
		mtstream->writeTLVector(this->_users, false);
}

void InputPrivacyRule::compileFlags() 
{
	
}

const TLVector<InputUser*>& InputPrivacyRule::users() const
{
	return this->_users;
}

void InputPrivacyRule::setUsers(const TLVector<InputUser*>& users) 
{
	if(this->_users == users)
		return;

	this->_users = users;
	emit usersChanged();
}

