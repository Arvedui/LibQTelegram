// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "encryptedchat.h"


EncryptedChat::EncryptedChat(QObject* parent) : TelegramObject(parent)
{
	this->_id = 0;
	this->_access_hash = 0;
	this->_date = 0;
	this->_admin_id = 0;
	this->_participant_id = 0;
	this->_key_fingerprint = 0;
}

void EncryptedChat::read(MTProtoStream* mtstream) 
{
	this->_constructorid = mtstream->readTLConstructor();
	
	Q_ASSERT((this->_constructorid == EncryptedChat::ctorEncryptedChatEmpty) ||
		 (this->_constructorid == EncryptedChat::ctorEncryptedChatWaiting) ||
		 (this->_constructorid == EncryptedChat::ctorEncryptedChatRequested) ||
		 (this->_constructorid == EncryptedChat::ctorEncryptedChat) ||
		 (this->_constructorid == EncryptedChat::ctorEncryptedChatDiscarded));
	
	if(this->_constructorid == EncryptedChat::ctorEncryptedChatEmpty)
		this->_id = mtstream->readTLInt();
	else if(this->_constructorid == EncryptedChat::ctorEncryptedChatWaiting)
	{
		this->_id = mtstream->readTLInt();
		this->_access_hash = mtstream->readTLLong();
		this->_date = mtstream->readTLInt();
		this->_admin_id = mtstream->readTLInt();
		this->_participant_id = mtstream->readTLInt();
	}
	else if(this->_constructorid == EncryptedChat::ctorEncryptedChatRequested)
	{
		this->_id = mtstream->readTLInt();
		this->_access_hash = mtstream->readTLLong();
		this->_date = mtstream->readTLInt();
		this->_admin_id = mtstream->readTLInt();
		this->_participant_id = mtstream->readTLInt();
		this->_g_a = mtstream->readTLBytes();
	}
	else if(this->_constructorid == EncryptedChat::ctorEncryptedChat)
	{
		this->_id = mtstream->readTLInt();
		this->_access_hash = mtstream->readTLLong();
		this->_date = mtstream->readTLInt();
		this->_admin_id = mtstream->readTLInt();
		this->_participant_id = mtstream->readTLInt();
		this->_g_a_or_b = mtstream->readTLBytes();
		this->_key_fingerprint = mtstream->readTLLong();
	}
	else if(this->_constructorid == EncryptedChat::ctorEncryptedChatDiscarded)
		this->_id = mtstream->readTLInt();
}

void EncryptedChat::write(MTProtoStream* mtstream) 
{
	Q_ASSERT((this->_constructorid == EncryptedChat::ctorEncryptedChatEmpty) ||
		 (this->_constructorid == EncryptedChat::ctorEncryptedChatWaiting) ||
		 (this->_constructorid == EncryptedChat::ctorEncryptedChatRequested) ||
		 (this->_constructorid == EncryptedChat::ctorEncryptedChat) ||
		 (this->_constructorid == EncryptedChat::ctorEncryptedChatDiscarded));
	
	this->compileFlags();
	mtstream->writeTLConstructor(this->_constructorid);
	
	if(this->_constructorid == EncryptedChat::ctorEncryptedChatEmpty)
		mtstream->writeTLInt(this->_id);
	else if(this->_constructorid == EncryptedChat::ctorEncryptedChatWaiting)
	{
		mtstream->writeTLInt(this->_id);
		mtstream->writeTLLong(this->_access_hash);
		mtstream->writeTLInt(this->_date);
		mtstream->writeTLInt(this->_admin_id);
		mtstream->writeTLInt(this->_participant_id);
	}
	else if(this->_constructorid == EncryptedChat::ctorEncryptedChatRequested)
	{
		mtstream->writeTLInt(this->_id);
		mtstream->writeTLLong(this->_access_hash);
		mtstream->writeTLInt(this->_date);
		mtstream->writeTLInt(this->_admin_id);
		mtstream->writeTLInt(this->_participant_id);
		mtstream->writeTLBytes(this->_g_a);
	}
	else if(this->_constructorid == EncryptedChat::ctorEncryptedChat)
	{
		mtstream->writeTLInt(this->_id);
		mtstream->writeTLLong(this->_access_hash);
		mtstream->writeTLInt(this->_date);
		mtstream->writeTLInt(this->_admin_id);
		mtstream->writeTLInt(this->_participant_id);
		mtstream->writeTLBytes(this->_g_a_or_b);
		mtstream->writeTLLong(this->_key_fingerprint);
	}
	else if(this->_constructorid == EncryptedChat::ctorEncryptedChatDiscarded)
		mtstream->writeTLInt(this->_id);
}

void EncryptedChat::compileFlags() 
{
	
}

TLInt EncryptedChat::id() const
{
	return this->_id;
}

void EncryptedChat::setId(TLInt id) 
{
	if(this->_id == id)
		return;

	this->_id = id;
	emit idChanged();
}

TLLong EncryptedChat::accessHash() const
{
	return this->_access_hash;
}

void EncryptedChat::setAccessHash(TLLong access_hash) 
{
	if(this->_access_hash == access_hash)
		return;

	this->_access_hash = access_hash;
	emit accessHashChanged();
}

TLInt EncryptedChat::date() const
{
	return this->_date;
}

void EncryptedChat::setDate(TLInt date) 
{
	if(this->_date == date)
		return;

	this->_date = date;
	emit dateChanged();
}

TLInt EncryptedChat::adminId() const
{
	return this->_admin_id;
}

void EncryptedChat::setAdminId(TLInt admin_id) 
{
	if(this->_admin_id == admin_id)
		return;

	this->_admin_id = admin_id;
	emit adminIdChanged();
}

TLInt EncryptedChat::participantId() const
{
	return this->_participant_id;
}

void EncryptedChat::setParticipantId(TLInt participant_id) 
{
	if(this->_participant_id == participant_id)
		return;

	this->_participant_id = participant_id;
	emit participantIdChanged();
}

TLBytes EncryptedChat::gA() const
{
	return this->_g_a;
}

void EncryptedChat::setGA(TLBytes g_a) 
{
	if(this->_g_a == g_a)
		return;

	this->_g_a = g_a;
	emit gAChanged();
}

TLBytes EncryptedChat::gAOrB() const
{
	return this->_g_a_or_b;
}

void EncryptedChat::setGAOrB(TLBytes g_a_or_b) 
{
	if(this->_g_a_or_b == g_a_or_b)
		return;

	this->_g_a_or_b = g_a_or_b;
	emit gAOrBChanged();
}

TLLong EncryptedChat::keyFingerprint() const
{
	return this->_key_fingerprint;
}

void EncryptedChat::setKeyFingerprint(TLLong key_fingerprint) 
{
	if(this->_key_fingerprint == key_fingerprint)
		return;

	this->_key_fingerprint = key_fingerprint;
	emit keyFingerprintChanged();
}

