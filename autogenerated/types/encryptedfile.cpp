// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "encryptedfile.h"


EncryptedFile::EncryptedFile(QObject* parent) : TelegramObject(parent)
{
	this->_id = 0;
	this->_access_hash = 0;
	this->_size = 0;
	this->_dc_id = 0;
	this->_key_fingerprint = 0;
}

void EncryptedFile::read(MTProtoStream* mtstream) 
{
	this->_constructorid = mtstream->readTLConstructor();
	
	Q_ASSERT((this->_constructorid == EncryptedFile::CtorEncryptedFileEmpty) ||
		 (this->_constructorid == EncryptedFile::CtorEncryptedFile));
	
	if(this->_constructorid == EncryptedFile::CtorEncryptedFile)
	{
		this->_id = mtstream->readTLLong();
		this->_access_hash = mtstream->readTLLong();
		this->_size = mtstream->readTLInt();
		this->_dc_id = mtstream->readTLInt();
		this->_key_fingerprint = mtstream->readTLInt();
	}
}

void EncryptedFile::write(MTProtoStream* mtstream) 
{
	Q_ASSERT((this->_constructorid == EncryptedFile::CtorEncryptedFileEmpty) ||
		 (this->_constructorid == EncryptedFile::CtorEncryptedFile));
	
	this->compileFlags();
	mtstream->writeTLConstructor(this->_constructorid);
	
	if(this->_constructorid == EncryptedFile::CtorEncryptedFile)
	{
		mtstream->writeTLLong(this->_id);
		mtstream->writeTLLong(this->_access_hash);
		mtstream->writeTLInt(this->_size);
		mtstream->writeTLInt(this->_dc_id);
		mtstream->writeTLInt(this->_key_fingerprint);
	}
}

void EncryptedFile::compileFlags() 
{
	
}

TLLong EncryptedFile::id() const
{
	return this->_id;
}

void EncryptedFile::setId(TLLong id) 
{
	if(this->_id == id)
		return;

	this->_id = id;
	emit idChanged();
}

TLLong EncryptedFile::accessHash() const
{
	return this->_access_hash;
}

void EncryptedFile::setAccessHash(TLLong access_hash) 
{
	if(this->_access_hash == access_hash)
		return;

	this->_access_hash = access_hash;
	emit accessHashChanged();
}

TLInt EncryptedFile::size() const
{
	return this->_size;
}

void EncryptedFile::setSize(TLInt size) 
{
	if(this->_size == size)
		return;

	this->_size = size;
	emit sizeChanged();
}

TLInt EncryptedFile::dcId() const
{
	return this->_dc_id;
}

void EncryptedFile::setDcId(TLInt dc_id) 
{
	if(this->_dc_id == dc_id)
		return;

	this->_dc_id = dc_id;
	emit dcIdChanged();
}

TLInt EncryptedFile::keyFingerprint() const
{
	return this->_key_fingerprint;
}

void EncryptedFile::setKeyFingerprint(TLInt key_fingerprint) 
{
	if(this->_key_fingerprint == key_fingerprint)
		return;

	this->_key_fingerprint = key_fingerprint;
	emit keyFingerprintChanged();
}

