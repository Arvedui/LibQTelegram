// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "messageschatfull.h"


MessagesChatFull::MessagesChatFull(QObject* parent) : TelegramObject(parent)
{
	this->_full_chat = NULL;
	this->_constructorid = MessagesChatFull::CtorMessagesChatFull;
}

void MessagesChatFull::read(MTProtoStream* mtstream) 
{
	this->_constructorid = mtstream->readTLConstructor();
	
	Q_ASSERT((this->_constructorid == MessagesChatFull::CtorMessagesChatFull));
	
	if(this->_constructorid == MessagesChatFull::CtorMessagesChatFull)
	{
		TLInt full_chat_ctor = mtstream->peekTLConstructor();
		
		if(full_chat_ctor != TLTypes::Null)
		{
			this->resetTLType<ChatFull>(&this->_full_chat);
			this->_full_chat->read(mtstream);
		}
		else
		{
			this->nullTLType<ChatFull>(&this->_full_chat);
			mtstream->readTLConstructor(); // Skip Null
		}
		
		mtstream->readTLVector<Chat>(this->_chats, false, this);
		mtstream->readTLVector<User>(this->_users, false, this);
	}
}

void MessagesChatFull::write(MTProtoStream* mtstream) 
{
	Q_ASSERT((this->_constructorid == MessagesChatFull::CtorMessagesChatFull));
	
	this->compileFlags();
	mtstream->writeTLConstructor(this->_constructorid);
	
	if(this->_constructorid == MessagesChatFull::CtorMessagesChatFull)
	{
		if(this->_full_chat != NULL)
			this->_full_chat->write(mtstream);
		else
			mtstream->writeTLConstructor(TLTypes::Null);
		
		mtstream->writeTLVector(this->_chats, false);
		mtstream->writeTLVector(this->_users, false);
	}
}

void MessagesChatFull::compileFlags() 
{
	
}

ChatFull* MessagesChatFull::fullChat() const
{
	return this->_full_chat;
}

void MessagesChatFull::setFullChat(ChatFull* full_chat) 
{
	if(this->_full_chat == full_chat)
		return;

	this->deleteChild(this->_full_chat);
	this->_full_chat = full_chat;

	if(this->_full_chat)
		this->_full_chat->setParent(this);

	emit fullChatChanged();
}

const TLVector<Chat*>& MessagesChatFull::chats() const
{
	return this->_chats;
}

void MessagesChatFull::setChats(const TLVector<Chat*>& chats) 
{
	if(this->_chats == chats)
		return;

	this->_chats = chats;
	emit chatsChanged();
}

const TLVector<User*>& MessagesChatFull::users() const
{
	return this->_users;
}

void MessagesChatFull::setUsers(const TLVector<User*>& users) 
{
	if(this->_users == users)
		return;

	this->_users = users;
	emit usersChanged();
}

