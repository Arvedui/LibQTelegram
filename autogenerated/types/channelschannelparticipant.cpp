// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "channelschannelparticipant.h"


ChannelsChannelParticipant::ChannelsChannelParticipant(QObject* parent) : TelegramObject(parent)
{
	this->_participant = NULL;
	this->_constructorid = ChannelsChannelParticipant::CtorChannelsChannelParticipant;
}

void ChannelsChannelParticipant::read(MTProtoStream* mtstream) 
{
	this->_constructorid = mtstream->readTLConstructor();
	
	Q_ASSERT((this->_constructorid == ChannelsChannelParticipant::CtorChannelsChannelParticipant));
	
	if(this->_constructorid == ChannelsChannelParticipant::CtorChannelsChannelParticipant)
	{
		TLInt participant_ctor = mtstream->peekTLConstructor();
		
		if(participant_ctor != TLTypes::Null)
		{
			this->resetTLType<ChannelParticipant>(&this->_participant);
			this->_participant->read(mtstream);
		}
		else
		{
			this->nullTLType<ChannelParticipant>(&this->_participant);
			mtstream->readTLConstructor(); // Skip Null
		}
		
		mtstream->readTLVector<User>(this->_users, false, this);
	}
}

void ChannelsChannelParticipant::write(MTProtoStream* mtstream) 
{
	Q_ASSERT((this->_constructorid == ChannelsChannelParticipant::CtorChannelsChannelParticipant));
	
	this->compileFlags();
	mtstream->writeTLConstructor(this->_constructorid);
	
	if(this->_constructorid == ChannelsChannelParticipant::CtorChannelsChannelParticipant)
	{
		if(this->_participant != NULL)
			this->_participant->write(mtstream);
		else
			mtstream->writeTLConstructor(TLTypes::Null);
		
		mtstream->writeTLVector(this->_users, false);
	}
}

void ChannelsChannelParticipant::compileFlags() 
{
	
}

ChannelParticipant* ChannelsChannelParticipant::participant() const
{
	return this->_participant;
}

void ChannelsChannelParticipant::setParticipant(ChannelParticipant* participant) 
{
	if(this->_participant == participant)
		return;

	this->deleteChild(this->_participant);
	this->_participant = participant;

	if(this->_participant)
		this->_participant->setParent(this);

	emit participantChanged();
}

const TLVector<User*>& ChannelsChannelParticipant::users() const
{
	return this->_users;
}

void ChannelsChannelParticipant::setUsers(const TLVector<User*>& users) 
{
	if(this->_users == users)
		return;

	this->_users = users;
	emit usersChanged();
}

