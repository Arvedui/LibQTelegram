// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "channelschannelparticipant.h"


ChannelsChannelParticipant::ChannelsChannelParticipant(QObject* parent) : TelegramObject(parent)
{
	this->_participant = NULL;
	this->_constructorid = ChannelsChannelParticipant::ctorChannelsChannelParticipant;
}

void ChannelsChannelParticipant::read(MTProtoStream* mtstream) 
{
	this->_constructorid = mtstream->readTLConstructor();
	
	Q_ASSERT((this->_constructorid == ChannelsChannelParticipant::ctorChannelsChannelParticipant));
	
	if(this->_constructorid == ChannelsChannelParticipant::ctorChannelsChannelParticipant)
	{
		RESET_TLTYPE(ChannelParticipant, this->_participant);
		this->_participant->read(mtstream);
		mtstream->readTLVector<User>(this->_users, false);
	}
}

void ChannelsChannelParticipant::write(MTProtoStream* mtstream) 
{
	Q_ASSERT((this->_constructorid == ChannelsChannelParticipant::ctorChannelsChannelParticipant));
	
	this->compileFlags();
	mtstream->writeTLConstructor(this->_constructorid);
	
	if(this->_constructorid == ChannelsChannelParticipant::ctorChannelsChannelParticipant)
	{
		Q_ASSERT(this->_participant != NULL);
		this->_participant->write(mtstream);
		mtstream->writeTLVector(this->_users, false);
	}
}

void ChannelsChannelParticipant::compileFlags() 
{
	
}

ChannelParticipant* ChannelsChannelParticipant::participant() const
{
	return this->_participant;
}

void ChannelsChannelParticipant::setParticipant(ChannelParticipant* participant) 
{
	if(this->_participant == participant)
		return;

	this->_participant = participant;
	emit participantChanged();
}

const TLVector<User*>& ChannelsChannelParticipant::users() const
{
	return this->_users;
}

void ChannelsChannelParticipant::setUsers(const TLVector<User*>& users) 
{
	if(this->_users == users)
		return;

	this->_users = users;
	emit usersChanged();
}

