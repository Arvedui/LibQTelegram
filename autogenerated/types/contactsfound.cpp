// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "contactsfound.h"


ContactsFound::ContactsFound(QObject* parent) : TelegramObject(parent)
{
	this->_constructorid = ContactsFound::CtorContactsFound;
}

void ContactsFound::read(MTProtoStream* mtstream) 
{
	this->_constructorid = mtstream->readTLConstructor();
	
	Q_ASSERT((this->_constructorid == ContactsFound::CtorContactsFound));
	
	if(this->_constructorid == ContactsFound::CtorContactsFound)
	{
		mtstream->readTLVector<Peer>(this->_results, false);
		mtstream->readTLVector<Chat>(this->_chats, false);
		mtstream->readTLVector<User>(this->_users, false);
	}
}

void ContactsFound::write(MTProtoStream* mtstream) 
{
	Q_ASSERT((this->_constructorid == ContactsFound::CtorContactsFound));
	
	this->compileFlags();
	mtstream->writeTLConstructor(this->_constructorid);
	
	if(this->_constructorid == ContactsFound::CtorContactsFound)
	{
		mtstream->writeTLVector(this->_results, false);
		mtstream->writeTLVector(this->_chats, false);
		mtstream->writeTLVector(this->_users, false);
	}
}

void ContactsFound::compileFlags() 
{
	
}

const TLVector<Peer*>& ContactsFound::results() const
{
	return this->_results;
}

void ContactsFound::setResults(const TLVector<Peer*>& results) 
{
	if(this->_results == results)
		return;

	this->_results = results;
	emit resultsChanged();
}

const TLVector<Chat*>& ContactsFound::chats() const
{
	return this->_chats;
}

void ContactsFound::setChats(const TLVector<Chat*>& chats) 
{
	if(this->_chats == chats)
		return;

	this->_chats = chats;
	emit chatsChanged();
}

const TLVector<User*>& ContactsFound::users() const
{
	return this->_users;
}

void ContactsFound::setUsers(const TLVector<User*>& users) 
{
	if(this->_users == users)
		return;

	this->_users = users;
	emit usersChanged();
}

