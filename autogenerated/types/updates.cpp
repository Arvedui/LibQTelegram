// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "updates.h"


Updates::Updates(QObject* parent) : TelegramObject(parent)
{
	this->_flags = 0;
	this->_is_out = false;
	this->_is_mentioned = false;
	this->_is_media_unread = false;
	this->_is_silent = false;
	this->_id = 0;
	this->_user_id = 0;
	this->_pts = 0;
	this->_pts_count = 0;
	this->_date = 0;
	this->_fwd_from = NULL;
	this->_via_bot_id = 0;
	this->_reply_to_msg_id = 0;
	this->_from_id = 0;
	this->_chat_id = 0;
	this->_update = NULL;
	this->_seq_start = 0;
	this->_seq = 0;
	this->_media = NULL;
}

void Updates::read(MTProtoStream* mtstream) 
{
	this->_constructorid = mtstream->readTLConstructor();
	
	Q_ASSERT((this->_constructorid == Updates::ctorUpdatesTooLong) ||
		 (this->_constructorid == Updates::ctorUpdateShortMessage) ||
		 (this->_constructorid == Updates::ctorUpdateShortChatMessage) ||
		 (this->_constructorid == Updates::ctorUpdateShort) ||
		 (this->_constructorid == Updates::ctorUpdatesCombined) ||
		 (this->_constructorid == Updates::ctorUpdates) ||
		 (this->_constructorid == Updates::ctorUpdateShortSentMessage));
	
	if(this->_constructorid == Updates::ctorUpdateShortMessage)
	{
		this->_flags = mtstream->readTLInt();
		this->_is_out = IS_FLAG_SET(this->_flags, 1);
		this->_is_mentioned = IS_FLAG_SET(this->_flags, 4);
		this->_is_media_unread = IS_FLAG_SET(this->_flags, 5);
		this->_is_silent = IS_FLAG_SET(this->_flags, 13);
		this->_id = mtstream->readTLInt();
		this->_user_id = mtstream->readTLInt();
		this->_message = mtstream->readTLString();
		this->_pts = mtstream->readTLInt();
		this->_pts_count = mtstream->readTLInt();
		this->_date = mtstream->readTLInt();
		if(IS_FLAG_SET(this->_flags, 2))
		{
			RESET_TLTYPE(MessageFwdHeader, this->_fwd_from);
			this->_fwd_from->read(mtstream);
		}
		
		if(IS_FLAG_SET(this->_flags, 11))
			this->_via_bot_id = mtstream->readTLInt();
		
		if(IS_FLAG_SET(this->_flags, 3))
			this->_reply_to_msg_id = mtstream->readTLInt();
		
		if(IS_FLAG_SET(this->_flags, 7))
			mtstream->readTLVector<MessageEntity>(this->_entities, false);
	}
	else if(this->_constructorid == Updates::ctorUpdateShortChatMessage)
	{
		this->_flags = mtstream->readTLInt();
		this->_is_out = IS_FLAG_SET(this->_flags, 1);
		this->_is_mentioned = IS_FLAG_SET(this->_flags, 4);
		this->_is_media_unread = IS_FLAG_SET(this->_flags, 5);
		this->_is_silent = IS_FLAG_SET(this->_flags, 13);
		this->_id = mtstream->readTLInt();
		this->_from_id = mtstream->readTLInt();
		this->_chat_id = mtstream->readTLInt();
		this->_message = mtstream->readTLString();
		this->_pts = mtstream->readTLInt();
		this->_pts_count = mtstream->readTLInt();
		this->_date = mtstream->readTLInt();
		if(IS_FLAG_SET(this->_flags, 2))
		{
			RESET_TLTYPE(MessageFwdHeader, this->_fwd_from);
			this->_fwd_from->read(mtstream);
		}
		
		if(IS_FLAG_SET(this->_flags, 11))
			this->_via_bot_id = mtstream->readTLInt();
		
		if(IS_FLAG_SET(this->_flags, 3))
			this->_reply_to_msg_id = mtstream->readTLInt();
		
		if(IS_FLAG_SET(this->_flags, 7))
			mtstream->readTLVector<MessageEntity>(this->_entities, false);
	}
	else if(this->_constructorid == Updates::ctorUpdateShort)
	{
		RESET_TLTYPE(Update, this->_update);
		this->_update->read(mtstream);
		this->_date = mtstream->readTLInt();
	}
	else if(this->_constructorid == Updates::ctorUpdatesCombined)
	{
		mtstream->readTLVector<Update>(this->_updates, false);
		mtstream->readTLVector<User>(this->_users, false);
		mtstream->readTLVector<Chat>(this->_chats, false);
		this->_date = mtstream->readTLInt();
		this->_seq_start = mtstream->readTLInt();
		this->_seq = mtstream->readTLInt();
	}
	else if(this->_constructorid == Updates::ctorUpdates)
	{
		mtstream->readTLVector<Update>(this->_updates, false);
		mtstream->readTLVector<User>(this->_users, false);
		mtstream->readTLVector<Chat>(this->_chats, false);
		this->_date = mtstream->readTLInt();
		this->_seq = mtstream->readTLInt();
	}
	else if(this->_constructorid == Updates::ctorUpdateShortSentMessage)
	{
		this->_flags = mtstream->readTLInt();
		this->_is_out = IS_FLAG_SET(this->_flags, 1);
		this->_id = mtstream->readTLInt();
		this->_pts = mtstream->readTLInt();
		this->_pts_count = mtstream->readTLInt();
		this->_date = mtstream->readTLInt();
		if(IS_FLAG_SET(this->_flags, 9))
		{
			RESET_TLTYPE(MessageMedia, this->_media);
			this->_media->read(mtstream);
		}
		
		if(IS_FLAG_SET(this->_flags, 7))
			mtstream->readTLVector<MessageEntity>(this->_entities, false);
	}
}

void Updates::write(MTProtoStream* mtstream) 
{
	Q_ASSERT((this->_constructorid == Updates::ctorUpdatesTooLong) ||
		 (this->_constructorid == Updates::ctorUpdateShortMessage) ||
		 (this->_constructorid == Updates::ctorUpdateShortChatMessage) ||
		 (this->_constructorid == Updates::ctorUpdateShort) ||
		 (this->_constructorid == Updates::ctorUpdatesCombined) ||
		 (this->_constructorid == Updates::ctorUpdates) ||
		 (this->_constructorid == Updates::ctorUpdateShortSentMessage));
	
	this->compileFlags();
	mtstream->writeTLConstructor(this->_constructorid);
	
	if(this->_constructorid == Updates::ctorUpdateShortMessage)
	{
		mtstream->writeTLInt(this->_flags);
		mtstream->writeTLInt(this->_id);
		mtstream->writeTLInt(this->_user_id);
		mtstream->writeTLString(this->_message);
		mtstream->writeTLInt(this->_pts);
		mtstream->writeTLInt(this->_pts_count);
		mtstream->writeTLInt(this->_date);
		if(IS_FLAG_SET(this->_flags, 2))
		{
			Q_ASSERT(this->_fwd_from != NULL);
			this->_fwd_from->write(mtstream);
		}
		
		if(IS_FLAG_SET(this->_flags, 11))
			mtstream->writeTLInt(this->_via_bot_id);
		
		if(IS_FLAG_SET(this->_flags, 3))
			mtstream->writeTLInt(this->_reply_to_msg_id);
		
		if(IS_FLAG_SET(this->_flags, 7))
			mtstream->writeTLVector(this->_entities, false);
	}
	else if(this->_constructorid == Updates::ctorUpdateShortChatMessage)
	{
		mtstream->writeTLInt(this->_flags);
		mtstream->writeTLInt(this->_id);
		mtstream->writeTLInt(this->_from_id);
		mtstream->writeTLInt(this->_chat_id);
		mtstream->writeTLString(this->_message);
		mtstream->writeTLInt(this->_pts);
		mtstream->writeTLInt(this->_pts_count);
		mtstream->writeTLInt(this->_date);
		if(IS_FLAG_SET(this->_flags, 2))
		{
			Q_ASSERT(this->_fwd_from != NULL);
			this->_fwd_from->write(mtstream);
		}
		
		if(IS_FLAG_SET(this->_flags, 11))
			mtstream->writeTLInt(this->_via_bot_id);
		
		if(IS_FLAG_SET(this->_flags, 3))
			mtstream->writeTLInt(this->_reply_to_msg_id);
		
		if(IS_FLAG_SET(this->_flags, 7))
			mtstream->writeTLVector(this->_entities, false);
	}
	else if(this->_constructorid == Updates::ctorUpdateShort)
	{
		Q_ASSERT(this->_update != NULL);
		this->_update->write(mtstream);
		mtstream->writeTLInt(this->_date);
	}
	else if(this->_constructorid == Updates::ctorUpdatesCombined)
	{
		mtstream->writeTLVector(this->_updates, false);
		mtstream->writeTLVector(this->_users, false);
		mtstream->writeTLVector(this->_chats, false);
		mtstream->writeTLInt(this->_date);
		mtstream->writeTLInt(this->_seq_start);
		mtstream->writeTLInt(this->_seq);
	}
	else if(this->_constructorid == Updates::ctorUpdates)
	{
		mtstream->writeTLVector(this->_updates, false);
		mtstream->writeTLVector(this->_users, false);
		mtstream->writeTLVector(this->_chats, false);
		mtstream->writeTLInt(this->_date);
		mtstream->writeTLInt(this->_seq);
	}
	else if(this->_constructorid == Updates::ctorUpdateShortSentMessage)
	{
		mtstream->writeTLInt(this->_flags);
		mtstream->writeTLInt(this->_id);
		mtstream->writeTLInt(this->_pts);
		mtstream->writeTLInt(this->_pts_count);
		mtstream->writeTLInt(this->_date);
		if(IS_FLAG_SET(this->_flags, 9))
		{
			Q_ASSERT(this->_media != NULL);
			this->_media->write(mtstream);
		}
		
		if(IS_FLAG_SET(this->_flags, 7))
			mtstream->writeTLVector(this->_entities, false);
	}
}

void Updates::compileFlags() 
{
	this->_flags = 0;
	
	if(this->_constructorid == Updates::ctorUpdateShortMessage)
	{
		if(this->_is_out)
			SET_FLAG_BIT(this->_flags, 1);
		if(this->_is_mentioned)
			SET_FLAG_BIT(this->_flags, 4);
		if(this->_is_media_unread)
			SET_FLAG_BIT(this->_flags, 5);
		if(this->_is_silent)
			SET_FLAG_BIT(this->_flags, 13);
		if(this->_fwd_from)
			SET_FLAG_BIT(this->_flags, 2);
		if(this->_via_bot_id)
			SET_FLAG_BIT(this->_flags, 11);
		if(this->_reply_to_msg_id)
			SET_FLAG_BIT(this->_flags, 3);
		if(!this->_entities.isEmpty())
			SET_FLAG_BIT(this->_flags, 7);
	}
	else if(this->_constructorid == Updates::ctorUpdateShortChatMessage)
	{
		if(this->_is_out)
			SET_FLAG_BIT(this->_flags, 1);
		if(this->_is_mentioned)
			SET_FLAG_BIT(this->_flags, 4);
		if(this->_is_media_unread)
			SET_FLAG_BIT(this->_flags, 5);
		if(this->_is_silent)
			SET_FLAG_BIT(this->_flags, 13);
		if(this->_fwd_from)
			SET_FLAG_BIT(this->_flags, 2);
		if(this->_via_bot_id)
			SET_FLAG_BIT(this->_flags, 11);
		if(this->_reply_to_msg_id)
			SET_FLAG_BIT(this->_flags, 3);
		if(!this->_entities.isEmpty())
			SET_FLAG_BIT(this->_flags, 7);
	}
	else if(this->_constructorid == Updates::ctorUpdateShortSentMessage)
	{
		if(this->_is_out)
			SET_FLAG_BIT(this->_flags, 1);
		if(this->_media)
			SET_FLAG_BIT(this->_flags, 9);
		if(!this->_entities.isEmpty())
			SET_FLAG_BIT(this->_flags, 7);
	}
}

TLInt Updates::flags() const
{
	return this->_flags;
}

void Updates::setFlags(TLInt flags) 
{
	if(this->_flags == flags)
		return;

	this->_flags = flags;
	emit flagsChanged();
}

TLTrue Updates::isOut() const
{
	return this->_is_out;
}

void Updates::setIsOut(TLTrue is_out) 
{
	if(this->_is_out == is_out)
		return;

	this->_is_out = is_out;
	emit isOutChanged();
}

TLTrue Updates::isMentioned() const
{
	return this->_is_mentioned;
}

void Updates::setIsMentioned(TLTrue is_mentioned) 
{
	if(this->_is_mentioned == is_mentioned)
		return;

	this->_is_mentioned = is_mentioned;
	emit isMentionedChanged();
}

TLTrue Updates::isMediaUnread() const
{
	return this->_is_media_unread;
}

void Updates::setIsMediaUnread(TLTrue is_media_unread) 
{
	if(this->_is_media_unread == is_media_unread)
		return;

	this->_is_media_unread = is_media_unread;
	emit isMediaUnreadChanged();
}

TLTrue Updates::isSilent() const
{
	return this->_is_silent;
}

void Updates::setIsSilent(TLTrue is_silent) 
{
	if(this->_is_silent == is_silent)
		return;

	this->_is_silent = is_silent;
	emit isSilentChanged();
}

TLInt Updates::id() const
{
	return this->_id;
}

void Updates::setId(TLInt id) 
{
	if(this->_id == id)
		return;

	this->_id = id;
	emit idChanged();
}

TLInt Updates::userId() const
{
	return this->_user_id;
}

void Updates::setUserId(TLInt user_id) 
{
	if(this->_user_id == user_id)
		return;

	this->_user_id = user_id;
	emit userIdChanged();
}

TLString Updates::message() const
{
	return this->_message;
}

void Updates::setMessage(TLString message) 
{
	if(this->_message == message)
		return;

	this->_message = message;
	emit messageChanged();
}

TLInt Updates::pts() const
{
	return this->_pts;
}

void Updates::setPts(TLInt pts) 
{
	if(this->_pts == pts)
		return;

	this->_pts = pts;
	emit ptsChanged();
}

TLInt Updates::ptsCount() const
{
	return this->_pts_count;
}

void Updates::setPtsCount(TLInt pts_count) 
{
	if(this->_pts_count == pts_count)
		return;

	this->_pts_count = pts_count;
	emit ptsCountChanged();
}

TLInt Updates::date() const
{
	return this->_date;
}

void Updates::setDate(TLInt date) 
{
	if(this->_date == date)
		return;

	this->_date = date;
	emit dateChanged();
}

MessageFwdHeader* Updates::fwdFrom() const
{
	return this->_fwd_from;
}

void Updates::setFwdFrom(MessageFwdHeader* fwd_from) 
{
	if(this->_fwd_from == fwd_from)
		return;

	this->_fwd_from = fwd_from;
	emit fwdFromChanged();
}

TLInt Updates::viaBotId() const
{
	return this->_via_bot_id;
}

void Updates::setViaBotId(TLInt via_bot_id) 
{
	if(this->_via_bot_id == via_bot_id)
		return;

	this->_via_bot_id = via_bot_id;
	emit viaBotIdChanged();
}

TLInt Updates::replyToMsgId() const
{
	return this->_reply_to_msg_id;
}

void Updates::setReplyToMsgId(TLInt reply_to_msg_id) 
{
	if(this->_reply_to_msg_id == reply_to_msg_id)
		return;

	this->_reply_to_msg_id = reply_to_msg_id;
	emit replyToMsgIdChanged();
}

const TLVector<MessageEntity*>& Updates::entities() const
{
	return this->_entities;
}

void Updates::setEntities(const TLVector<MessageEntity*>& entities) 
{
	if(this->_entities == entities)
		return;

	this->_entities = entities;
	emit entitiesChanged();
}

TLInt Updates::fromId() const
{
	return this->_from_id;
}

void Updates::setFromId(TLInt from_id) 
{
	if(this->_from_id == from_id)
		return;

	this->_from_id = from_id;
	emit fromIdChanged();
}

TLInt Updates::chatId() const
{
	return this->_chat_id;
}

void Updates::setChatId(TLInt chat_id) 
{
	if(this->_chat_id == chat_id)
		return;

	this->_chat_id = chat_id;
	emit chatIdChanged();
}

Update* Updates::update() const
{
	return this->_update;
}

void Updates::setUpdate(Update* update) 
{
	if(this->_update == update)
		return;

	this->_update = update;
	emit updateChanged();
}

const TLVector<Update*>& Updates::updates() const
{
	return this->_updates;
}

void Updates::setUpdates(const TLVector<Update*>& updates) 
{
	if(this->_updates == updates)
		return;

	this->_updates = updates;
	emit updatesChanged();
}

const TLVector<User*>& Updates::users() const
{
	return this->_users;
}

void Updates::setUsers(const TLVector<User*>& users) 
{
	if(this->_users == users)
		return;

	this->_users = users;
	emit usersChanged();
}

const TLVector<Chat*>& Updates::chats() const
{
	return this->_chats;
}

void Updates::setChats(const TLVector<Chat*>& chats) 
{
	if(this->_chats == chats)
		return;

	this->_chats = chats;
	emit chatsChanged();
}

TLInt Updates::seqStart() const
{
	return this->_seq_start;
}

void Updates::setSeqStart(TLInt seq_start) 
{
	if(this->_seq_start == seq_start)
		return;

	this->_seq_start = seq_start;
	emit seqStartChanged();
}

TLInt Updates::seq() const
{
	return this->_seq;
}

void Updates::setSeq(TLInt seq) 
{
	if(this->_seq == seq)
		return;

	this->_seq = seq;
	emit seqChanged();
}

MessageMedia* Updates::media() const
{
	return this->_media;
}

void Updates::setMedia(MessageMedia* media) 
{
	if(this->_media == media)
		return;

	this->_media = media;
	emit mediaChanged();
}

