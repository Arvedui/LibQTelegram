// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "messagesallstickers.h"


MessagesAllStickers::MessagesAllStickers(QObject* parent) : TelegramObject(parent)
{
	this->_hash = 0;
}

void MessagesAllStickers::read(MTProtoStream* mtstream) 
{
	this->_constructorid = mtstream->readTLConstructor();
	
	Q_ASSERT((this->_constructorid == MessagesAllStickers::CtorMessagesAllStickersNotModified) ||
		 (this->_constructorid == MessagesAllStickers::CtorMessagesAllStickers));
	
	if(this->_constructorid == MessagesAllStickers::CtorMessagesAllStickers)
	{
		this->_hash = mtstream->readTLInt();
		mtstream->readTLVector<StickerSet>(this->_sets, false);
	}
}

void MessagesAllStickers::write(MTProtoStream* mtstream) 
{
	Q_ASSERT((this->_constructorid == MessagesAllStickers::CtorMessagesAllStickersNotModified) ||
		 (this->_constructorid == MessagesAllStickers::CtorMessagesAllStickers));
	
	this->compileFlags();
	mtstream->writeTLConstructor(this->_constructorid);
	
	if(this->_constructorid == MessagesAllStickers::CtorMessagesAllStickers)
	{
		mtstream->writeTLInt(this->_hash);
		mtstream->writeTLVector(this->_sets, false);
	}
}

void MessagesAllStickers::compileFlags() 
{
	
}

TLInt MessagesAllStickers::hash() const
{
	return this->_hash;
}

void MessagesAllStickers::setHash(TLInt hash) 
{
	if(this->_hash == hash)
		return;

	this->_hash = hash;
	emit hashChanged();
}

const TLVector<StickerSet*>& MessagesAllStickers::sets() const
{
	return this->_sets;
}

void MessagesAllStickers::setSets(const TLVector<StickerSet*>& sets) 
{
	if(this->_sets == sets)
		return;

	this->_sets = sets;
	emit setsChanged();
}

