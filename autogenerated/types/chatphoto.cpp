// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "chatphoto.h"


ChatPhoto::ChatPhoto(QObject* parent) : TelegramObject(parent)
{
	this->_photo_small = NULL;
	this->_photo_big = NULL;
}

void ChatPhoto::read(MTProtoStream* mtstream) 
{
	this->_constructorid = mtstream->readTLConstructor();
	
	Q_ASSERT((this->_constructorid == ChatPhoto::ctorChatPhotoEmpty) ||
		 (this->_constructorid == ChatPhoto::ctorChatPhoto));
	
	if(this->_constructorid == ChatPhoto::ctorChatPhoto)
	{
		RESET_TLTYPE(FileLocation, this->_photo_small);
		this->_photo_small->read(mtstream);
		RESET_TLTYPE(FileLocation, this->_photo_big);
		this->_photo_big->read(mtstream);
	}
}

void ChatPhoto::write(MTProtoStream* mtstream) 
{
	Q_ASSERT((this->_constructorid == ChatPhoto::ctorChatPhotoEmpty) ||
		 (this->_constructorid == ChatPhoto::ctorChatPhoto));
	
	this->compileFlags();
	mtstream->writeTLConstructor(this->_constructorid);
	
	if(this->_constructorid == ChatPhoto::ctorChatPhoto)
	{
		Q_ASSERT(this->_photo_small != NULL);
		this->_photo_small->write(mtstream);
		Q_ASSERT(this->_photo_big != NULL);
		this->_photo_big->write(mtstream);
	}
}

void ChatPhoto::compileFlags() 
{
	
}

FileLocation* ChatPhoto::photoSmall() const
{
	return this->_photo_small;
}

void ChatPhoto::setPhotoSmall(FileLocation* photo_small) 
{
	if(this->_photo_small == photo_small)
		return;

	this->_photo_small = photo_small;
	emit photoSmallChanged();
}

FileLocation* ChatPhoto::photoBig() const
{
	return this->_photo_big;
}

void ChatPhoto::setPhotoBig(FileLocation* photo_big) 
{
	if(this->_photo_big == photo_big)
		return;

	this->_photo_big = photo_big;
	emit photoBigChanged();
}

