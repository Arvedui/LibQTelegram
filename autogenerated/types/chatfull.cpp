// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "chatfull.h"


ChatFull::ChatFull(QObject* parent) : TelegramObject(parent)
{
	this->_id = 0;
	this->_participants = NULL;
	this->_chat_photo = NULL;
	this->_notify_settings = NULL;
	this->_exported_invite = NULL;
	this->_flags = 0;
	this->_is_can_view_participants = false;
	this->_is_can_set_username = false;
	this->_participants_count = 0;
	this->_admins_count = 0;
	this->_kicked_count = 0;
	this->_read_inbox_max_id = 0;
	this->_read_outbox_max_id = 0;
	this->_unread_count = 0;
	this->_migrated_from_chat_id = 0;
	this->_migrated_from_max_id = 0;
	this->_pinned_msg_id = 0;
}

void ChatFull::read(MTProtoStream* mtstream) 
{
	this->_constructorid = mtstream->readTLConstructor();
	
	Q_ASSERT((this->_constructorid == ChatFull::ctorChatFull) ||
		 (this->_constructorid == ChatFull::ctorChannelFull));
	
	if(this->_constructorid == ChatFull::ctorChatFull)
	{
		this->_id = mtstream->readTLInt();
		RESET_TLTYPE(ChatParticipants, this->_participants);
		this->_participants->read(mtstream);
		RESET_TLTYPE(Photo, this->_chat_photo);
		this->_chat_photo->read(mtstream);
		RESET_TLTYPE(PeerNotifySettings, this->_notify_settings);
		this->_notify_settings->read(mtstream);
		RESET_TLTYPE(ExportedChatInvite, this->_exported_invite);
		this->_exported_invite->read(mtstream);
		mtstream->readTLVector<BotInfo>(this->_bot_info, false);
	}
	else if(this->_constructorid == ChatFull::ctorChannelFull)
	{
		this->_flags = mtstream->readTLInt();
		this->_is_can_view_participants = IS_FLAG_SET(this->_flags, 3);
		this->_is_can_set_username = IS_FLAG_SET(this->_flags, 6);
		this->_id = mtstream->readTLInt();
		this->_about = mtstream->readTLString();
		if(IS_FLAG_SET(this->_flags, 0))
			this->_participants_count = mtstream->readTLInt();
		
		if(IS_FLAG_SET(this->_flags, 1))
			this->_admins_count = mtstream->readTLInt();
		
		if(IS_FLAG_SET(this->_flags, 2))
			this->_kicked_count = mtstream->readTLInt();
		
		this->_read_inbox_max_id = mtstream->readTLInt();
		this->_read_outbox_max_id = mtstream->readTLInt();
		this->_unread_count = mtstream->readTLInt();
		RESET_TLTYPE(Photo, this->_chat_photo);
		this->_chat_photo->read(mtstream);
		RESET_TLTYPE(PeerNotifySettings, this->_notify_settings);
		this->_notify_settings->read(mtstream);
		RESET_TLTYPE(ExportedChatInvite, this->_exported_invite);
		this->_exported_invite->read(mtstream);
		mtstream->readTLVector<BotInfo>(this->_bot_info, false);
		if(IS_FLAG_SET(this->_flags, 4))
			this->_migrated_from_chat_id = mtstream->readTLInt();
		
		if(IS_FLAG_SET(this->_flags, 4))
			this->_migrated_from_max_id = mtstream->readTLInt();
		
		if(IS_FLAG_SET(this->_flags, 5))
			this->_pinned_msg_id = mtstream->readTLInt();
	}
}

void ChatFull::write(MTProtoStream* mtstream) 
{
	Q_ASSERT((this->_constructorid == ChatFull::ctorChatFull) ||
		 (this->_constructorid == ChatFull::ctorChannelFull));
	
	this->compileFlags();
	mtstream->writeTLConstructor(this->_constructorid);
	
	if(this->_constructorid == ChatFull::ctorChatFull)
	{
		mtstream->writeTLInt(this->_id);
		Q_ASSERT(this->_participants != NULL);
		this->_participants->write(mtstream);
		Q_ASSERT(this->_chat_photo != NULL);
		this->_chat_photo->write(mtstream);
		Q_ASSERT(this->_notify_settings != NULL);
		this->_notify_settings->write(mtstream);
		Q_ASSERT(this->_exported_invite != NULL);
		this->_exported_invite->write(mtstream);
		mtstream->writeTLVector(this->_bot_info, false);
	}
	else if(this->_constructorid == ChatFull::ctorChannelFull)
	{
		mtstream->writeTLInt(this->_flags);
		mtstream->writeTLInt(this->_id);
		mtstream->writeTLString(this->_about);
		if(IS_FLAG_SET(this->_flags, 0))
			mtstream->writeTLInt(this->_participants_count);
		
		if(IS_FLAG_SET(this->_flags, 1))
			mtstream->writeTLInt(this->_admins_count);
		
		if(IS_FLAG_SET(this->_flags, 2))
			mtstream->writeTLInt(this->_kicked_count);
		
		mtstream->writeTLInt(this->_read_inbox_max_id);
		mtstream->writeTLInt(this->_read_outbox_max_id);
		mtstream->writeTLInt(this->_unread_count);
		Q_ASSERT(this->_chat_photo != NULL);
		this->_chat_photo->write(mtstream);
		Q_ASSERT(this->_notify_settings != NULL);
		this->_notify_settings->write(mtstream);
		Q_ASSERT(this->_exported_invite != NULL);
		this->_exported_invite->write(mtstream);
		mtstream->writeTLVector(this->_bot_info, false);
		if(IS_FLAG_SET(this->_flags, 4))
			mtstream->writeTLInt(this->_migrated_from_chat_id);
		
		if(IS_FLAG_SET(this->_flags, 4))
			mtstream->writeTLInt(this->_migrated_from_max_id);
		
		if(IS_FLAG_SET(this->_flags, 5))
			mtstream->writeTLInt(this->_pinned_msg_id);
	}
}

void ChatFull::compileFlags() 
{
	this->_flags = 0;
	
	if(this->_constructorid == ChatFull::ctorChannelFull)
	{
		if(this->_is_can_view_participants)
			SET_FLAG_BIT(this->_flags, 3);
		if(this->_is_can_set_username)
			SET_FLAG_BIT(this->_flags, 6);
		if(this->_participants_count)
			SET_FLAG_BIT(this->_flags, 0);
		if(this->_admins_count)
			SET_FLAG_BIT(this->_flags, 1);
		if(this->_kicked_count)
			SET_FLAG_BIT(this->_flags, 2);
		if(this->_migrated_from_chat_id)
			SET_FLAG_BIT(this->_flags, 4);
		if(this->_migrated_from_max_id)
			SET_FLAG_BIT(this->_flags, 4);
		if(this->_pinned_msg_id)
			SET_FLAG_BIT(this->_flags, 5);
	}
}

TLInt ChatFull::id() const
{
	return this->_id;
}

void ChatFull::setId(TLInt id) 
{
	if(this->_id == id)
		return;

	this->_id = id;
	emit idChanged();
}

ChatParticipants* ChatFull::participants() const
{
	return this->_participants;
}

void ChatFull::setParticipants(ChatParticipants* participants) 
{
	if(this->_participants == participants)
		return;

	this->_participants = participants;
	emit participantsChanged();
}

Photo* ChatFull::chatPhoto() const
{
	return this->_chat_photo;
}

void ChatFull::setChatPhoto(Photo* chat_photo) 
{
	if(this->_chat_photo == chat_photo)
		return;

	this->_chat_photo = chat_photo;
	emit chatPhotoChanged();
}

PeerNotifySettings* ChatFull::notifySettings() const
{
	return this->_notify_settings;
}

void ChatFull::setNotifySettings(PeerNotifySettings* notify_settings) 
{
	if(this->_notify_settings == notify_settings)
		return;

	this->_notify_settings = notify_settings;
	emit notifySettingsChanged();
}

ExportedChatInvite* ChatFull::exportedInvite() const
{
	return this->_exported_invite;
}

void ChatFull::setExportedInvite(ExportedChatInvite* exported_invite) 
{
	if(this->_exported_invite == exported_invite)
		return;

	this->_exported_invite = exported_invite;
	emit exportedInviteChanged();
}

const TLVector<BotInfo*>& ChatFull::botInfo() const
{
	return this->_bot_info;
}

void ChatFull::setBotInfo(const TLVector<BotInfo*>& bot_info) 
{
	if(this->_bot_info == bot_info)
		return;

	this->_bot_info = bot_info;
	emit botInfoChanged();
}

TLInt ChatFull::flags() const
{
	return this->_flags;
}

void ChatFull::setFlags(TLInt flags) 
{
	if(this->_flags == flags)
		return;

	this->_flags = flags;
	emit flagsChanged();
}

TLTrue ChatFull::isCanViewParticipants() const
{
	return this->_is_can_view_participants;
}

void ChatFull::setIsCanViewParticipants(TLTrue is_can_view_participants) 
{
	if(this->_is_can_view_participants == is_can_view_participants)
		return;

	this->_is_can_view_participants = is_can_view_participants;
	emit isCanViewParticipantsChanged();
}

TLTrue ChatFull::isCanSetUsername() const
{
	return this->_is_can_set_username;
}

void ChatFull::setIsCanSetUsername(TLTrue is_can_set_username) 
{
	if(this->_is_can_set_username == is_can_set_username)
		return;

	this->_is_can_set_username = is_can_set_username;
	emit isCanSetUsernameChanged();
}

TLString ChatFull::about() const
{
	return this->_about;
}

void ChatFull::setAbout(TLString about) 
{
	if(this->_about == about)
		return;

	this->_about = about;
	emit aboutChanged();
}

TLInt ChatFull::participantsCount() const
{
	return this->_participants_count;
}

void ChatFull::setParticipantsCount(TLInt participants_count) 
{
	if(this->_participants_count == participants_count)
		return;

	this->_participants_count = participants_count;
	emit participantsCountChanged();
}

TLInt ChatFull::adminsCount() const
{
	return this->_admins_count;
}

void ChatFull::setAdminsCount(TLInt admins_count) 
{
	if(this->_admins_count == admins_count)
		return;

	this->_admins_count = admins_count;
	emit adminsCountChanged();
}

TLInt ChatFull::kickedCount() const
{
	return this->_kicked_count;
}

void ChatFull::setKickedCount(TLInt kicked_count) 
{
	if(this->_kicked_count == kicked_count)
		return;

	this->_kicked_count = kicked_count;
	emit kickedCountChanged();
}

TLInt ChatFull::readInboxMaxId() const
{
	return this->_read_inbox_max_id;
}

void ChatFull::setReadInboxMaxId(TLInt read_inbox_max_id) 
{
	if(this->_read_inbox_max_id == read_inbox_max_id)
		return;

	this->_read_inbox_max_id = read_inbox_max_id;
	emit readInboxMaxIdChanged();
}

TLInt ChatFull::readOutboxMaxId() const
{
	return this->_read_outbox_max_id;
}

void ChatFull::setReadOutboxMaxId(TLInt read_outbox_max_id) 
{
	if(this->_read_outbox_max_id == read_outbox_max_id)
		return;

	this->_read_outbox_max_id = read_outbox_max_id;
	emit readOutboxMaxIdChanged();
}

TLInt ChatFull::unreadCount() const
{
	return this->_unread_count;
}

void ChatFull::setUnreadCount(TLInt unread_count) 
{
	if(this->_unread_count == unread_count)
		return;

	this->_unread_count = unread_count;
	emit unreadCountChanged();
}

TLInt ChatFull::migratedFromChatId() const
{
	return this->_migrated_from_chat_id;
}

void ChatFull::setMigratedFromChatId(TLInt migrated_from_chat_id) 
{
	if(this->_migrated_from_chat_id == migrated_from_chat_id)
		return;

	this->_migrated_from_chat_id = migrated_from_chat_id;
	emit migratedFromChatIdChanged();
}

TLInt ChatFull::migratedFromMaxId() const
{
	return this->_migrated_from_max_id;
}

void ChatFull::setMigratedFromMaxId(TLInt migrated_from_max_id) 
{
	if(this->_migrated_from_max_id == migrated_from_max_id)
		return;

	this->_migrated_from_max_id = migrated_from_max_id;
	emit migratedFromMaxIdChanged();
}

TLInt ChatFull::pinnedMsgId() const
{
	return this->_pinned_msg_id;
}

void ChatFull::setPinnedMsgId(TLInt pinned_msg_id) 
{
	if(this->_pinned_msg_id == pinned_msg_id)
		return;

	this->_pinned_msg_id = pinned_msg_id;
	emit pinnedMsgIdChanged();
}

