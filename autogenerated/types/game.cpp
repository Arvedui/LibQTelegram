// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "game.h"


Game::Game(QObject* parent) : TelegramObject(parent)
{
	this->_flags = 0;
	this->_id = 0;
	this->_access_hash = 0;
	this->_photo = NULL;
	this->_document = NULL;
	this->_constructorid = Game::ctorGame;
}

void Game::read(MTProtoStream* mtstream) 
{
	this->_constructorid = mtstream->readTLConstructor();
	
	Q_ASSERT((this->_constructorid == Game::ctorGame));
	
	if(this->_constructorid == Game::ctorGame)
	{
		this->_flags = mtstream->readTLInt();
		this->_id = mtstream->readTLLong();
		this->_access_hash = mtstream->readTLLong();
		this->_short_name = mtstream->readTLString();
		this->_title = mtstream->readTLString();
		this->_description = mtstream->readTLString();
		TLInt photo_ctor = mtstream->peekTLConstructor();
		
		if(photo_ctor != TLTypes::Null)
		{
			RESET_TLTYPE(Photo, this->_photo);
			this->_photo->read(mtstream);
		}
		else
		{
			NULL_TLTYPE(this->_photo);
			mtstream->readTLConstructor(); // Skip Null
		}
		
		if(IS_FLAG_SET(this->_flags, 0))
		{
			TLInt document_ctor = mtstream->peekTLConstructor();
			
			if(document_ctor != TLTypes::Null)
			{
				RESET_TLTYPE(Document, this->_document);
				this->_document->read(mtstream);
			}
			else
			{
				NULL_TLTYPE(this->_document);
				mtstream->readTLConstructor(); // Skip Null
			}
		}
	}
}

void Game::write(MTProtoStream* mtstream) 
{
	Q_ASSERT((this->_constructorid == Game::ctorGame));
	
	this->compileFlags();
	mtstream->writeTLConstructor(this->_constructorid);
	
	if(this->_constructorid == Game::ctorGame)
	{
		mtstream->writeTLInt(this->_flags);
		mtstream->writeTLLong(this->_id);
		mtstream->writeTLLong(this->_access_hash);
		mtstream->writeTLString(this->_short_name);
		mtstream->writeTLString(this->_title);
		mtstream->writeTLString(this->_description);
		if(this->_photo != NULL)
			this->_photo->write(mtstream);
		else
			mtstream->writeTLConstructor(TLTypes::Null);
		
		if(IS_FLAG_SET(this->_flags, 0))
		{
			if(this->_document != NULL)
				this->_document->write(mtstream);
			else
				mtstream->writeTLConstructor(TLTypes::Null);
		}
	}
}

void Game::compileFlags() 
{
	this->_flags = 0;
	
	if(this->_constructorid == Game::ctorGame)
	{
		if(this->_document)
			SET_FLAG_BIT(this->_flags, 0);
	}
}

TLInt Game::flags() const
{
	return this->_flags;
}

void Game::setFlags(TLInt flags) 
{
	if(this->_flags == flags)
		return;

	this->_flags = flags;
	emit flagsChanged();
}

TLLong Game::id() const
{
	return this->_id;
}

void Game::setId(TLLong id) 
{
	if(this->_id == id)
		return;

	this->_id = id;
	emit idChanged();
}

TLLong Game::accessHash() const
{
	return this->_access_hash;
}

void Game::setAccessHash(TLLong access_hash) 
{
	if(this->_access_hash == access_hash)
		return;

	this->_access_hash = access_hash;
	emit accessHashChanged();
}

TLString Game::shortName() const
{
	return this->_short_name;
}

void Game::setShortName(TLString short_name) 
{
	if(this->_short_name == short_name)
		return;

	this->_short_name = short_name;
	emit shortNameChanged();
}

TLString Game::title() const
{
	return this->_title;
}

void Game::setTitle(TLString title) 
{
	if(this->_title == title)
		return;

	this->_title = title;
	emit titleChanged();
}

TLString Game::description() const
{
	return this->_description;
}

void Game::setDescription(TLString description) 
{
	if(this->_description == description)
		return;

	this->_description = description;
	emit descriptionChanged();
}

Photo* Game::photo() const
{
	return this->_photo;
}

void Game::setPhoto(Photo* photo) 
{
	if(this->_photo == photo)
		return;

	this->_photo = photo;
	emit photoChanged();
}

Document* Game::document() const
{
	return this->_document;
}

void Game::setDocument(Document* document) 
{
	if(this->_document == document)
		return;

	this->_document = document;
	emit documentChanged();
}

