// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "messagefwdheader.h"


MessageFwdHeader::MessageFwdHeader(QObject* parent) : TelegramObject(parent)
{
	this->_flags = 0;
	this->_from_id = 0;
	this->_date = 0;
	this->_channel_id = 0;
	this->_channel_post = 0;
	this->_constructorid = MessageFwdHeader::ctorMessageFwdHeader;
}

void MessageFwdHeader::read(MTProtoStream* mtstream) 
{
	this->_constructorid = mtstream->readTLConstructor();
	
	Q_ASSERT((this->_constructorid == MessageFwdHeader::ctorMessageFwdHeader));
	
	if(this->_constructorid == MessageFwdHeader::ctorMessageFwdHeader)
	{
		this->_flags = mtstream->readTLInt();
		if(IS_FLAG_SET(this->_flags, 0))
			this->_from_id = mtstream->readTLInt();
		
		this->_date = mtstream->readTLInt();
		if(IS_FLAG_SET(this->_flags, 1))
			this->_channel_id = mtstream->readTLInt();
		
		if(IS_FLAG_SET(this->_flags, 2))
			this->_channel_post = mtstream->readTLInt();
	}
}

void MessageFwdHeader::write(MTProtoStream* mtstream) 
{
	Q_ASSERT((this->_constructorid == MessageFwdHeader::ctorMessageFwdHeader));
	
	this->compileFlags();
	mtstream->writeTLConstructor(this->_constructorid);
	
	if(this->_constructorid == MessageFwdHeader::ctorMessageFwdHeader)
	{
		mtstream->writeTLInt(this->_flags);
		if(IS_FLAG_SET(this->_flags, 0))
			mtstream->writeTLInt(this->_from_id);
		
		mtstream->writeTLInt(this->_date);
		if(IS_FLAG_SET(this->_flags, 1))
			mtstream->writeTLInt(this->_channel_id);
		
		if(IS_FLAG_SET(this->_flags, 2))
			mtstream->writeTLInt(this->_channel_post);
	}
}

void MessageFwdHeader::compileFlags() 
{
	this->_flags = 0;
	
	if(this->_constructorid == MessageFwdHeader::ctorMessageFwdHeader)
	{
		if(this->_from_id)
			SET_FLAG_BIT(this->_flags, 0);
		if(this->_channel_id)
			SET_FLAG_BIT(this->_flags, 1);
		if(this->_channel_post)
			SET_FLAG_BIT(this->_flags, 2);
	}
}

TLInt MessageFwdHeader::flags() const
{
	return this->_flags;
}

void MessageFwdHeader::setFlags(TLInt flags) 
{
	if(this->_flags == flags)
		return;

	this->_flags = flags;
	emit flagsChanged();
}

TLInt MessageFwdHeader::fromId() const
{
	return this->_from_id;
}

void MessageFwdHeader::setFromId(TLInt from_id) 
{
	if(this->_from_id == from_id)
		return;

	this->_from_id = from_id;
	emit fromIdChanged();
}

TLInt MessageFwdHeader::date() const
{
	return this->_date;
}

void MessageFwdHeader::setDate(TLInt date) 
{
	if(this->_date == date)
		return;

	this->_date = date;
	emit dateChanged();
}

TLInt MessageFwdHeader::channelId() const
{
	return this->_channel_id;
}

void MessageFwdHeader::setChannelId(TLInt channel_id) 
{
	if(this->_channel_id == channel_id)
		return;

	this->_channel_id = channel_id;
	emit channelIdChanged();
}

TLInt MessageFwdHeader::channelPost() const
{
	return this->_channel_post;
}

void MessageFwdHeader::setChannelPost(TLInt channel_post) 
{
	if(this->_channel_post == channel_post)
		return;

	this->_channel_post = channel_post;
	emit channelPostChanged();
}

