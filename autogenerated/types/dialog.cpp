// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "dialog.h"


Dialog::Dialog(QObject* parent) : TelegramObject(parent)
{
	this->_flags = 0;
	this->_peer = NULL;
	this->_top_message = 0;
	this->_read_inbox_max_id = 0;
	this->_read_outbox_max_id = 0;
	this->_unread_count = 0;
	this->_notify_settings = NULL;
	this->_pts = 0;
	this->_draft = NULL;
	this->_constructorid = Dialog::CtorDialog;
}

void Dialog::read(MTProtoStream* mtstream) 
{
	this->_constructorid = mtstream->readTLConstructor();
	
	Q_ASSERT((this->_constructorid == Dialog::CtorDialog));
	
	if(this->_constructorid == Dialog::CtorDialog)
	{
		this->_flags = mtstream->readTLInt();
		TLInt peer_ctor = mtstream->peekTLConstructor();
		
		if(peer_ctor != TLTypes::Null)
		{
			RESET_TLTYPE(Peer, this->_peer);
			this->_peer->read(mtstream);
		}
		else
		{
			NULL_TLTYPE(this->_peer);
			mtstream->readTLConstructor(); // Skip Null
		}
		
		this->_top_message = mtstream->readTLInt();
		this->_read_inbox_max_id = mtstream->readTLInt();
		this->_read_outbox_max_id = mtstream->readTLInt();
		this->_unread_count = mtstream->readTLInt();
		TLInt notify_settings_ctor = mtstream->peekTLConstructor();
		
		if(notify_settings_ctor != TLTypes::Null)
		{
			RESET_TLTYPE(PeerNotifySettings, this->_notify_settings);
			this->_notify_settings->read(mtstream);
		}
		else
		{
			NULL_TLTYPE(this->_notify_settings);
			mtstream->readTLConstructor(); // Skip Null
		}
		
		if(IS_FLAG_SET(this->_flags, 0))
			this->_pts = mtstream->readTLInt();
		
		if(IS_FLAG_SET(this->_flags, 1))
		{
			TLInt draft_ctor = mtstream->peekTLConstructor();
			
			if(draft_ctor != TLTypes::Null)
			{
				RESET_TLTYPE(DraftMessage, this->_draft);
				this->_draft->read(mtstream);
			}
			else
			{
				NULL_TLTYPE(this->_draft);
				mtstream->readTLConstructor(); // Skip Null
			}
		}
	}
}

void Dialog::write(MTProtoStream* mtstream) 
{
	Q_ASSERT((this->_constructorid == Dialog::CtorDialog));
	
	this->compileFlags();
	mtstream->writeTLConstructor(this->_constructorid);
	
	if(this->_constructorid == Dialog::CtorDialog)
	{
		mtstream->writeTLInt(this->_flags);
		if(this->_peer != NULL)
			this->_peer->write(mtstream);
		else
			mtstream->writeTLConstructor(TLTypes::Null);
		
		mtstream->writeTLInt(this->_top_message);
		mtstream->writeTLInt(this->_read_inbox_max_id);
		mtstream->writeTLInt(this->_read_outbox_max_id);
		mtstream->writeTLInt(this->_unread_count);
		if(this->_notify_settings != NULL)
			this->_notify_settings->write(mtstream);
		else
			mtstream->writeTLConstructor(TLTypes::Null);
		
		if(IS_FLAG_SET(this->_flags, 0))
			mtstream->writeTLInt(this->_pts);
		
		if(IS_FLAG_SET(this->_flags, 1))
		{
			if(this->_draft != NULL)
				this->_draft->write(mtstream);
			else
				mtstream->writeTLConstructor(TLTypes::Null);
		}
	}
}

void Dialog::compileFlags() 
{
	this->_flags = 0;
	
	if(this->_constructorid == Dialog::CtorDialog)
	{
		if(this->_pts)
			SET_FLAG_BIT(this->_flags, 0);
		if(this->_draft)
			SET_FLAG_BIT(this->_flags, 1);
	}
}

TLInt Dialog::flags() const
{
	return this->_flags;
}

void Dialog::setFlags(TLInt flags) 
{
	if(this->_flags == flags)
		return;

	this->_flags = flags;
	emit flagsChanged();
}

Peer* Dialog::peer() const
{
	return this->_peer;
}

void Dialog::setPeer(Peer* peer) 
{
	if(this->_peer == peer)
		return;

	this->_peer = peer;
	emit peerChanged();
}

TLInt Dialog::topMessage() const
{
	return this->_top_message;
}

void Dialog::setTopMessage(TLInt top_message) 
{
	if(this->_top_message == top_message)
		return;

	this->_top_message = top_message;
	emit topMessageChanged();
}

TLInt Dialog::readInboxMaxId() const
{
	return this->_read_inbox_max_id;
}

void Dialog::setReadInboxMaxId(TLInt read_inbox_max_id) 
{
	if(this->_read_inbox_max_id == read_inbox_max_id)
		return;

	this->_read_inbox_max_id = read_inbox_max_id;
	emit readInboxMaxIdChanged();
}

TLInt Dialog::readOutboxMaxId() const
{
	return this->_read_outbox_max_id;
}

void Dialog::setReadOutboxMaxId(TLInt read_outbox_max_id) 
{
	if(this->_read_outbox_max_id == read_outbox_max_id)
		return;

	this->_read_outbox_max_id = read_outbox_max_id;
	emit readOutboxMaxIdChanged();
}

TLInt Dialog::unreadCount() const
{
	return this->_unread_count;
}

void Dialog::setUnreadCount(TLInt unread_count) 
{
	if(this->_unread_count == unread_count)
		return;

	this->_unread_count = unread_count;
	emit unreadCountChanged();
}

PeerNotifySettings* Dialog::notifySettings() const
{
	return this->_notify_settings;
}

void Dialog::setNotifySettings(PeerNotifySettings* notify_settings) 
{
	if(this->_notify_settings == notify_settings)
		return;

	this->_notify_settings = notify_settings;
	emit notifySettingsChanged();
}

TLInt Dialog::pts() const
{
	return this->_pts;
}

void Dialog::setPts(TLInt pts) 
{
	if(this->_pts == pts)
		return;

	this->_pts = pts;
	emit ptsChanged();
}

DraftMessage* Dialog::draft() const
{
	return this->_draft;
}

void Dialog::setDraft(DraftMessage* draft) 
{
	if(this->_draft == draft)
		return;

	this->_draft = draft;
	emit draftChanged();
}

