// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "update.h"


Update::Update(QObject* parent) : TelegramObject(parent)
{
	this->_message_updatenewmessage = NULL;
	this->_pts = 0;
	this->_pts_count = 0;
	this->_id_updatemessageid = 0;
	this->_random_id = 0;
	this->_user_id = 0;
	this->_action = NULL;
	this->_chat_id = 0;
	this->_participants = NULL;
	this->_status = NULL;
	this->_date = 0;
	this->_photo = NULL;
	this->_is_previous = false;
	this->_my_link = NULL;
	this->_foreign_link = NULL;
	this->_auth_key_id = 0;
	this->_message_updatenewencryptedmessage = NULL;
	this->_qts = 0;
	this->_chat = NULL;
	this->_max_date = 0;
	this->_inviter_id = 0;
	this->_version = 0;
	this->_is_blocked = false;
	this->_peer_updatenotifysettings = NULL;
	this->_notify_settings = NULL;
	this->_media = NULL;
	this->_is_popup = false;
	this->_key = NULL;
	this->_peer_updatereadhistoryinbox = NULL;
	this->_max_id = 0;
	this->_peer = NULL;
	this->_webpage = NULL;
	this->_flags = 0;
	this->_channel_id = 0;
	this->_message_updatenewchannelmessage = NULL;
	this->_id = 0;
	this->_views = 0;
	this->_is_enabled = false;
	this->_is_admin = false;
	this->_stickerset = NULL;
	this->_is_masks = false;
	this->_query_id = 0;
	this->_geo = NULL;
	this->_msg_id_updatebotinlinesend = NULL;
	this->_message = NULL;
	this->_id_updatechannelpinnedmessage = 0;
	this->_msg_id_updatebotcallbackquery = 0;
	this->_chat_instance = 0;
	this->_msg_id_updateinlinebotcallbackquery = NULL;
	this->_draft = NULL;
}

void Update::read(MTProtoStream* mtstream) 
{
	this->_constructorid = mtstream->readTLConstructor();
	
	Q_ASSERT((this->_constructorid == Update::ctorUpdateNewMessage) ||
		 (this->_constructorid == Update::ctorUpdateMessageID) ||
		 (this->_constructorid == Update::ctorUpdateDeleteMessages) ||
		 (this->_constructorid == Update::ctorUpdateUserTyping) ||
		 (this->_constructorid == Update::ctorUpdateChatUserTyping) ||
		 (this->_constructorid == Update::ctorUpdateChatParticipants) ||
		 (this->_constructorid == Update::ctorUpdateUserStatus) ||
		 (this->_constructorid == Update::ctorUpdateUserName) ||
		 (this->_constructorid == Update::ctorUpdateUserPhoto) ||
		 (this->_constructorid == Update::ctorUpdateContactRegistered) ||
		 (this->_constructorid == Update::ctorUpdateContactLink) ||
		 (this->_constructorid == Update::ctorUpdateNewAuthorization) ||
		 (this->_constructorid == Update::ctorUpdateNewEncryptedMessage) ||
		 (this->_constructorid == Update::ctorUpdateEncryptedChatTyping) ||
		 (this->_constructorid == Update::ctorUpdateEncryption) ||
		 (this->_constructorid == Update::ctorUpdateEncryptedMessagesRead) ||
		 (this->_constructorid == Update::ctorUpdateChatParticipantAdd) ||
		 (this->_constructorid == Update::ctorUpdateChatParticipantDelete) ||
		 (this->_constructorid == Update::ctorUpdateDcOptions) ||
		 (this->_constructorid == Update::ctorUpdateUserBlocked) ||
		 (this->_constructorid == Update::ctorUpdateNotifySettings) ||
		 (this->_constructorid == Update::ctorUpdateServiceNotification) ||
		 (this->_constructorid == Update::ctorUpdatePrivacy) ||
		 (this->_constructorid == Update::ctorUpdateUserPhone) ||
		 (this->_constructorid == Update::ctorUpdateReadHistoryInbox) ||
		 (this->_constructorid == Update::ctorUpdateReadHistoryOutbox) ||
		 (this->_constructorid == Update::ctorUpdateWebPage) ||
		 (this->_constructorid == Update::ctorUpdateReadMessagesContents) ||
		 (this->_constructorid == Update::ctorUpdateChannelTooLong) ||
		 (this->_constructorid == Update::ctorUpdateChannel) ||
		 (this->_constructorid == Update::ctorUpdateNewChannelMessage) ||
		 (this->_constructorid == Update::ctorUpdateReadChannelInbox) ||
		 (this->_constructorid == Update::ctorUpdateDeleteChannelMessages) ||
		 (this->_constructorid == Update::ctorUpdateChannelMessageViews) ||
		 (this->_constructorid == Update::ctorUpdateChatAdmins) ||
		 (this->_constructorid == Update::ctorUpdateChatParticipantAdmin) ||
		 (this->_constructorid == Update::ctorUpdateNewStickerSet) ||
		 (this->_constructorid == Update::ctorUpdateStickerSetsOrder) ||
		 (this->_constructorid == Update::ctorUpdateStickerSets) ||
		 (this->_constructorid == Update::ctorUpdateSavedGifs) ||
		 (this->_constructorid == Update::ctorUpdateBotInlineQuery) ||
		 (this->_constructorid == Update::ctorUpdateBotInlineSend) ||
		 (this->_constructorid == Update::ctorUpdateEditChannelMessage) ||
		 (this->_constructorid == Update::ctorUpdateChannelPinnedMessage) ||
		 (this->_constructorid == Update::ctorUpdateBotCallbackQuery) ||
		 (this->_constructorid == Update::ctorUpdateEditMessage) ||
		 (this->_constructorid == Update::ctorUpdateInlineBotCallbackQuery) ||
		 (this->_constructorid == Update::ctorUpdateReadChannelOutbox) ||
		 (this->_constructorid == Update::ctorUpdateDraftMessage) ||
		 (this->_constructorid == Update::ctorUpdateReadFeaturedStickers) ||
		 (this->_constructorid == Update::ctorUpdateRecentStickers) ||
		 (this->_constructorid == Update::ctorUpdateConfig) ||
		 (this->_constructorid == Update::ctorUpdatePtsChanged));
	
	if(this->_constructorid == Update::ctorUpdateNewMessage)
	{
		RESET_TLTYPE(Message, this->_message_updatenewmessage);
		this->_message_updatenewmessage->read(mtstream);
		this->_pts = mtstream->readTLInt();
		this->_pts_count = mtstream->readTLInt();
	}
	else if(this->_constructorid == Update::ctorUpdateMessageID)
	{
		this->_id_updatemessageid = mtstream->readTLInt();
		this->_random_id = mtstream->readTLLong();
	}
	else if(this->_constructorid == Update::ctorUpdateDeleteMessages)
	{
		mtstream->readTLVector<TLInt>(this->_messages, false);
		this->_pts = mtstream->readTLInt();
		this->_pts_count = mtstream->readTLInt();
	}
	else if(this->_constructorid == Update::ctorUpdateUserTyping)
	{
		this->_user_id = mtstream->readTLInt();
		RESET_TLTYPE(SendMessageAction, this->_action);
		this->_action->read(mtstream);
	}
	else if(this->_constructorid == Update::ctorUpdateChatUserTyping)
	{
		this->_chat_id = mtstream->readTLInt();
		this->_user_id = mtstream->readTLInt();
		RESET_TLTYPE(SendMessageAction, this->_action);
		this->_action->read(mtstream);
	}
	else if(this->_constructorid == Update::ctorUpdateChatParticipants)
	{
		RESET_TLTYPE(ChatParticipants, this->_participants);
		this->_participants->read(mtstream);
	}
	else if(this->_constructorid == Update::ctorUpdateUserStatus)
	{
		this->_user_id = mtstream->readTLInt();
		RESET_TLTYPE(UserStatus, this->_status);
		this->_status->read(mtstream);
	}
	else if(this->_constructorid == Update::ctorUpdateUserName)
	{
		this->_user_id = mtstream->readTLInt();
		this->_first_name = mtstream->readTLString();
		this->_last_name = mtstream->readTLString();
		this->_username = mtstream->readTLString();
	}
	else if(this->_constructorid == Update::ctorUpdateUserPhoto)
	{
		this->_user_id = mtstream->readTLInt();
		this->_date = mtstream->readTLInt();
		RESET_TLTYPE(UserProfilePhoto, this->_photo);
		this->_photo->read(mtstream);
		this->_is_previous = mtstream->readTLBool();
	}
	else if(this->_constructorid == Update::ctorUpdateContactRegistered)
	{
		this->_user_id = mtstream->readTLInt();
		this->_date = mtstream->readTLInt();
	}
	else if(this->_constructorid == Update::ctorUpdateContactLink)
	{
		this->_user_id = mtstream->readTLInt();
		RESET_TLTYPE(ContactLink, this->_my_link);
		this->_my_link->read(mtstream);
		RESET_TLTYPE(ContactLink, this->_foreign_link);
		this->_foreign_link->read(mtstream);
	}
	else if(this->_constructorid == Update::ctorUpdateNewAuthorization)
	{
		this->_auth_key_id = mtstream->readTLLong();
		this->_date = mtstream->readTLInt();
		this->_device = mtstream->readTLString();
		this->_location = mtstream->readTLString();
	}
	else if(this->_constructorid == Update::ctorUpdateNewEncryptedMessage)
	{
		RESET_TLTYPE(EncryptedMessage, this->_message_updatenewencryptedmessage);
		this->_message_updatenewencryptedmessage->read(mtstream);
		this->_qts = mtstream->readTLInt();
	}
	else if(this->_constructorid == Update::ctorUpdateEncryptedChatTyping)
		this->_chat_id = mtstream->readTLInt();
	else if(this->_constructorid == Update::ctorUpdateEncryption)
	{
		RESET_TLTYPE(EncryptedChat, this->_chat);
		this->_chat->read(mtstream);
		this->_date = mtstream->readTLInt();
	}
	else if(this->_constructorid == Update::ctorUpdateEncryptedMessagesRead)
	{
		this->_chat_id = mtstream->readTLInt();
		this->_max_date = mtstream->readTLInt();
		this->_date = mtstream->readTLInt();
	}
	else if(this->_constructorid == Update::ctorUpdateChatParticipantAdd)
	{
		this->_chat_id = mtstream->readTLInt();
		this->_user_id = mtstream->readTLInt();
		this->_inviter_id = mtstream->readTLInt();
		this->_date = mtstream->readTLInt();
		this->_version = mtstream->readTLInt();
	}
	else if(this->_constructorid == Update::ctorUpdateChatParticipantDelete)
	{
		this->_chat_id = mtstream->readTLInt();
		this->_user_id = mtstream->readTLInt();
		this->_version = mtstream->readTLInt();
	}
	else if(this->_constructorid == Update::ctorUpdateDcOptions)
		mtstream->readTLVector<DcOption>(this->_dc_options, false);
	else if(this->_constructorid == Update::ctorUpdateUserBlocked)
	{
		this->_user_id = mtstream->readTLInt();
		this->_is_blocked = mtstream->readTLBool();
	}
	else if(this->_constructorid == Update::ctorUpdateNotifySettings)
	{
		RESET_TLTYPE(NotifyPeer, this->_peer_updatenotifysettings);
		this->_peer_updatenotifysettings->read(mtstream);
		RESET_TLTYPE(PeerNotifySettings, this->_notify_settings);
		this->_notify_settings->read(mtstream);
	}
	else if(this->_constructorid == Update::ctorUpdateServiceNotification)
	{
		this->_type = mtstream->readTLString();
		this->_message_updateservicenotification = mtstream->readTLString();
		RESET_TLTYPE(MessageMedia, this->_media);
		this->_media->read(mtstream);
		this->_is_popup = mtstream->readTLBool();
	}
	else if(this->_constructorid == Update::ctorUpdatePrivacy)
	{
		RESET_TLTYPE(PrivacyKey, this->_key);
		this->_key->read(mtstream);
		mtstream->readTLVector<PrivacyRule>(this->_rules, false);
	}
	else if(this->_constructorid == Update::ctorUpdateUserPhone)
	{
		this->_user_id = mtstream->readTLInt();
		this->_phone = mtstream->readTLString();
	}
	else if(this->_constructorid == Update::ctorUpdateReadHistoryInbox)
	{
		RESET_TLTYPE(Peer, this->_peer_updatereadhistoryinbox);
		this->_peer_updatereadhistoryinbox->read(mtstream);
		this->_max_id = mtstream->readTLInt();
		this->_pts = mtstream->readTLInt();
		this->_pts_count = mtstream->readTLInt();
	}
	else if(this->_constructorid == Update::ctorUpdateReadHistoryOutbox)
	{
		RESET_TLTYPE(Peer, this->_peer);
		this->_peer->read(mtstream);
		this->_max_id = mtstream->readTLInt();
		this->_pts = mtstream->readTLInt();
		this->_pts_count = mtstream->readTLInt();
	}
	else if(this->_constructorid == Update::ctorUpdateWebPage)
	{
		RESET_TLTYPE(WebPage, this->_webpage);
		this->_webpage->read(mtstream);
		this->_pts = mtstream->readTLInt();
		this->_pts_count = mtstream->readTLInt();
	}
	else if(this->_constructorid == Update::ctorUpdateReadMessagesContents)
	{
		mtstream->readTLVector<TLInt>(this->_messages, false);
		this->_pts = mtstream->readTLInt();
		this->_pts_count = mtstream->readTLInt();
	}
	else if(this->_constructorid == Update::ctorUpdateChannelTooLong)
	{
		this->_flags = mtstream->readTLInt();
		this->_channel_id = mtstream->readTLInt();
		if(IS_FLAG_SET(this->_flags, 0))
			this->_pts = mtstream->readTLInt();
	}
	else if(this->_constructorid == Update::ctorUpdateChannel)
		this->_channel_id = mtstream->readTLInt();
	else if(this->_constructorid == Update::ctorUpdateNewChannelMessage)
	{
		RESET_TLTYPE(Message, this->_message_updatenewchannelmessage);
		this->_message_updatenewchannelmessage->read(mtstream);
		this->_pts = mtstream->readTLInt();
		this->_pts_count = mtstream->readTLInt();
	}
	else if(this->_constructorid == Update::ctorUpdateReadChannelInbox)
	{
		this->_channel_id = mtstream->readTLInt();
		this->_max_id = mtstream->readTLInt();
	}
	else if(this->_constructorid == Update::ctorUpdateDeleteChannelMessages)
	{
		this->_channel_id = mtstream->readTLInt();
		mtstream->readTLVector<TLInt>(this->_messages, false);
		this->_pts = mtstream->readTLInt();
		this->_pts_count = mtstream->readTLInt();
	}
	else if(this->_constructorid == Update::ctorUpdateChannelMessageViews)
	{
		this->_channel_id = mtstream->readTLInt();
		this->_id = mtstream->readTLInt();
		this->_views = mtstream->readTLInt();
	}
	else if(this->_constructorid == Update::ctorUpdateChatAdmins)
	{
		this->_chat_id = mtstream->readTLInt();
		this->_is_enabled = mtstream->readTLBool();
		this->_version = mtstream->readTLInt();
	}
	else if(this->_constructorid == Update::ctorUpdateChatParticipantAdmin)
	{
		this->_chat_id = mtstream->readTLInt();
		this->_user_id = mtstream->readTLInt();
		this->_is_admin = mtstream->readTLBool();
		this->_version = mtstream->readTLInt();
	}
	else if(this->_constructorid == Update::ctorUpdateNewStickerSet)
	{
		RESET_TLTYPE(MessagesStickerSet, this->_stickerset);
		this->_stickerset->read(mtstream);
	}
	else if(this->_constructorid == Update::ctorUpdateStickerSetsOrder)
	{
		this->_flags = mtstream->readTLInt();
		this->_is_masks = IS_FLAG_SET(this->_flags, 0);
		mtstream->readTLVector<TLLong>(this->_order, false);
	}
	else if(this->_constructorid == Update::ctorUpdateBotInlineQuery)
	{
		this->_flags = mtstream->readTLInt();
		this->_query_id = mtstream->readTLLong();
		this->_user_id = mtstream->readTLInt();
		this->_query = mtstream->readTLString();
		if(IS_FLAG_SET(this->_flags, 0))
		{
			RESET_TLTYPE(GeoPoint, this->_geo);
			this->_geo->read(mtstream);
		}
		
		this->_offset = mtstream->readTLString();
	}
	else if(this->_constructorid == Update::ctorUpdateBotInlineSend)
	{
		this->_flags = mtstream->readTLInt();
		this->_user_id = mtstream->readTLInt();
		this->_query = mtstream->readTLString();
		if(IS_FLAG_SET(this->_flags, 0))
		{
			RESET_TLTYPE(GeoPoint, this->_geo);
			this->_geo->read(mtstream);
		}
		
		this->_id_updatebotinlinesend = mtstream->readTLString();
		if(IS_FLAG_SET(this->_flags, 1))
		{
			RESET_TLTYPE(InputBotInlineMessageID, this->_msg_id_updatebotinlinesend);
			this->_msg_id_updatebotinlinesend->read(mtstream);
		}
	}
	else if(this->_constructorid == Update::ctorUpdateEditChannelMessage)
	{
		RESET_TLTYPE(Message, this->_message);
		this->_message->read(mtstream);
		this->_pts = mtstream->readTLInt();
		this->_pts_count = mtstream->readTLInt();
	}
	else if(this->_constructorid == Update::ctorUpdateChannelPinnedMessage)
	{
		this->_channel_id = mtstream->readTLInt();
		this->_id_updatechannelpinnedmessage = mtstream->readTLInt();
	}
	else if(this->_constructorid == Update::ctorUpdateBotCallbackQuery)
	{
		this->_flags = mtstream->readTLInt();
		this->_query_id = mtstream->readTLLong();
		this->_user_id = mtstream->readTLInt();
		RESET_TLTYPE(Peer, this->_peer);
		this->_peer->read(mtstream);
		this->_msg_id_updatebotcallbackquery = mtstream->readTLInt();
		this->_chat_instance = mtstream->readTLLong();
		if(IS_FLAG_SET(this->_flags, 0))
			this->_data = mtstream->readTLBytes();
		
		if(IS_FLAG_SET(this->_flags, 1))
			this->_game_short_name = mtstream->readTLString();
	}
	else if(this->_constructorid == Update::ctorUpdateEditMessage)
	{
		RESET_TLTYPE(Message, this->_message);
		this->_message->read(mtstream);
		this->_pts = mtstream->readTLInt();
		this->_pts_count = mtstream->readTLInt();
	}
	else if(this->_constructorid == Update::ctorUpdateInlineBotCallbackQuery)
	{
		this->_flags = mtstream->readTLInt();
		this->_query_id = mtstream->readTLLong();
		this->_user_id = mtstream->readTLInt();
		RESET_TLTYPE(InputBotInlineMessageID, this->_msg_id_updateinlinebotcallbackquery);
		this->_msg_id_updateinlinebotcallbackquery->read(mtstream);
		this->_chat_instance = mtstream->readTLLong();
		if(IS_FLAG_SET(this->_flags, 0))
			this->_data = mtstream->readTLBytes();
		
		if(IS_FLAG_SET(this->_flags, 1))
			this->_game_short_name = mtstream->readTLString();
	}
	else if(this->_constructorid == Update::ctorUpdateReadChannelOutbox)
	{
		this->_channel_id = mtstream->readTLInt();
		this->_max_id = mtstream->readTLInt();
	}
	else if(this->_constructorid == Update::ctorUpdateDraftMessage)
	{
		RESET_TLTYPE(Peer, this->_peer);
		this->_peer->read(mtstream);
		RESET_TLTYPE(DraftMessage, this->_draft);
		this->_draft->read(mtstream);
	}
}

void Update::write(MTProtoStream* mtstream) 
{
	Q_ASSERT((this->_constructorid == Update::ctorUpdateNewMessage) ||
		 (this->_constructorid == Update::ctorUpdateMessageID) ||
		 (this->_constructorid == Update::ctorUpdateDeleteMessages) ||
		 (this->_constructorid == Update::ctorUpdateUserTyping) ||
		 (this->_constructorid == Update::ctorUpdateChatUserTyping) ||
		 (this->_constructorid == Update::ctorUpdateChatParticipants) ||
		 (this->_constructorid == Update::ctorUpdateUserStatus) ||
		 (this->_constructorid == Update::ctorUpdateUserName) ||
		 (this->_constructorid == Update::ctorUpdateUserPhoto) ||
		 (this->_constructorid == Update::ctorUpdateContactRegistered) ||
		 (this->_constructorid == Update::ctorUpdateContactLink) ||
		 (this->_constructorid == Update::ctorUpdateNewAuthorization) ||
		 (this->_constructorid == Update::ctorUpdateNewEncryptedMessage) ||
		 (this->_constructorid == Update::ctorUpdateEncryptedChatTyping) ||
		 (this->_constructorid == Update::ctorUpdateEncryption) ||
		 (this->_constructorid == Update::ctorUpdateEncryptedMessagesRead) ||
		 (this->_constructorid == Update::ctorUpdateChatParticipantAdd) ||
		 (this->_constructorid == Update::ctorUpdateChatParticipantDelete) ||
		 (this->_constructorid == Update::ctorUpdateDcOptions) ||
		 (this->_constructorid == Update::ctorUpdateUserBlocked) ||
		 (this->_constructorid == Update::ctorUpdateNotifySettings) ||
		 (this->_constructorid == Update::ctorUpdateServiceNotification) ||
		 (this->_constructorid == Update::ctorUpdatePrivacy) ||
		 (this->_constructorid == Update::ctorUpdateUserPhone) ||
		 (this->_constructorid == Update::ctorUpdateReadHistoryInbox) ||
		 (this->_constructorid == Update::ctorUpdateReadHistoryOutbox) ||
		 (this->_constructorid == Update::ctorUpdateWebPage) ||
		 (this->_constructorid == Update::ctorUpdateReadMessagesContents) ||
		 (this->_constructorid == Update::ctorUpdateChannelTooLong) ||
		 (this->_constructorid == Update::ctorUpdateChannel) ||
		 (this->_constructorid == Update::ctorUpdateNewChannelMessage) ||
		 (this->_constructorid == Update::ctorUpdateReadChannelInbox) ||
		 (this->_constructorid == Update::ctorUpdateDeleteChannelMessages) ||
		 (this->_constructorid == Update::ctorUpdateChannelMessageViews) ||
		 (this->_constructorid == Update::ctorUpdateChatAdmins) ||
		 (this->_constructorid == Update::ctorUpdateChatParticipantAdmin) ||
		 (this->_constructorid == Update::ctorUpdateNewStickerSet) ||
		 (this->_constructorid == Update::ctorUpdateStickerSetsOrder) ||
		 (this->_constructorid == Update::ctorUpdateStickerSets) ||
		 (this->_constructorid == Update::ctorUpdateSavedGifs) ||
		 (this->_constructorid == Update::ctorUpdateBotInlineQuery) ||
		 (this->_constructorid == Update::ctorUpdateBotInlineSend) ||
		 (this->_constructorid == Update::ctorUpdateEditChannelMessage) ||
		 (this->_constructorid == Update::ctorUpdateChannelPinnedMessage) ||
		 (this->_constructorid == Update::ctorUpdateBotCallbackQuery) ||
		 (this->_constructorid == Update::ctorUpdateEditMessage) ||
		 (this->_constructorid == Update::ctorUpdateInlineBotCallbackQuery) ||
		 (this->_constructorid == Update::ctorUpdateReadChannelOutbox) ||
		 (this->_constructorid == Update::ctorUpdateDraftMessage) ||
		 (this->_constructorid == Update::ctorUpdateReadFeaturedStickers) ||
		 (this->_constructorid == Update::ctorUpdateRecentStickers) ||
		 (this->_constructorid == Update::ctorUpdateConfig) ||
		 (this->_constructorid == Update::ctorUpdatePtsChanged));
	
	this->compileFlags();
	mtstream->writeTLConstructor(this->_constructorid);
	
	if(this->_constructorid == Update::ctorUpdateNewMessage)
	{
		Q_ASSERT(this->_message_updatenewmessage != NULL);
		this->_message_updatenewmessage->write(mtstream);
		mtstream->writeTLInt(this->_pts);
		mtstream->writeTLInt(this->_pts_count);
	}
	else if(this->_constructorid == Update::ctorUpdateMessageID)
	{
		mtstream->writeTLInt(this->_id_updatemessageid);
		mtstream->writeTLLong(this->_random_id);
	}
	else if(this->_constructorid == Update::ctorUpdateDeleteMessages)
	{
		mtstream->writeTLVector(this->_messages, false);
		mtstream->writeTLInt(this->_pts);
		mtstream->writeTLInt(this->_pts_count);
	}
	else if(this->_constructorid == Update::ctorUpdateUserTyping)
	{
		mtstream->writeTLInt(this->_user_id);
		Q_ASSERT(this->_action != NULL);
		this->_action->write(mtstream);
	}
	else if(this->_constructorid == Update::ctorUpdateChatUserTyping)
	{
		mtstream->writeTLInt(this->_chat_id);
		mtstream->writeTLInt(this->_user_id);
		Q_ASSERT(this->_action != NULL);
		this->_action->write(mtstream);
	}
	else if(this->_constructorid == Update::ctorUpdateChatParticipants)
	{
		Q_ASSERT(this->_participants != NULL);
		this->_participants->write(mtstream);
	}
	else if(this->_constructorid == Update::ctorUpdateUserStatus)
	{
		mtstream->writeTLInt(this->_user_id);
		Q_ASSERT(this->_status != NULL);
		this->_status->write(mtstream);
	}
	else if(this->_constructorid == Update::ctorUpdateUserName)
	{
		mtstream->writeTLInt(this->_user_id);
		mtstream->writeTLString(this->_first_name);
		mtstream->writeTLString(this->_last_name);
		mtstream->writeTLString(this->_username);
	}
	else if(this->_constructorid == Update::ctorUpdateUserPhoto)
	{
		mtstream->writeTLInt(this->_user_id);
		mtstream->writeTLInt(this->_date);
		Q_ASSERT(this->_photo != NULL);
		this->_photo->write(mtstream);
		mtstream->writeTLBool(this->_is_previous);
	}
	else if(this->_constructorid == Update::ctorUpdateContactRegistered)
	{
		mtstream->writeTLInt(this->_user_id);
		mtstream->writeTLInt(this->_date);
	}
	else if(this->_constructorid == Update::ctorUpdateContactLink)
	{
		mtstream->writeTLInt(this->_user_id);
		Q_ASSERT(this->_my_link != NULL);
		this->_my_link->write(mtstream);
		Q_ASSERT(this->_foreign_link != NULL);
		this->_foreign_link->write(mtstream);
	}
	else if(this->_constructorid == Update::ctorUpdateNewAuthorization)
	{
		mtstream->writeTLLong(this->_auth_key_id);
		mtstream->writeTLInt(this->_date);
		mtstream->writeTLString(this->_device);
		mtstream->writeTLString(this->_location);
	}
	else if(this->_constructorid == Update::ctorUpdateNewEncryptedMessage)
	{
		Q_ASSERT(this->_message_updatenewencryptedmessage != NULL);
		this->_message_updatenewencryptedmessage->write(mtstream);
		mtstream->writeTLInt(this->_qts);
	}
	else if(this->_constructorid == Update::ctorUpdateEncryptedChatTyping)
		mtstream->writeTLInt(this->_chat_id);
	else if(this->_constructorid == Update::ctorUpdateEncryption)
	{
		Q_ASSERT(this->_chat != NULL);
		this->_chat->write(mtstream);
		mtstream->writeTLInt(this->_date);
	}
	else if(this->_constructorid == Update::ctorUpdateEncryptedMessagesRead)
	{
		mtstream->writeTLInt(this->_chat_id);
		mtstream->writeTLInt(this->_max_date);
		mtstream->writeTLInt(this->_date);
	}
	else if(this->_constructorid == Update::ctorUpdateChatParticipantAdd)
	{
		mtstream->writeTLInt(this->_chat_id);
		mtstream->writeTLInt(this->_user_id);
		mtstream->writeTLInt(this->_inviter_id);
		mtstream->writeTLInt(this->_date);
		mtstream->writeTLInt(this->_version);
	}
	else if(this->_constructorid == Update::ctorUpdateChatParticipantDelete)
	{
		mtstream->writeTLInt(this->_chat_id);
		mtstream->writeTLInt(this->_user_id);
		mtstream->writeTLInt(this->_version);
	}
	else if(this->_constructorid == Update::ctorUpdateDcOptions)
		mtstream->writeTLVector(this->_dc_options, false);
	else if(this->_constructorid == Update::ctorUpdateUserBlocked)
	{
		mtstream->writeTLInt(this->_user_id);
		mtstream->writeTLBool(this->_is_blocked);
	}
	else if(this->_constructorid == Update::ctorUpdateNotifySettings)
	{
		Q_ASSERT(this->_peer_updatenotifysettings != NULL);
		this->_peer_updatenotifysettings->write(mtstream);
		Q_ASSERT(this->_notify_settings != NULL);
		this->_notify_settings->write(mtstream);
	}
	else if(this->_constructorid == Update::ctorUpdateServiceNotification)
	{
		mtstream->writeTLString(this->_type);
		mtstream->writeTLString(this->_message_updateservicenotification);
		Q_ASSERT(this->_media != NULL);
		this->_media->write(mtstream);
		mtstream->writeTLBool(this->_is_popup);
	}
	else if(this->_constructorid == Update::ctorUpdatePrivacy)
	{
		Q_ASSERT(this->_key != NULL);
		this->_key->write(mtstream);
		mtstream->writeTLVector(this->_rules, false);
	}
	else if(this->_constructorid == Update::ctorUpdateUserPhone)
	{
		mtstream->writeTLInt(this->_user_id);
		mtstream->writeTLString(this->_phone);
	}
	else if(this->_constructorid == Update::ctorUpdateReadHistoryInbox)
	{
		Q_ASSERT(this->_peer_updatereadhistoryinbox != NULL);
		this->_peer_updatereadhistoryinbox->write(mtstream);
		mtstream->writeTLInt(this->_max_id);
		mtstream->writeTLInt(this->_pts);
		mtstream->writeTLInt(this->_pts_count);
	}
	else if(this->_constructorid == Update::ctorUpdateReadHistoryOutbox)
	{
		Q_ASSERT(this->_peer != NULL);
		this->_peer->write(mtstream);
		mtstream->writeTLInt(this->_max_id);
		mtstream->writeTLInt(this->_pts);
		mtstream->writeTLInt(this->_pts_count);
	}
	else if(this->_constructorid == Update::ctorUpdateWebPage)
	{
		Q_ASSERT(this->_webpage != NULL);
		this->_webpage->write(mtstream);
		mtstream->writeTLInt(this->_pts);
		mtstream->writeTLInt(this->_pts_count);
	}
	else if(this->_constructorid == Update::ctorUpdateReadMessagesContents)
	{
		mtstream->writeTLVector(this->_messages, false);
		mtstream->writeTLInt(this->_pts);
		mtstream->writeTLInt(this->_pts_count);
	}
	else if(this->_constructorid == Update::ctorUpdateChannelTooLong)
	{
		mtstream->writeTLInt(this->_flags);
		mtstream->writeTLInt(this->_channel_id);
		if(IS_FLAG_SET(this->_flags, 0))
			mtstream->writeTLInt(this->_pts);
	}
	else if(this->_constructorid == Update::ctorUpdateChannel)
		mtstream->writeTLInt(this->_channel_id);
	else if(this->_constructorid == Update::ctorUpdateNewChannelMessage)
	{
		Q_ASSERT(this->_message_updatenewchannelmessage != NULL);
		this->_message_updatenewchannelmessage->write(mtstream);
		mtstream->writeTLInt(this->_pts);
		mtstream->writeTLInt(this->_pts_count);
	}
	else if(this->_constructorid == Update::ctorUpdateReadChannelInbox)
	{
		mtstream->writeTLInt(this->_channel_id);
		mtstream->writeTLInt(this->_max_id);
	}
	else if(this->_constructorid == Update::ctorUpdateDeleteChannelMessages)
	{
		mtstream->writeTLInt(this->_channel_id);
		mtstream->writeTLVector(this->_messages, false);
		mtstream->writeTLInt(this->_pts);
		mtstream->writeTLInt(this->_pts_count);
	}
	else if(this->_constructorid == Update::ctorUpdateChannelMessageViews)
	{
		mtstream->writeTLInt(this->_channel_id);
		mtstream->writeTLInt(this->_id);
		mtstream->writeTLInt(this->_views);
	}
	else if(this->_constructorid == Update::ctorUpdateChatAdmins)
	{
		mtstream->writeTLInt(this->_chat_id);
		mtstream->writeTLBool(this->_is_enabled);
		mtstream->writeTLInt(this->_version);
	}
	else if(this->_constructorid == Update::ctorUpdateChatParticipantAdmin)
	{
		mtstream->writeTLInt(this->_chat_id);
		mtstream->writeTLInt(this->_user_id);
		mtstream->writeTLBool(this->_is_admin);
		mtstream->writeTLInt(this->_version);
	}
	else if(this->_constructorid == Update::ctorUpdateNewStickerSet)
	{
		Q_ASSERT(this->_stickerset != NULL);
		this->_stickerset->write(mtstream);
	}
	else if(this->_constructorid == Update::ctorUpdateStickerSetsOrder)
	{
		mtstream->writeTLInt(this->_flags);
		mtstream->writeTLVector(this->_order, false);
	}
	else if(this->_constructorid == Update::ctorUpdateBotInlineQuery)
	{
		mtstream->writeTLInt(this->_flags);
		mtstream->writeTLLong(this->_query_id);
		mtstream->writeTLInt(this->_user_id);
		mtstream->writeTLString(this->_query);
		if(IS_FLAG_SET(this->_flags, 0))
		{
			Q_ASSERT(this->_geo != NULL);
			this->_geo->write(mtstream);
		}
		
		mtstream->writeTLString(this->_offset);
	}
	else if(this->_constructorid == Update::ctorUpdateBotInlineSend)
	{
		mtstream->writeTLInt(this->_flags);
		mtstream->writeTLInt(this->_user_id);
		mtstream->writeTLString(this->_query);
		if(IS_FLAG_SET(this->_flags, 0))
		{
			Q_ASSERT(this->_geo != NULL);
			this->_geo->write(mtstream);
		}
		
		mtstream->writeTLString(this->_id_updatebotinlinesend);
		if(IS_FLAG_SET(this->_flags, 1))
		{
			Q_ASSERT(this->_msg_id_updatebotinlinesend != NULL);
			this->_msg_id_updatebotinlinesend->write(mtstream);
		}
	}
	else if(this->_constructorid == Update::ctorUpdateEditChannelMessage)
	{
		Q_ASSERT(this->_message != NULL);
		this->_message->write(mtstream);
		mtstream->writeTLInt(this->_pts);
		mtstream->writeTLInt(this->_pts_count);
	}
	else if(this->_constructorid == Update::ctorUpdateChannelPinnedMessage)
	{
		mtstream->writeTLInt(this->_channel_id);
		mtstream->writeTLInt(this->_id_updatechannelpinnedmessage);
	}
	else if(this->_constructorid == Update::ctorUpdateBotCallbackQuery)
	{
		mtstream->writeTLInt(this->_flags);
		mtstream->writeTLLong(this->_query_id);
		mtstream->writeTLInt(this->_user_id);
		Q_ASSERT(this->_peer != NULL);
		this->_peer->write(mtstream);
		mtstream->writeTLInt(this->_msg_id_updatebotcallbackquery);
		mtstream->writeTLLong(this->_chat_instance);
		if(IS_FLAG_SET(this->_flags, 0))
			mtstream->writeTLBytes(this->_data);
		
		if(IS_FLAG_SET(this->_flags, 1))
			mtstream->writeTLString(this->_game_short_name);
	}
	else if(this->_constructorid == Update::ctorUpdateEditMessage)
	{
		Q_ASSERT(this->_message != NULL);
		this->_message->write(mtstream);
		mtstream->writeTLInt(this->_pts);
		mtstream->writeTLInt(this->_pts_count);
	}
	else if(this->_constructorid == Update::ctorUpdateInlineBotCallbackQuery)
	{
		mtstream->writeTLInt(this->_flags);
		mtstream->writeTLLong(this->_query_id);
		mtstream->writeTLInt(this->_user_id);
		Q_ASSERT(this->_msg_id_updateinlinebotcallbackquery != NULL);
		this->_msg_id_updateinlinebotcallbackquery->write(mtstream);
		mtstream->writeTLLong(this->_chat_instance);
		if(IS_FLAG_SET(this->_flags, 0))
			mtstream->writeTLBytes(this->_data);
		
		if(IS_FLAG_SET(this->_flags, 1))
			mtstream->writeTLString(this->_game_short_name);
	}
	else if(this->_constructorid == Update::ctorUpdateReadChannelOutbox)
	{
		mtstream->writeTLInt(this->_channel_id);
		mtstream->writeTLInt(this->_max_id);
	}
	else if(this->_constructorid == Update::ctorUpdateDraftMessage)
	{
		Q_ASSERT(this->_peer != NULL);
		this->_peer->write(mtstream);
		Q_ASSERT(this->_draft != NULL);
		this->_draft->write(mtstream);
	}
}

void Update::compileFlags() 
{
	this->_flags = 0;
	
	if(this->_constructorid == Update::ctorUpdateChannelTooLong)
	{
		if(this->_pts)
			SET_FLAG_BIT(this->_flags, 0);
	}
	else if(this->_constructorid == Update::ctorUpdateStickerSetsOrder)
	{
		if(this->_is_masks)
			SET_FLAG_BIT(this->_flags, 0);
	}
	else if(this->_constructorid == Update::ctorUpdateBotInlineQuery)
	{
		if(this->_geo)
			SET_FLAG_BIT(this->_flags, 0);
	}
	else if(this->_constructorid == Update::ctorUpdateBotInlineSend)
	{
		if(this->_geo)
			SET_FLAG_BIT(this->_flags, 0);
		if(this->_msg_id_updatebotinlinesend)
			SET_FLAG_BIT(this->_flags, 1);
	}
	else if(this->_constructorid == Update::ctorUpdateBotCallbackQuery)
	{
		if(!this->_data.isEmpty())
			SET_FLAG_BIT(this->_flags, 0);
		if(!this->_game_short_name.isEmpty())
			SET_FLAG_BIT(this->_flags, 1);
	}
	else if(this->_constructorid == Update::ctorUpdateInlineBotCallbackQuery)
	{
		if(!this->_data.isEmpty())
			SET_FLAG_BIT(this->_flags, 0);
		if(!this->_game_short_name.isEmpty())
			SET_FLAG_BIT(this->_flags, 1);
	}
}

Message* Update::messageUpdatenewmessage() const
{
	return this->_message_updatenewmessage;
}

void Update::setMessageUpdatenewmessage(Message* message_updatenewmessage) 
{
	if(this->_message_updatenewmessage == message_updatenewmessage)
		return;

	this->_message_updatenewmessage = message_updatenewmessage;
	emit messageUpdatenewmessageChanged();
}

TLInt Update::pts() const
{
	return this->_pts;
}

void Update::setPts(TLInt pts) 
{
	if(this->_pts == pts)
		return;

	this->_pts = pts;
	emit ptsChanged();
}

TLInt Update::ptsCount() const
{
	return this->_pts_count;
}

void Update::setPtsCount(TLInt pts_count) 
{
	if(this->_pts_count == pts_count)
		return;

	this->_pts_count = pts_count;
	emit ptsCountChanged();
}

TLInt Update::idUpdatemessageid() const
{
	return this->_id_updatemessageid;
}

void Update::setIdUpdatemessageid(TLInt id_updatemessageid) 
{
	if(this->_id_updatemessageid == id_updatemessageid)
		return;

	this->_id_updatemessageid = id_updatemessageid;
	emit idUpdatemessageidChanged();
}

TLLong Update::randomId() const
{
	return this->_random_id;
}

void Update::setRandomId(TLLong random_id) 
{
	if(this->_random_id == random_id)
		return;

	this->_random_id = random_id;
	emit randomIdChanged();
}

const TLVector<TLInt>& Update::messages() const
{
	return this->_messages;
}

void Update::setMessages(const TLVector<TLInt>& messages) 
{
	if(this->_messages == messages)
		return;

	this->_messages = messages;
	emit messagesChanged();
}

TLInt Update::userId() const
{
	return this->_user_id;
}

void Update::setUserId(TLInt user_id) 
{
	if(this->_user_id == user_id)
		return;

	this->_user_id = user_id;
	emit userIdChanged();
}

SendMessageAction* Update::action() const
{
	return this->_action;
}

void Update::setAction(SendMessageAction* action) 
{
	if(this->_action == action)
		return;

	this->_action = action;
	emit actionChanged();
}

TLInt Update::chatId() const
{
	return this->_chat_id;
}

void Update::setChatId(TLInt chat_id) 
{
	if(this->_chat_id == chat_id)
		return;

	this->_chat_id = chat_id;
	emit chatIdChanged();
}

ChatParticipants* Update::participants() const
{
	return this->_participants;
}

void Update::setParticipants(ChatParticipants* participants) 
{
	if(this->_participants == participants)
		return;

	this->_participants = participants;
	emit participantsChanged();
}

UserStatus* Update::status() const
{
	return this->_status;
}

void Update::setStatus(UserStatus* status) 
{
	if(this->_status == status)
		return;

	this->_status = status;
	emit statusChanged();
}

TLString Update::firstName() const
{
	return this->_first_name;
}

void Update::setFirstName(TLString first_name) 
{
	if(this->_first_name == first_name)
		return;

	this->_first_name = first_name;
	emit firstNameChanged();
}

TLString Update::lastName() const
{
	return this->_last_name;
}

void Update::setLastName(TLString last_name) 
{
	if(this->_last_name == last_name)
		return;

	this->_last_name = last_name;
	emit lastNameChanged();
}

TLString Update::username() const
{
	return this->_username;
}

void Update::setUsername(TLString username) 
{
	if(this->_username == username)
		return;

	this->_username = username;
	emit usernameChanged();
}

TLInt Update::date() const
{
	return this->_date;
}

void Update::setDate(TLInt date) 
{
	if(this->_date == date)
		return;

	this->_date = date;
	emit dateChanged();
}

UserProfilePhoto* Update::photo() const
{
	return this->_photo;
}

void Update::setPhoto(UserProfilePhoto* photo) 
{
	if(this->_photo == photo)
		return;

	this->_photo = photo;
	emit photoChanged();
}

TLBool Update::isPrevious() const
{
	return this->_is_previous;
}

void Update::setIsPrevious(TLBool is_previous) 
{
	if(this->_is_previous == is_previous)
		return;

	this->_is_previous = is_previous;
	emit isPreviousChanged();
}

ContactLink* Update::myLink() const
{
	return this->_my_link;
}

void Update::setMyLink(ContactLink* my_link) 
{
	if(this->_my_link == my_link)
		return;

	this->_my_link = my_link;
	emit myLinkChanged();
}

ContactLink* Update::foreignLink() const
{
	return this->_foreign_link;
}

void Update::setForeignLink(ContactLink* foreign_link) 
{
	if(this->_foreign_link == foreign_link)
		return;

	this->_foreign_link = foreign_link;
	emit foreignLinkChanged();
}

TLLong Update::authKeyId() const
{
	return this->_auth_key_id;
}

void Update::setAuthKeyId(TLLong auth_key_id) 
{
	if(this->_auth_key_id == auth_key_id)
		return;

	this->_auth_key_id = auth_key_id;
	emit authKeyIdChanged();
}

TLString Update::device() const
{
	return this->_device;
}

void Update::setDevice(TLString device) 
{
	if(this->_device == device)
		return;

	this->_device = device;
	emit deviceChanged();
}

TLString Update::location() const
{
	return this->_location;
}

void Update::setLocation(TLString location) 
{
	if(this->_location == location)
		return;

	this->_location = location;
	emit locationChanged();
}

EncryptedMessage* Update::messageUpdatenewencryptedmessage() const
{
	return this->_message_updatenewencryptedmessage;
}

void Update::setMessageUpdatenewencryptedmessage(EncryptedMessage* message_updatenewencryptedmessage) 
{
	if(this->_message_updatenewencryptedmessage == message_updatenewencryptedmessage)
		return;

	this->_message_updatenewencryptedmessage = message_updatenewencryptedmessage;
	emit messageUpdatenewencryptedmessageChanged();
}

TLInt Update::qts() const
{
	return this->_qts;
}

void Update::setQts(TLInt qts) 
{
	if(this->_qts == qts)
		return;

	this->_qts = qts;
	emit qtsChanged();
}

EncryptedChat* Update::chat() const
{
	return this->_chat;
}

void Update::setChat(EncryptedChat* chat) 
{
	if(this->_chat == chat)
		return;

	this->_chat = chat;
	emit chatChanged();
}

TLInt Update::maxDate() const
{
	return this->_max_date;
}

void Update::setMaxDate(TLInt max_date) 
{
	if(this->_max_date == max_date)
		return;

	this->_max_date = max_date;
	emit maxDateChanged();
}

TLInt Update::inviterId() const
{
	return this->_inviter_id;
}

void Update::setInviterId(TLInt inviter_id) 
{
	if(this->_inviter_id == inviter_id)
		return;

	this->_inviter_id = inviter_id;
	emit inviterIdChanged();
}

TLInt Update::version() const
{
	return this->_version;
}

void Update::setVersion(TLInt version) 
{
	if(this->_version == version)
		return;

	this->_version = version;
	emit versionChanged();
}

const TLVector<DcOption*>& Update::dcOptions() const
{
	return this->_dc_options;
}

void Update::setDcOptions(const TLVector<DcOption*>& dc_options) 
{
	if(this->_dc_options == dc_options)
		return;

	this->_dc_options = dc_options;
	emit dcOptionsChanged();
}

TLBool Update::isBlocked() const
{
	return this->_is_blocked;
}

void Update::setIsBlocked(TLBool is_blocked) 
{
	if(this->_is_blocked == is_blocked)
		return;

	this->_is_blocked = is_blocked;
	emit isBlockedChanged();
}

NotifyPeer* Update::peerUpdatenotifysettings() const
{
	return this->_peer_updatenotifysettings;
}

void Update::setPeerUpdatenotifysettings(NotifyPeer* peer_updatenotifysettings) 
{
	if(this->_peer_updatenotifysettings == peer_updatenotifysettings)
		return;

	this->_peer_updatenotifysettings = peer_updatenotifysettings;
	emit peerUpdatenotifysettingsChanged();
}

PeerNotifySettings* Update::notifySettings() const
{
	return this->_notify_settings;
}

void Update::setNotifySettings(PeerNotifySettings* notify_settings) 
{
	if(this->_notify_settings == notify_settings)
		return;

	this->_notify_settings = notify_settings;
	emit notifySettingsChanged();
}

TLString Update::type() const
{
	return this->_type;
}

void Update::setType(TLString type) 
{
	if(this->_type == type)
		return;

	this->_type = type;
	emit typeChanged();
}

TLString Update::messageUpdateservicenotification() const
{
	return this->_message_updateservicenotification;
}

void Update::setMessageUpdateservicenotification(TLString message_updateservicenotification) 
{
	if(this->_message_updateservicenotification == message_updateservicenotification)
		return;

	this->_message_updateservicenotification = message_updateservicenotification;
	emit messageUpdateservicenotificationChanged();
}

MessageMedia* Update::media() const
{
	return this->_media;
}

void Update::setMedia(MessageMedia* media) 
{
	if(this->_media == media)
		return;

	this->_media = media;
	emit mediaChanged();
}

TLBool Update::isPopup() const
{
	return this->_is_popup;
}

void Update::setIsPopup(TLBool is_popup) 
{
	if(this->_is_popup == is_popup)
		return;

	this->_is_popup = is_popup;
	emit isPopupChanged();
}

PrivacyKey* Update::key() const
{
	return this->_key;
}

void Update::setKey(PrivacyKey* key) 
{
	if(this->_key == key)
		return;

	this->_key = key;
	emit keyChanged();
}

const TLVector<PrivacyRule*>& Update::rules() const
{
	return this->_rules;
}

void Update::setRules(const TLVector<PrivacyRule*>& rules) 
{
	if(this->_rules == rules)
		return;

	this->_rules = rules;
	emit rulesChanged();
}

TLString Update::phone() const
{
	return this->_phone;
}

void Update::setPhone(TLString phone) 
{
	if(this->_phone == phone)
		return;

	this->_phone = phone;
	emit phoneChanged();
}

Peer* Update::peerUpdatereadhistoryinbox() const
{
	return this->_peer_updatereadhistoryinbox;
}

void Update::setPeerUpdatereadhistoryinbox(Peer* peer_updatereadhistoryinbox) 
{
	if(this->_peer_updatereadhistoryinbox == peer_updatereadhistoryinbox)
		return;

	this->_peer_updatereadhistoryinbox = peer_updatereadhistoryinbox;
	emit peerUpdatereadhistoryinboxChanged();
}

TLInt Update::maxId() const
{
	return this->_max_id;
}

void Update::setMaxId(TLInt max_id) 
{
	if(this->_max_id == max_id)
		return;

	this->_max_id = max_id;
	emit maxIdChanged();
}

Peer* Update::peer() const
{
	return this->_peer;
}

void Update::setPeer(Peer* peer) 
{
	if(this->_peer == peer)
		return;

	this->_peer = peer;
	emit peerChanged();
}

WebPage* Update::webpage() const
{
	return this->_webpage;
}

void Update::setWebpage(WebPage* webpage) 
{
	if(this->_webpage == webpage)
		return;

	this->_webpage = webpage;
	emit webpageChanged();
}

TLInt Update::flags() const
{
	return this->_flags;
}

void Update::setFlags(TLInt flags) 
{
	if(this->_flags == flags)
		return;

	this->_flags = flags;
	emit flagsChanged();
}

TLInt Update::channelId() const
{
	return this->_channel_id;
}

void Update::setChannelId(TLInt channel_id) 
{
	if(this->_channel_id == channel_id)
		return;

	this->_channel_id = channel_id;
	emit channelIdChanged();
}

Message* Update::messageUpdatenewchannelmessage() const
{
	return this->_message_updatenewchannelmessage;
}

void Update::setMessageUpdatenewchannelmessage(Message* message_updatenewchannelmessage) 
{
	if(this->_message_updatenewchannelmessage == message_updatenewchannelmessage)
		return;

	this->_message_updatenewchannelmessage = message_updatenewchannelmessage;
	emit messageUpdatenewchannelmessageChanged();
}

TLInt Update::id() const
{
	return this->_id;
}

void Update::setId(TLInt id) 
{
	if(this->_id == id)
		return;

	this->_id = id;
	emit idChanged();
}

TLInt Update::views() const
{
	return this->_views;
}

void Update::setViews(TLInt views) 
{
	if(this->_views == views)
		return;

	this->_views = views;
	emit viewsChanged();
}

TLBool Update::isEnabled() const
{
	return this->_is_enabled;
}

void Update::setIsEnabled(TLBool is_enabled) 
{
	if(this->_is_enabled == is_enabled)
		return;

	this->_is_enabled = is_enabled;
	emit isEnabledChanged();
}

TLBool Update::isAdmin() const
{
	return this->_is_admin;
}

void Update::setIsAdmin(TLBool is_admin) 
{
	if(this->_is_admin == is_admin)
		return;

	this->_is_admin = is_admin;
	emit isAdminChanged();
}

MessagesStickerSet* Update::stickerset() const
{
	return this->_stickerset;
}

void Update::setStickerset(MessagesStickerSet* stickerset) 
{
	if(this->_stickerset == stickerset)
		return;

	this->_stickerset = stickerset;
	emit stickersetChanged();
}

TLTrue Update::isMasks() const
{
	return this->_is_masks;
}

void Update::setIsMasks(TLTrue is_masks) 
{
	if(this->_is_masks == is_masks)
		return;

	this->_is_masks = is_masks;
	emit isMasksChanged();
}

const TLVector<TLLong>& Update::order() const
{
	return this->_order;
}

void Update::setOrder(const TLVector<TLLong>& order) 
{
	if(this->_order == order)
		return;

	this->_order = order;
	emit orderChanged();
}

TLLong Update::queryId() const
{
	return this->_query_id;
}

void Update::setQueryId(TLLong query_id) 
{
	if(this->_query_id == query_id)
		return;

	this->_query_id = query_id;
	emit queryIdChanged();
}

TLString Update::query() const
{
	return this->_query;
}

void Update::setQuery(TLString query) 
{
	if(this->_query == query)
		return;

	this->_query = query;
	emit queryChanged();
}

GeoPoint* Update::geo() const
{
	return this->_geo;
}

void Update::setGeo(GeoPoint* geo) 
{
	if(this->_geo == geo)
		return;

	this->_geo = geo;
	emit geoChanged();
}

TLString Update::offset() const
{
	return this->_offset;
}

void Update::setOffset(TLString offset) 
{
	if(this->_offset == offset)
		return;

	this->_offset = offset;
	emit offsetChanged();
}

TLString Update::idUpdatebotinlinesend() const
{
	return this->_id_updatebotinlinesend;
}

void Update::setIdUpdatebotinlinesend(TLString id_updatebotinlinesend) 
{
	if(this->_id_updatebotinlinesend == id_updatebotinlinesend)
		return;

	this->_id_updatebotinlinesend = id_updatebotinlinesend;
	emit idUpdatebotinlinesendChanged();
}

InputBotInlineMessageID* Update::msgIdUpdatebotinlinesend() const
{
	return this->_msg_id_updatebotinlinesend;
}

void Update::setMsgIdUpdatebotinlinesend(InputBotInlineMessageID* msg_id_updatebotinlinesend) 
{
	if(this->_msg_id_updatebotinlinesend == msg_id_updatebotinlinesend)
		return;

	this->_msg_id_updatebotinlinesend = msg_id_updatebotinlinesend;
	emit msgIdUpdatebotinlinesendChanged();
}

Message* Update::message() const
{
	return this->_message;
}

void Update::setMessage(Message* message) 
{
	if(this->_message == message)
		return;

	this->_message = message;
	emit messageChanged();
}

TLInt Update::idUpdatechannelpinnedmessage() const
{
	return this->_id_updatechannelpinnedmessage;
}

void Update::setIdUpdatechannelpinnedmessage(TLInt id_updatechannelpinnedmessage) 
{
	if(this->_id_updatechannelpinnedmessage == id_updatechannelpinnedmessage)
		return;

	this->_id_updatechannelpinnedmessage = id_updatechannelpinnedmessage;
	emit idUpdatechannelpinnedmessageChanged();
}

TLInt Update::msgIdUpdatebotcallbackquery() const
{
	return this->_msg_id_updatebotcallbackquery;
}

void Update::setMsgIdUpdatebotcallbackquery(TLInt msg_id_updatebotcallbackquery) 
{
	if(this->_msg_id_updatebotcallbackquery == msg_id_updatebotcallbackquery)
		return;

	this->_msg_id_updatebotcallbackquery = msg_id_updatebotcallbackquery;
	emit msgIdUpdatebotcallbackqueryChanged();
}

TLLong Update::chatInstance() const
{
	return this->_chat_instance;
}

void Update::setChatInstance(TLLong chat_instance) 
{
	if(this->_chat_instance == chat_instance)
		return;

	this->_chat_instance = chat_instance;
	emit chatInstanceChanged();
}

TLBytes Update::data() const
{
	return this->_data;
}

void Update::setData(TLBytes data) 
{
	if(this->_data == data)
		return;

	this->_data = data;
	emit dataChanged();
}

TLString Update::gameShortName() const
{
	return this->_game_short_name;
}

void Update::setGameShortName(TLString game_short_name) 
{
	if(this->_game_short_name == game_short_name)
		return;

	this->_game_short_name = game_short_name;
	emit gameShortNameChanged();
}

InputBotInlineMessageID* Update::msgIdUpdateinlinebotcallbackquery() const
{
	return this->_msg_id_updateinlinebotcallbackquery;
}

void Update::setMsgIdUpdateinlinebotcallbackquery(InputBotInlineMessageID* msg_id_updateinlinebotcallbackquery) 
{
	if(this->_msg_id_updateinlinebotcallbackquery == msg_id_updateinlinebotcallbackquery)
		return;

	this->_msg_id_updateinlinebotcallbackquery = msg_id_updateinlinebotcallbackquery;
	emit msgIdUpdateinlinebotcallbackqueryChanged();
}

DraftMessage* Update::draft() const
{
	return this->_draft;
}

void Update::setDraft(DraftMessage* draft) 
{
	if(this->_draft == draft)
		return;

	this->_draft = draft;
	emit draftChanged();
}

