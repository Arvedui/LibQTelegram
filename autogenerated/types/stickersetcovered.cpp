// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "stickersetcovered.h"


StickerSetCovered::StickerSetCovered(QObject* parent) : TelegramObject(parent)
{
	this->_set = NULL;
	this->_cover = NULL;
}

void StickerSetCovered::read(MTProtoStream* mtstream) 
{
	this->_constructorid = mtstream->readTLConstructor();
	
	Q_ASSERT((this->_constructorid == StickerSetCovered::ctorStickerSetCovered) ||
		 (this->_constructorid == StickerSetCovered::ctorStickerSetMultiCovered));
	
	if(this->_constructorid == StickerSetCovered::ctorStickerSetCovered)
	{
		TLInt set_ctor = mtstream->peekTLConstructor();
		
		if(set_ctor != TLTypes::Null)
		{
			RESET_TLTYPE(StickerSet, this->_set);
			this->_set->read(mtstream);
		}
		else
		{
			NULL_TLTYPE(this->_set);
			mtstream->readTLConstructor(); // Skip Null
		}
		
		TLInt cover_ctor = mtstream->peekTLConstructor();
		
		if(cover_ctor != TLTypes::Null)
		{
			RESET_TLTYPE(Document, this->_cover);
			this->_cover->read(mtstream);
		}
		else
		{
			NULL_TLTYPE(this->_cover);
			mtstream->readTLConstructor(); // Skip Null
		}
	}
	else if(this->_constructorid == StickerSetCovered::ctorStickerSetMultiCovered)
	{
		TLInt set_ctor = mtstream->peekTLConstructor();
		
		if(set_ctor != TLTypes::Null)
		{
			RESET_TLTYPE(StickerSet, this->_set);
			this->_set->read(mtstream);
		}
		else
		{
			NULL_TLTYPE(this->_set);
			mtstream->readTLConstructor(); // Skip Null
		}
		
		mtstream->readTLVector<Document>(this->_covers, false);
	}
}

void StickerSetCovered::write(MTProtoStream* mtstream) 
{
	Q_ASSERT((this->_constructorid == StickerSetCovered::ctorStickerSetCovered) ||
		 (this->_constructorid == StickerSetCovered::ctorStickerSetMultiCovered));
	
	this->compileFlags();
	mtstream->writeTLConstructor(this->_constructorid);
	
	if(this->_constructorid == StickerSetCovered::ctorStickerSetCovered)
	{
		if(this->_set != NULL)
			this->_set->write(mtstream);
		else
			mtstream->writeTLConstructor(TLTypes::Null);
		
		if(this->_cover != NULL)
			this->_cover->write(mtstream);
		else
			mtstream->writeTLConstructor(TLTypes::Null);
	}
	else if(this->_constructorid == StickerSetCovered::ctorStickerSetMultiCovered)
	{
		if(this->_set != NULL)
			this->_set->write(mtstream);
		else
			mtstream->writeTLConstructor(TLTypes::Null);
		
		mtstream->writeTLVector(this->_covers, false);
	}
}

void StickerSetCovered::compileFlags() 
{
	
}

StickerSet* StickerSetCovered::set() const
{
	return this->_set;
}

void StickerSetCovered::setSet(StickerSet* set) 
{
	if(this->_set == set)
		return;

	this->_set = set;
	emit setChanged();
}

Document* StickerSetCovered::cover() const
{
	return this->_cover;
}

void StickerSetCovered::setCover(Document* cover) 
{
	if(this->_cover == cover)
		return;

	this->_cover = cover;
	emit coverChanged();
}

const TLVector<Document*>& StickerSetCovered::covers() const
{
	return this->_covers;
}

void StickerSetCovered::setCovers(const TLVector<Document*>& covers) 
{
	if(this->_covers == covers)
		return;

	this->_covers = covers;
	emit coversChanged();
}

