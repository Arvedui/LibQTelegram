// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "photo.h"


Photo::Photo(QObject* parent) : TelegramObject(parent)
{
	this->_id = 0;
	this->_flags = 0;
	this->_has_stickers = false;
	this->_access_hash = 0;
	this->_date = 0;
}

void Photo::read(MTProtoStream* mtstream) 
{
	this->_constructorid = mtstream->readTLConstructor();
	
	Q_ASSERT((this->_constructorid == Photo::CtorPhotoEmpty) ||
		 (this->_constructorid == Photo::CtorPhoto));
	
	if(this->_constructorid == Photo::CtorPhotoEmpty)
		this->_id = mtstream->readTLLong();
	else if(this->_constructorid == Photo::CtorPhoto)
	{
		this->_flags = mtstream->readTLInt();
		this->_has_stickers = IS_FLAG_SET(this->_flags, 0);
		this->_id = mtstream->readTLLong();
		this->_access_hash = mtstream->readTLLong();
		this->_date = mtstream->readTLInt();
		mtstream->readTLVector<PhotoSize>(this->_sizes, false, this);
	}
}

void Photo::write(MTProtoStream* mtstream) 
{
	Q_ASSERT((this->_constructorid == Photo::CtorPhotoEmpty) ||
		 (this->_constructorid == Photo::CtorPhoto));
	
	this->compileFlags();
	mtstream->writeTLConstructor(this->_constructorid);
	
	if(this->_constructorid == Photo::CtorPhotoEmpty)
		mtstream->writeTLLong(this->_id);
	else if(this->_constructorid == Photo::CtorPhoto)
	{
		mtstream->writeTLInt(this->_flags);
		mtstream->writeTLLong(this->_id);
		mtstream->writeTLLong(this->_access_hash);
		mtstream->writeTLInt(this->_date);
		mtstream->writeTLVector(this->_sizes, false);
	}
}

void Photo::compileFlags() 
{
	this->_flags = 0;
	
	if(this->_constructorid == Photo::CtorPhoto)
	{
		if(this->_has_stickers)
			SET_FLAG_BIT(this->_flags, 0);
	}
}

TLLong Photo::id() const
{
	return this->_id;
}

void Photo::setId(TLLong id) 
{
	if(this->_id == id)
		return;

	this->_id = id;
	emit idChanged();
}

TLInt Photo::flags() const
{
	return this->_flags;
}

void Photo::setFlags(TLInt flags) 
{
	if(this->_flags == flags)
		return;

	this->_flags = flags;
	emit flagsChanged();
}

TLTrue Photo::hasStickers() const
{
	return this->_has_stickers;
}

void Photo::setHasStickers(TLTrue has_stickers) 
{
	if(this->_has_stickers == has_stickers)
		return;

	this->_has_stickers = has_stickers;
	emit hasStickersChanged();
}

TLLong Photo::accessHash() const
{
	return this->_access_hash;
}

void Photo::setAccessHash(TLLong access_hash) 
{
	if(this->_access_hash == access_hash)
		return;

	this->_access_hash = access_hash;
	emit accessHashChanged();
}

TLInt Photo::date() const
{
	return this->_date;
}

void Photo::setDate(TLInt date) 
{
	if(this->_date == date)
		return;

	this->_date = date;
	emit dateChanged();
}

const TLVector<PhotoSize*>& Photo::sizes() const
{
	return this->_sizes;
}

void Photo::setSizes(const TLVector<PhotoSize*>& sizes) 
{
	if(this->_sizes == sizes)
		return;

	this->_sizes = sizes;
	emit sizesChanged();
}

