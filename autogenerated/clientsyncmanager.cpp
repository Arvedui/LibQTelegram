// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "clientsyncmanager.h"

void ClientSyncManager::syncUpdate(Update* u, UpdatesState* updatestate) 
{
	if(u->constructorId() == TLTypes::UpdateNewMessage)
		updatestate->setPts(u->pts());
	else if(u->constructorId() == TLTypes::UpdateDeleteMessages)
		updatestate->setPts(u->pts());
	else if(u->constructorId() == TLTypes::UpdateUserPhoto)
		updatestate->setDate(u->date());
	else if(u->constructorId() == TLTypes::UpdateContactRegistered)
		updatestate->setDate(u->date());
	else if(u->constructorId() == TLTypes::UpdateNewAuthorization)
		updatestate->setDate(u->date());
	else if(u->constructorId() == TLTypes::UpdateNewEncryptedMessage)
		updatestate->setQts(u->qts());
	else if(u->constructorId() == TLTypes::UpdateEncryption)
		updatestate->setDate(u->date());
	else if(u->constructorId() == TLTypes::UpdateEncryptedMessagesRead)
		updatestate->setDate(u->date());
	else if(u->constructorId() == TLTypes::UpdateChatParticipantAdd)
		updatestate->setDate(u->date());
	else if(u->constructorId() == TLTypes::UpdateReadHistoryInbox)
		updatestate->setPts(u->pts());
	else if(u->constructorId() == TLTypes::UpdateReadHistoryOutbox)
		updatestate->setPts(u->pts());
	else if(u->constructorId() == TLTypes::UpdateWebPage)
		updatestate->setPts(u->pts());
	else if(u->constructorId() == TLTypes::UpdateReadMessagesContents)
		updatestate->setPts(u->pts());
	else if(u->constructorId() == TLTypes::UpdateChannelTooLong)
		updatestate->setPts(u->pts());
	else if(u->constructorId() == TLTypes::UpdateNewChannelMessage)
		updatestate->setPts(u->pts());
	else if(u->constructorId() == TLTypes::UpdateDeleteChannelMessages)
		updatestate->setPts(u->pts());
	else if(u->constructorId() == TLTypes::UpdateEditChannelMessage)
		updatestate->setPts(u->pts());
	else if(u->constructorId() == TLTypes::UpdateEditMessage)
		updatestate->setPts(u->pts());
}

void ClientSyncManager::syncUpdates(Updates* u, UpdatesState* updatestate) 
{
	if(u->constructorId() == TLTypes::UpdateShortMessage)
	{
		updatestate->setPts(u->pts());
		updatestate->setDate(u->date());
	}
	else if(u->constructorId() == TLTypes::UpdateShortChatMessage)
	{
		updatestate->setPts(u->pts());
		updatestate->setDate(u->date());
	}
	else if(u->constructorId() == TLTypes::UpdateShort)
		updatestate->setDate(u->date());
	else if(u->constructorId() == TLTypes::UpdatesCombined)
	{
		updatestate->setDate(u->date());
		updatestate->setSeq(u->seq());
	}
	else if(u->constructorId() == TLTypes::Updates)
	{
		updatestate->setDate(u->date());
		updatestate->setSeq(u->seq());
	}
	else if(u->constructorId() == TLTypes::UpdateShortSentMessage)
	{
		updatestate->setPts(u->pts());
		updatestate->setDate(u->date());
	}
}

