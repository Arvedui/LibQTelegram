// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "mtprotoapi.h"

MTProtoAPI::MTProtoAPI(QObject* parent) : QObject(parent)
{
}

MTProtoRequest* MTProtoAPI::reqPq(DCSession* session, TLInt128 nonce) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::reqPq);
	mtstream->writeTLInt128(nonce);
	
	return session->sendPlain(mtstream);
}

MTProtoRequest* MTProtoAPI::reqDHParams(DCSession* session, TLInt128 nonce, TLInt128 server_nonce, TLString p, TLString q, TLLong public_key_fingerprint, TLString encrypted_data) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::reqDHParams);
	mtstream->writeTLInt128(nonce);
	mtstream->writeTLInt128(server_nonce);
	mtstream->writeTLString(p);
	mtstream->writeTLString(q);
	mtstream->writeTLLong(public_key_fingerprint);
	mtstream->writeTLString(encrypted_data);
	
	return session->sendPlain(mtstream);
}

MTProtoRequest* MTProtoAPI::setClientDHParams(DCSession* session, TLInt128 nonce, TLInt128 server_nonce, TLString encrypted_data) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::setClientDHParams);
	mtstream->writeTLInt128(nonce);
	mtstream->writeTLInt128(server_nonce);
	mtstream->writeTLString(encrypted_data);
	
	return session->sendPlain(mtstream);
}

MTProtoRequest* MTProtoAPI::rpcDropAnswer(DCSession* session, TLLong req_msg_id) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::rpcDropAnswer);
	mtstream->writeTLLong(req_msg_id);
	
	return session->sendPlain(mtstream);
}

MTProtoRequest* MTProtoAPI::getFutureSalts(DCSession* session, TLInt num) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::getFutureSalts);
	mtstream->writeTLInt(num);
	
	return session->sendPlain(mtstream);
}

MTProtoRequest* MTProtoAPI::ping(DCSession* session, TLLong ping_id) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::ping);
	mtstream->writeTLLong(ping_id);
	
	return session->sendPlain(mtstream);
}

MTProtoRequest* MTProtoAPI::pingDelayDisconnect(DCSession* session, TLLong ping_id, TLInt disconnect_delay) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::pingDelayDisconnect);
	mtstream->writeTLLong(ping_id);
	mtstream->writeTLInt(disconnect_delay);
	
	return session->sendPlain(mtstream);
}

MTProtoRequest* MTProtoAPI::destroySession(DCSession* session, TLLong session_id) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::destroySession);
	mtstream->writeTLLong(session_id);
	
	return session->sendPlain(mtstream);
}

MTProtoRequest* MTProtoAPI::contestSaveDeveloperInfo(DCSession* session, TLInt vk_id, TLString name, TLString phone_number, TLInt age, TLString city) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::contestSaveDeveloperInfo);
	mtstream->writeTLInt(vk_id);
	mtstream->writeTLString(name);
	mtstream->writeTLString(phone_number);
	mtstream->writeTLInt(age);
	mtstream->writeTLString(city);
	
	return session->sendPlain(mtstream);
}

