// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "telegramapi.h"

TelegramAPI::TelegramAPI(QObject* parent) : QObject(parent)
{
}

MTProtoRequest* TelegramAPI::authCheckPhone(DCSession* session, TLString phone_number) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::authCheckPhone);
	mtstream->writeTLString(phone_number);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::authSendCode(DCSession* session, TLString phone_number, TLBool is_current_number, TLInt api_id, TLString api_hash) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::authSendCode);
	
	TLInt flags = 0;
	SET_FLAG_BIT_VALUE(flags, 0, is_current_number);
	mtstream->writeTLInt(flags);
	
	mtstream->writeTLString(phone_number);
	if(IS_FLAG_SET(flags, 0))
		mtstream->writeTLBool(is_current_number);
	
	mtstream->writeTLInt(api_id);
	mtstream->writeTLString(api_hash);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::authSignUp(DCSession* session, TLString phone_number, TLString phone_code_hash, TLString phone_code, TLString first_name, TLString last_name) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::authSignUp);
	mtstream->writeTLString(phone_number);
	mtstream->writeTLString(phone_code_hash);
	mtstream->writeTLString(phone_code);
	mtstream->writeTLString(first_name);
	mtstream->writeTLString(last_name);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::authSignIn(DCSession* session, TLString phone_number, TLString phone_code_hash, TLString phone_code) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::authSignIn);
	mtstream->writeTLString(phone_number);
	mtstream->writeTLString(phone_code_hash);
	mtstream->writeTLString(phone_code);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::authLogOut(DCSession* session) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::authLogOut);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::authResetAuthorizations(DCSession* session) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::authResetAuthorizations);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::authSendInvites(DCSession* session, TLVector<TLString> phone_numbers, TLString message) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::authSendInvites);
	mtstream->writeTLVector<TLString>(phone_numbers);
	mtstream->writeTLString(message);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::authExportAuthorization(DCSession* session, TLInt dc_id) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::authExportAuthorization);
	mtstream->writeTLInt(dc_id);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::authImportAuthorization(DCSession* session, TLInt id, TLBytes bytes) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::authImportAuthorization);
	mtstream->writeTLInt(id);
	mtstream->writeTLBytes(bytes);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::authBindTempAuthKey(DCSession* session, TLLong perm_auth_key_id, TLLong nonce, TLInt expires_at, TLBytes encrypted_message) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::authBindTempAuthKey);
	mtstream->writeTLLong(perm_auth_key_id);
	mtstream->writeTLLong(nonce);
	mtstream->writeTLInt(expires_at);
	mtstream->writeTLBytes(encrypted_message);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::authImportBotAuthorization(DCSession* session, TLInt flags, TLInt api_id, TLString api_hash, TLString bot_auth_token) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::authImportBotAuthorization);
	mtstream->writeTLInt(flags);
	mtstream->writeTLInt(api_id);
	mtstream->writeTLString(api_hash);
	mtstream->writeTLString(bot_auth_token);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::authCheckPassword(DCSession* session, TLBytes password_hash) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::authCheckPassword);
	mtstream->writeTLBytes(password_hash);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::authRequestPasswordRecovery(DCSession* session) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::authRequestPasswordRecovery);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::authRecoverPassword(DCSession* session, TLString code) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::authRecoverPassword);
	mtstream->writeTLString(code);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::authResendCode(DCSession* session, TLString phone_number, TLString phone_code_hash) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::authResendCode);
	mtstream->writeTLString(phone_number);
	mtstream->writeTLString(phone_code_hash);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::authCancelCode(DCSession* session, TLString phone_number, TLString phone_code_hash) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::authCancelCode);
	mtstream->writeTLString(phone_number);
	mtstream->writeTLString(phone_code_hash);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::authDropTempAuthKeys(DCSession* session, TLVector<TLLong> except_auth_keys) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::authDropTempAuthKeys);
	mtstream->writeTLVector<TLLong>(except_auth_keys);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::accountRegisterDevice(DCSession* session, TLInt token_type, TLString token) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::accountRegisterDevice);
	mtstream->writeTLInt(token_type);
	mtstream->writeTLString(token);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::accountUnregisterDevice(DCSession* session, TLInt token_type, TLString token) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::accountUnregisterDevice);
	mtstream->writeTLInt(token_type);
	mtstream->writeTLString(token);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::accountUpdateNotifySettings(DCSession* session, InputNotifyPeer* peer, InputPeerNotifySettings* settings) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::accountUpdateNotifySettings);
	if(peer)
		peer->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	if(settings)
		settings->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::accountGetNotifySettings(DCSession* session, InputNotifyPeer* peer) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::accountGetNotifySettings);
	if(peer)
		peer->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::accountResetNotifySettings(DCSession* session) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::accountResetNotifySettings);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::accountUpdateProfile(DCSession* session, TLString first_name, TLString last_name, TLString about) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::accountUpdateProfile);
	
	TLInt flags = 0;
	SET_FLAG_BIT_VALUE(flags, 0, !first_name.isEmpty());
	SET_FLAG_BIT_VALUE(flags, 1, !last_name.isEmpty());
	SET_FLAG_BIT_VALUE(flags, 2, !about.isEmpty());
	mtstream->writeTLInt(flags);
	
	if(IS_FLAG_SET(flags, 0))
		mtstream->writeTLString(first_name);
	
	if(IS_FLAG_SET(flags, 1))
		mtstream->writeTLString(last_name);
	
	if(IS_FLAG_SET(flags, 2))
		mtstream->writeTLString(about);
	
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::accountUpdateStatus(DCSession* session, TLBool is_offline) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::accountUpdateStatus);
	mtstream->writeTLBool(is_offline);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::accountGetWallPapers(DCSession* session) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::accountGetWallPapers);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::accountReportPeer(DCSession* session, InputPeer* peer, ReportReason* reason) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::accountReportPeer);
	if(peer)
		peer->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	if(reason)
		reason->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::accountCheckUsername(DCSession* session, TLString username) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::accountCheckUsername);
	mtstream->writeTLString(username);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::accountUpdateUsername(DCSession* session, TLString username) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::accountUpdateUsername);
	mtstream->writeTLString(username);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::accountGetPrivacy(DCSession* session, InputPrivacyKey* key) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::accountGetPrivacy);
	if(key)
		key->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::accountSetPrivacy(DCSession* session, InputPrivacyKey* key, TLVector<InputPrivacyRule*> rules) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::accountSetPrivacy);
	if(key)
		key->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	mtstream->writeTLVector(rules);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::accountDeleteAccount(DCSession* session, TLString reason) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::accountDeleteAccount);
	mtstream->writeTLString(reason);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::accountGetAccountTTL(DCSession* session) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::accountGetAccountTTL);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::accountSetAccountTTL(DCSession* session, AccountDaysTTL* ttl) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::accountSetAccountTTL);
	if(ttl)
		ttl->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::accountSendChangePhoneCode(DCSession* session, TLString phone_number, TLBool is_current_number) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::accountSendChangePhoneCode);
	
	TLInt flags = 0;
	SET_FLAG_BIT_VALUE(flags, 0, is_current_number);
	mtstream->writeTLInt(flags);
	
	mtstream->writeTLString(phone_number);
	if(IS_FLAG_SET(flags, 0))
		mtstream->writeTLBool(is_current_number);
	
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::accountChangePhone(DCSession* session, TLString phone_number, TLString phone_code_hash, TLString phone_code) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::accountChangePhone);
	mtstream->writeTLString(phone_number);
	mtstream->writeTLString(phone_code_hash);
	mtstream->writeTLString(phone_code);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::accountUpdateDeviceLocked(DCSession* session, TLInt period) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::accountUpdateDeviceLocked);
	mtstream->writeTLInt(period);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::accountGetAuthorizations(DCSession* session) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::accountGetAuthorizations);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::accountResetAuthorization(DCSession* session, TLLong hash) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::accountResetAuthorization);
	mtstream->writeTLLong(hash);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::accountGetPassword(DCSession* session) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::accountGetPassword);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::accountGetPasswordSettings(DCSession* session, TLBytes current_password_hash) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::accountGetPasswordSettings);
	mtstream->writeTLBytes(current_password_hash);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::accountUpdatePasswordSettings(DCSession* session, TLBytes current_password_hash, AccountPasswordInputSettings* new_settings) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::accountUpdatePasswordSettings);
	mtstream->writeTLBytes(current_password_hash);
	if(new_settings)
		new_settings->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::accountSendConfirmPhoneCode(DCSession* session, TLString hash, TLBool is_current_number) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::accountSendConfirmPhoneCode);
	
	TLInt flags = 0;
	SET_FLAG_BIT_VALUE(flags, 0, is_current_number);
	mtstream->writeTLInt(flags);
	
	mtstream->writeTLString(hash);
	if(IS_FLAG_SET(flags, 0))
		mtstream->writeTLBool(is_current_number);
	
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::accountConfirmPhone(DCSession* session, TLString phone_code_hash, TLString phone_code) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::accountConfirmPhone);
	mtstream->writeTLString(phone_code_hash);
	mtstream->writeTLString(phone_code);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::usersGetUsers(DCSession* session, TLVector<InputUser*> id) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::usersGetUsers);
	mtstream->writeTLVector(id);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::usersGetFullUser(DCSession* session, InputUser* id) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::usersGetFullUser);
	if(id)
		id->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::contactsGetStatuses(DCSession* session) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::contactsGetStatuses);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::contactsGetContacts(DCSession* session, TLString hash) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::contactsGetContacts);
	mtstream->writeTLString(hash);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::contactsImportContacts(DCSession* session, TLVector<InputContact*> contacts, TLBool is_replace) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::contactsImportContacts);
	mtstream->writeTLVector(contacts);
	mtstream->writeTLBool(is_replace);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::contactsDeleteContact(DCSession* session, InputUser* id) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::contactsDeleteContact);
	if(id)
		id->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::contactsDeleteContacts(DCSession* session, TLVector<InputUser*> id) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::contactsDeleteContacts);
	mtstream->writeTLVector(id);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::contactsBlock(DCSession* session, InputUser* id) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::contactsBlock);
	if(id)
		id->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::contactsUnblock(DCSession* session, InputUser* id) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::contactsUnblock);
	if(id)
		id->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::contactsGetBlocked(DCSession* session, TLInt offset, TLInt limit) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::contactsGetBlocked);
	mtstream->writeTLInt(offset);
	mtstream->writeTLInt(limit);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::contactsExportCard(DCSession* session) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::contactsExportCard);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::contactsImportCard(DCSession* session, TLVector<TLInt> export_card) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::contactsImportCard);
	mtstream->writeTLVector<TLInt>(export_card);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::contactsSearch(DCSession* session, TLString q, TLInt limit) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::contactsSearch);
	mtstream->writeTLString(q);
	mtstream->writeTLInt(limit);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::contactsResolveUsername(DCSession* session, TLString username) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::contactsResolveUsername);
	mtstream->writeTLString(username);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::contactsGetTopPeers(DCSession* session, TLInt offset, TLInt limit, TLInt hash) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::contactsGetTopPeers);
	
	TLInt flags = 0;
	mtstream->writeTLInt(flags);
	
	mtstream->writeTLInt(offset);
	mtstream->writeTLInt(limit);
	mtstream->writeTLInt(hash);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::contactsResetTopPeerRating(DCSession* session, TopPeerCategory* category, InputPeer* peer) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::contactsResetTopPeerRating);
	if(category)
		category->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	if(peer)
		peer->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesGetMessages(DCSession* session, TLVector<TLInt> id) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesGetMessages);
	mtstream->writeTLVector<TLInt>(id);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesGetDialogs(DCSession* session, TLInt offset_date, TLInt offset_id, InputPeer* offset_peer, TLInt limit) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesGetDialogs);
	mtstream->writeTLInt(offset_date);
	mtstream->writeTLInt(offset_id);
	if(offset_peer)
		offset_peer->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	mtstream->writeTLInt(limit);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesGetHistory(DCSession* session, InputPeer* peer, TLInt offset_id, TLInt offset_date, TLInt add_offset, TLInt limit, TLInt max_id, TLInt min_id) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesGetHistory);
	if(peer)
		peer->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	mtstream->writeTLInt(offset_id);
	mtstream->writeTLInt(offset_date);
	mtstream->writeTLInt(add_offset);
	mtstream->writeTLInt(limit);
	mtstream->writeTLInt(max_id);
	mtstream->writeTLInt(min_id);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesSearch(DCSession* session, InputPeer* peer, TLString q, MessagesFilter* filter, TLInt min_date, TLInt max_date, TLInt offset, TLInt max_id, TLInt limit) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesSearch);
	
	TLInt flags = 0;
	mtstream->writeTLInt(flags);
	
	if(peer)
		peer->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	mtstream->writeTLString(q);
	if(filter)
		filter->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	mtstream->writeTLInt(min_date);
	mtstream->writeTLInt(max_date);
	mtstream->writeTLInt(offset);
	mtstream->writeTLInt(max_id);
	mtstream->writeTLInt(limit);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesReadHistory(DCSession* session, InputPeer* peer, TLInt max_id) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesReadHistory);
	if(peer)
		peer->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	mtstream->writeTLInt(max_id);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesDeleteHistory(DCSession* session, InputPeer* peer, TLInt max_id) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesDeleteHistory);
	
	TLInt flags = 0;
	mtstream->writeTLInt(flags);
	
	if(peer)
		peer->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	mtstream->writeTLInt(max_id);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesDeleteMessages(DCSession* session, TLVector<TLInt> id) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesDeleteMessages);
	mtstream->writeTLVector<TLInt>(id);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesReceivedMessages(DCSession* session, TLInt max_id) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesReceivedMessages);
	mtstream->writeTLInt(max_id);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesSetTyping(DCSession* session, InputPeer* peer, SendMessageAction* action) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesSetTyping);
	if(peer)
		peer->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	if(action)
		action->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesSendMessage(DCSession* session, InputPeer* peer, TLInt reply_to_msg_id, TLString message, TLLong random_id, ReplyMarkup* reply_markup, TLVector<MessageEntity*> entities) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesSendMessage);
	
	TLInt flags = 0;
	SET_FLAG_BIT_VALUE(flags, 0, reply_to_msg_id);
	SET_FLAG_BIT_VALUE(flags, 2, reply_markup);
	SET_FLAG_BIT_VALUE(flags, 3, !entities.isEmpty());
	mtstream->writeTLInt(flags);
	
	if(peer)
		peer->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	if(IS_FLAG_SET(flags, 0))
		mtstream->writeTLInt(reply_to_msg_id);
	
	mtstream->writeTLString(message);
	mtstream->writeTLLong(random_id);
	if(IS_FLAG_SET(flags, 2))
	{
		if(reply_markup)
			reply_markup->write(mtstream);
		else
			mtstream->writeTLConstructor(TLTypes::Null);
	}
	
	if(IS_FLAG_SET(flags, 3))
		mtstream->writeTLVector(entities);
	
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesSendMedia(DCSession* session, InputPeer* peer, TLInt reply_to_msg_id, InputMedia* media, TLLong random_id, ReplyMarkup* reply_markup) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesSendMedia);
	
	TLInt flags = 0;
	SET_FLAG_BIT_VALUE(flags, 0, reply_to_msg_id);
	SET_FLAG_BIT_VALUE(flags, 2, reply_markup);
	mtstream->writeTLInt(flags);
	
	if(peer)
		peer->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	if(IS_FLAG_SET(flags, 0))
		mtstream->writeTLInt(reply_to_msg_id);
	
	if(media)
		media->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	mtstream->writeTLLong(random_id);
	if(IS_FLAG_SET(flags, 2))
	{
		if(reply_markup)
			reply_markup->write(mtstream);
		else
			mtstream->writeTLConstructor(TLTypes::Null);
	}
	
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesForwardMessages(DCSession* session, InputPeer* from_peer, TLVector<TLInt> id, TLVector<TLLong> random_id, InputPeer* to_peer) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesForwardMessages);
	
	TLInt flags = 0;
	mtstream->writeTLInt(flags);
	
	if(from_peer)
		from_peer->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	mtstream->writeTLVector<TLInt>(id);
	mtstream->writeTLVector<TLLong>(random_id);
	if(to_peer)
		to_peer->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesReportSpam(DCSession* session, InputPeer* peer) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesReportSpam);
	if(peer)
		peer->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesHideReportSpam(DCSession* session, InputPeer* peer) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesHideReportSpam);
	if(peer)
		peer->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesGetPeerSettings(DCSession* session, InputPeer* peer) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesGetPeerSettings);
	if(peer)
		peer->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesGetChats(DCSession* session, TLVector<TLInt> id) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesGetChats);
	mtstream->writeTLVector<TLInt>(id);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesGetFullChat(DCSession* session, TLInt chat_id) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesGetFullChat);
	mtstream->writeTLInt(chat_id);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesEditChatTitle(DCSession* session, TLInt chat_id, TLString title) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesEditChatTitle);
	mtstream->writeTLInt(chat_id);
	mtstream->writeTLString(title);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesEditChatPhoto(DCSession* session, TLInt chat_id, InputChatPhoto* photo) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesEditChatPhoto);
	mtstream->writeTLInt(chat_id);
	if(photo)
		photo->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesAddChatUser(DCSession* session, TLInt chat_id, InputUser* user_id, TLInt fwd_limit) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesAddChatUser);
	mtstream->writeTLInt(chat_id);
	if(user_id)
		user_id->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	mtstream->writeTLInt(fwd_limit);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesDeleteChatUser(DCSession* session, TLInt chat_id, InputUser* user_id) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesDeleteChatUser);
	mtstream->writeTLInt(chat_id);
	if(user_id)
		user_id->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesCreateChat(DCSession* session, TLVector<InputUser*> users, TLString title) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesCreateChat);
	mtstream->writeTLVector(users);
	mtstream->writeTLString(title);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesForwardMessage(DCSession* session, InputPeer* peer, TLInt id, TLLong random_id) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesForwardMessage);
	if(peer)
		peer->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	mtstream->writeTLInt(id);
	mtstream->writeTLLong(random_id);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesGetDhConfig(DCSession* session, TLInt version, TLInt random_length) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesGetDhConfig);
	mtstream->writeTLInt(version);
	mtstream->writeTLInt(random_length);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesRequestEncryption(DCSession* session, InputUser* user_id, TLInt random_id, TLBytes g_a) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesRequestEncryption);
	if(user_id)
		user_id->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	mtstream->writeTLInt(random_id);
	mtstream->writeTLBytes(g_a);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesAcceptEncryption(DCSession* session, InputEncryptedChat* peer, TLBytes g_b, TLLong key_fingerprint) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesAcceptEncryption);
	if(peer)
		peer->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	mtstream->writeTLBytes(g_b);
	mtstream->writeTLLong(key_fingerprint);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesDiscardEncryption(DCSession* session, TLInt chat_id) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesDiscardEncryption);
	mtstream->writeTLInt(chat_id);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesSetEncryptedTyping(DCSession* session, InputEncryptedChat* peer, TLBool is_typing) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesSetEncryptedTyping);
	if(peer)
		peer->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	mtstream->writeTLBool(is_typing);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesReadEncryptedHistory(DCSession* session, InputEncryptedChat* peer, TLInt max_date) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesReadEncryptedHistory);
	if(peer)
		peer->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	mtstream->writeTLInt(max_date);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesSendEncrypted(DCSession* session, InputEncryptedChat* peer, TLLong random_id, TLBytes data) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesSendEncrypted);
	if(peer)
		peer->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	mtstream->writeTLLong(random_id);
	mtstream->writeTLBytes(data);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesSendEncryptedFile(DCSession* session, InputEncryptedChat* peer, TLLong random_id, TLBytes data, InputEncryptedFile* file) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesSendEncryptedFile);
	if(peer)
		peer->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	mtstream->writeTLLong(random_id);
	mtstream->writeTLBytes(data);
	if(file)
		file->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesSendEncryptedService(DCSession* session, InputEncryptedChat* peer, TLLong random_id, TLBytes data) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesSendEncryptedService);
	if(peer)
		peer->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	mtstream->writeTLLong(random_id);
	mtstream->writeTLBytes(data);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesReceivedQueue(DCSession* session, TLInt max_qts) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesReceivedQueue);
	mtstream->writeTLInt(max_qts);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesReadMessageContents(DCSession* session, TLVector<TLInt> id) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesReadMessageContents);
	mtstream->writeTLVector<TLInt>(id);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesGetAllStickers(DCSession* session, TLInt hash) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesGetAllStickers);
	mtstream->writeTLInt(hash);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesGetWebPagePreview(DCSession* session, TLString message) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesGetWebPagePreview);
	mtstream->writeTLString(message);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesExportChatInvite(DCSession* session, TLInt chat_id) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesExportChatInvite);
	mtstream->writeTLInt(chat_id);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesCheckChatInvite(DCSession* session, TLString hash) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesCheckChatInvite);
	mtstream->writeTLString(hash);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesImportChatInvite(DCSession* session, TLString hash) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesImportChatInvite);
	mtstream->writeTLString(hash);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesGetStickerSet(DCSession* session, InputStickerSet* stickerset) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesGetStickerSet);
	if(stickerset)
		stickerset->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesInstallStickerSet(DCSession* session, InputStickerSet* stickerset, TLBool is_archived) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesInstallStickerSet);
	if(stickerset)
		stickerset->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	mtstream->writeTLBool(is_archived);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesUninstallStickerSet(DCSession* session, InputStickerSet* stickerset) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesUninstallStickerSet);
	if(stickerset)
		stickerset->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesStartBot(DCSession* session, InputUser* bot, InputPeer* peer, TLLong random_id, TLString start_param) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesStartBot);
	if(bot)
		bot->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	if(peer)
		peer->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	mtstream->writeTLLong(random_id);
	mtstream->writeTLString(start_param);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesGetMessagesViews(DCSession* session, InputPeer* peer, TLVector<TLInt> id, TLBool is_increment) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesGetMessagesViews);
	if(peer)
		peer->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	mtstream->writeTLVector<TLInt>(id);
	mtstream->writeTLBool(is_increment);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesToggleChatAdmins(DCSession* session, TLInt chat_id, TLBool is_enabled) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesToggleChatAdmins);
	mtstream->writeTLInt(chat_id);
	mtstream->writeTLBool(is_enabled);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesEditChatAdmin(DCSession* session, TLInt chat_id, InputUser* user_id, TLBool is_admin) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesEditChatAdmin);
	mtstream->writeTLInt(chat_id);
	if(user_id)
		user_id->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	mtstream->writeTLBool(is_admin);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesMigrateChat(DCSession* session, TLInt chat_id) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesMigrateChat);
	mtstream->writeTLInt(chat_id);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesSearchGlobal(DCSession* session, TLString q, TLInt offset_date, InputPeer* offset_peer, TLInt offset_id, TLInt limit) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesSearchGlobal);
	mtstream->writeTLString(q);
	mtstream->writeTLInt(offset_date);
	if(offset_peer)
		offset_peer->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	mtstream->writeTLInt(offset_id);
	mtstream->writeTLInt(limit);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesReorderStickerSets(DCSession* session, TLVector<TLLong> order) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesReorderStickerSets);
	
	TLInt flags = 0;
	mtstream->writeTLInt(flags);
	
	mtstream->writeTLVector<TLLong>(order);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesGetDocumentByHash(DCSession* session, TLBytes sha256, TLInt size, TLString mime_type) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesGetDocumentByHash);
	mtstream->writeTLBytes(sha256);
	mtstream->writeTLInt(size);
	mtstream->writeTLString(mime_type);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesSearchGifs(DCSession* session, TLString q, TLInt offset) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesSearchGifs);
	mtstream->writeTLString(q);
	mtstream->writeTLInt(offset);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesGetSavedGifs(DCSession* session, TLInt hash) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesGetSavedGifs);
	mtstream->writeTLInt(hash);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesSaveGif(DCSession* session, InputDocument* id, TLBool is_unsave) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesSaveGif);
	if(id)
		id->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	mtstream->writeTLBool(is_unsave);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesGetInlineBotResults(DCSession* session, InputUser* bot, InputPeer* peer, InputGeoPoint* geo_point, TLString query, TLString offset) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesGetInlineBotResults);
	
	TLInt flags = 0;
	SET_FLAG_BIT_VALUE(flags, 0, geo_point);
	mtstream->writeTLInt(flags);
	
	if(bot)
		bot->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	if(peer)
		peer->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	if(IS_FLAG_SET(flags, 0))
	{
		if(geo_point)
			geo_point->write(mtstream);
		else
			mtstream->writeTLConstructor(TLTypes::Null);
	}
	
	mtstream->writeTLString(query);
	mtstream->writeTLString(offset);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesSetInlineBotResults(DCSession* session, TLLong query_id, TLVector<InputBotInlineResult*> results, TLInt cache_time, TLString next_offset, InlineBotSwitchPM* switch_pm) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesSetInlineBotResults);
	
	TLInt flags = 0;
	SET_FLAG_BIT_VALUE(flags, 2, !next_offset.isEmpty());
	SET_FLAG_BIT_VALUE(flags, 3, switch_pm);
	mtstream->writeTLInt(flags);
	
	mtstream->writeTLLong(query_id);
	mtstream->writeTLVector(results);
	mtstream->writeTLInt(cache_time);
	if(IS_FLAG_SET(flags, 2))
		mtstream->writeTLString(next_offset);
	
	if(IS_FLAG_SET(flags, 3))
	{
		if(switch_pm)
			switch_pm->write(mtstream);
		else
			mtstream->writeTLConstructor(TLTypes::Null);
	}
	
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesSendInlineBotResult(DCSession* session, InputPeer* peer, TLInt reply_to_msg_id, TLLong random_id, TLLong query_id, TLString id) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesSendInlineBotResult);
	
	TLInt flags = 0;
	SET_FLAG_BIT_VALUE(flags, 0, reply_to_msg_id);
	mtstream->writeTLInt(flags);
	
	if(peer)
		peer->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	if(IS_FLAG_SET(flags, 0))
		mtstream->writeTLInt(reply_to_msg_id);
	
	mtstream->writeTLLong(random_id);
	mtstream->writeTLLong(query_id);
	mtstream->writeTLString(id);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesGetMessageEditData(DCSession* session, InputPeer* peer, TLInt id) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesGetMessageEditData);
	if(peer)
		peer->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	mtstream->writeTLInt(id);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesEditMessage(DCSession* session, InputPeer* peer, TLInt id, TLString message, ReplyMarkup* reply_markup, TLVector<MessageEntity*> entities) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesEditMessage);
	
	TLInt flags = 0;
	SET_FLAG_BIT_VALUE(flags, 11, !message.isEmpty());
	SET_FLAG_BIT_VALUE(flags, 2, reply_markup);
	SET_FLAG_BIT_VALUE(flags, 3, !entities.isEmpty());
	mtstream->writeTLInt(flags);
	
	if(peer)
		peer->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	mtstream->writeTLInt(id);
	if(IS_FLAG_SET(flags, 11))
		mtstream->writeTLString(message);
	
	if(IS_FLAG_SET(flags, 2))
	{
		if(reply_markup)
			reply_markup->write(mtstream);
		else
			mtstream->writeTLConstructor(TLTypes::Null);
	}
	
	if(IS_FLAG_SET(flags, 3))
		mtstream->writeTLVector(entities);
	
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesEditInlineBotMessage(DCSession* session, InputBotInlineMessageID* id, TLString message, ReplyMarkup* reply_markup, TLVector<MessageEntity*> entities) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesEditInlineBotMessage);
	
	TLInt flags = 0;
	SET_FLAG_BIT_VALUE(flags, 11, !message.isEmpty());
	SET_FLAG_BIT_VALUE(flags, 2, reply_markup);
	SET_FLAG_BIT_VALUE(flags, 3, !entities.isEmpty());
	mtstream->writeTLInt(flags);
	
	if(id)
		id->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	if(IS_FLAG_SET(flags, 11))
		mtstream->writeTLString(message);
	
	if(IS_FLAG_SET(flags, 2))
	{
		if(reply_markup)
			reply_markup->write(mtstream);
		else
			mtstream->writeTLConstructor(TLTypes::Null);
	}
	
	if(IS_FLAG_SET(flags, 3))
		mtstream->writeTLVector(entities);
	
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesGetBotCallbackAnswer(DCSession* session, InputPeer* peer, TLInt msg_id, TLBytes data) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesGetBotCallbackAnswer);
	
	TLInt flags = 0;
	SET_FLAG_BIT_VALUE(flags, 0, !data.isEmpty());
	mtstream->writeTLInt(flags);
	
	if(peer)
		peer->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	mtstream->writeTLInt(msg_id);
	if(IS_FLAG_SET(flags, 0))
		mtstream->writeTLBytes(data);
	
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesSetBotCallbackAnswer(DCSession* session, TLLong query_id, TLString message, TLString url) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesSetBotCallbackAnswer);
	
	TLInt flags = 0;
	SET_FLAG_BIT_VALUE(flags, 0, !message.isEmpty());
	SET_FLAG_BIT_VALUE(flags, 2, !url.isEmpty());
	mtstream->writeTLInt(flags);
	
	mtstream->writeTLLong(query_id);
	if(IS_FLAG_SET(flags, 0))
		mtstream->writeTLString(message);
	
	if(IS_FLAG_SET(flags, 2))
		mtstream->writeTLString(url);
	
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesGetPeerDialogs(DCSession* session, TLVector<InputPeer*> peers) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesGetPeerDialogs);
	mtstream->writeTLVector(peers);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesSaveDraft(DCSession* session, TLInt reply_to_msg_id, InputPeer* peer, TLString message, TLVector<MessageEntity*> entities) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesSaveDraft);
	
	TLInt flags = 0;
	SET_FLAG_BIT_VALUE(flags, 0, reply_to_msg_id);
	SET_FLAG_BIT_VALUE(flags, 3, !entities.isEmpty());
	mtstream->writeTLInt(flags);
	
	if(IS_FLAG_SET(flags, 0))
		mtstream->writeTLInt(reply_to_msg_id);
	
	if(peer)
		peer->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	mtstream->writeTLString(message);
	if(IS_FLAG_SET(flags, 3))
		mtstream->writeTLVector(entities);
	
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesGetAllDrafts(DCSession* session) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesGetAllDrafts);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesGetFeaturedStickers(DCSession* session, TLInt hash) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesGetFeaturedStickers);
	mtstream->writeTLInt(hash);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesReadFeaturedStickers(DCSession* session, TLVector<TLLong> id) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesReadFeaturedStickers);
	mtstream->writeTLVector<TLLong>(id);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesGetRecentStickers(DCSession* session, TLInt hash) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesGetRecentStickers);
	
	TLInt flags = 0;
	mtstream->writeTLInt(flags);
	
	mtstream->writeTLInt(hash);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesSaveRecentSticker(DCSession* session, InputDocument* id, TLBool is_unsave) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesSaveRecentSticker);
	
	TLInt flags = 0;
	mtstream->writeTLInt(flags);
	
	if(id)
		id->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	mtstream->writeTLBool(is_unsave);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesClearRecentStickers(DCSession* session) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesClearRecentStickers);
	
	TLInt flags = 0;
	mtstream->writeTLInt(flags);
	
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesGetArchivedStickers(DCSession* session, TLLong offset_id, TLInt limit) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesGetArchivedStickers);
	
	TLInt flags = 0;
	mtstream->writeTLInt(flags);
	
	mtstream->writeTLLong(offset_id);
	mtstream->writeTLInt(limit);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesGetMaskStickers(DCSession* session, TLInt hash) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesGetMaskStickers);
	mtstream->writeTLInt(hash);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesGetAttachedStickers(DCSession* session, InputStickeredMedia* media) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesGetAttachedStickers);
	if(media)
		media->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesSetGameScore(DCSession* session, InputPeer* peer, TLInt id, InputUser* user_id, TLInt score) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesSetGameScore);
	
	TLInt flags = 0;
	mtstream->writeTLInt(flags);
	
	if(peer)
		peer->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	mtstream->writeTLInt(id);
	if(user_id)
		user_id->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	mtstream->writeTLInt(score);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesSetInlineGameScore(DCSession* session, InputBotInlineMessageID* id, InputUser* user_id, TLInt score) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesSetInlineGameScore);
	
	TLInt flags = 0;
	mtstream->writeTLInt(flags);
	
	if(id)
		id->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	if(user_id)
		user_id->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	mtstream->writeTLInt(score);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesGetGameHighScores(DCSession* session, InputPeer* peer, TLInt id, InputUser* user_id) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesGetGameHighScores);
	if(peer)
		peer->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	mtstream->writeTLInt(id);
	if(user_id)
		user_id->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::messagesGetInlineGameHighScores(DCSession* session, InputBotInlineMessageID* id, InputUser* user_id) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::messagesGetInlineGameHighScores);
	if(id)
		id->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	if(user_id)
		user_id->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::updatesGetState(DCSession* session) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::updatesGetState);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::updatesGetDifference(DCSession* session, TLInt pts, TLInt date, TLInt qts) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::updatesGetDifference);
	mtstream->writeTLInt(pts);
	mtstream->writeTLInt(date);
	mtstream->writeTLInt(qts);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::updatesGetChannelDifference(DCSession* session, InputChannel* channel, ChannelMessagesFilter* filter, TLInt pts, TLInt limit) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::updatesGetChannelDifference);
	if(channel)
		channel->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	if(filter)
		filter->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	mtstream->writeTLInt(pts);
	mtstream->writeTLInt(limit);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::photosUpdateProfilePhoto(DCSession* session, InputPhoto* id) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::photosUpdateProfilePhoto);
	if(id)
		id->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::photosUploadProfilePhoto(DCSession* session, InputFile* file) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::photosUploadProfilePhoto);
	if(file)
		file->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::photosDeletePhotos(DCSession* session, TLVector<InputPhoto*> id) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::photosDeletePhotos);
	mtstream->writeTLVector(id);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::photosGetUserPhotos(DCSession* session, InputUser* user_id, TLInt offset, TLLong max_id, TLInt limit) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::photosGetUserPhotos);
	if(user_id)
		user_id->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	mtstream->writeTLInt(offset);
	mtstream->writeTLLong(max_id);
	mtstream->writeTLInt(limit);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::uploadSaveFilePart(DCSession* session, TLLong file_id, TLInt file_part, TLBytes bytes) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::uploadSaveFilePart);
	mtstream->writeTLLong(file_id);
	mtstream->writeTLInt(file_part);
	mtstream->writeTLBytes(bytes);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::uploadGetFile(DCSession* session, InputFileLocation* location, TLInt offset, TLInt limit) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::uploadGetFile);
	if(location)
		location->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	mtstream->writeTLInt(offset);
	mtstream->writeTLInt(limit);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::uploadSaveBigFilePart(DCSession* session, TLLong file_id, TLInt file_part, TLInt file_total_parts, TLBytes bytes) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::uploadSaveBigFilePart);
	mtstream->writeTLLong(file_id);
	mtstream->writeTLInt(file_part);
	mtstream->writeTLInt(file_total_parts);
	mtstream->writeTLBytes(bytes);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::helpGetConfig(DCSession* session) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::helpGetConfig);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::helpGetNearestDc(DCSession* session) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::helpGetNearestDc);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::helpGetAppUpdate(DCSession* session) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::helpGetAppUpdate);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::helpSaveAppLog(DCSession* session, TLVector<InputAppEvent*> events) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::helpSaveAppLog);
	mtstream->writeTLVector(events);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::helpGetInviteText(DCSession* session) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::helpGetInviteText);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::helpGetSupport(DCSession* session) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::helpGetSupport);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::helpGetAppChangelog(DCSession* session) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::helpGetAppChangelog);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::helpGetTermsOfService(DCSession* session) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::helpGetTermsOfService);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::channelsReadHistory(DCSession* session, InputChannel* channel, TLInt max_id) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::channelsReadHistory);
	if(channel)
		channel->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	mtstream->writeTLInt(max_id);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::channelsDeleteMessages(DCSession* session, InputChannel* channel, TLVector<TLInt> id) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::channelsDeleteMessages);
	if(channel)
		channel->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	mtstream->writeTLVector<TLInt>(id);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::channelsDeleteUserHistory(DCSession* session, InputChannel* channel, InputUser* user_id) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::channelsDeleteUserHistory);
	if(channel)
		channel->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	if(user_id)
		user_id->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::channelsReportSpam(DCSession* session, InputChannel* channel, InputUser* user_id, TLVector<TLInt> id) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::channelsReportSpam);
	if(channel)
		channel->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	if(user_id)
		user_id->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	mtstream->writeTLVector<TLInt>(id);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::channelsGetMessages(DCSession* session, InputChannel* channel, TLVector<TLInt> id) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::channelsGetMessages);
	if(channel)
		channel->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	mtstream->writeTLVector<TLInt>(id);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::channelsGetParticipants(DCSession* session, InputChannel* channel, ChannelParticipantsFilter* filter, TLInt offset, TLInt limit) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::channelsGetParticipants);
	if(channel)
		channel->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	if(filter)
		filter->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	mtstream->writeTLInt(offset);
	mtstream->writeTLInt(limit);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::channelsGetParticipant(DCSession* session, InputChannel* channel, InputUser* user_id) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::channelsGetParticipant);
	if(channel)
		channel->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	if(user_id)
		user_id->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::channelsGetChannels(DCSession* session, TLVector<InputChannel*> id) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::channelsGetChannels);
	mtstream->writeTLVector(id);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::channelsGetFullChannel(DCSession* session, InputChannel* channel) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::channelsGetFullChannel);
	if(channel)
		channel->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::channelsCreateChannel(DCSession* session, TLString title, TLString about) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::channelsCreateChannel);
	
	TLInt flags = 0;
	mtstream->writeTLInt(flags);
	
	mtstream->writeTLString(title);
	mtstream->writeTLString(about);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::channelsEditAbout(DCSession* session, InputChannel* channel, TLString about) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::channelsEditAbout);
	if(channel)
		channel->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	mtstream->writeTLString(about);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::channelsEditAdmin(DCSession* session, InputChannel* channel, InputUser* user_id, ChannelParticipantRole* role) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::channelsEditAdmin);
	if(channel)
		channel->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	if(user_id)
		user_id->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	if(role)
		role->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::channelsEditTitle(DCSession* session, InputChannel* channel, TLString title) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::channelsEditTitle);
	if(channel)
		channel->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	mtstream->writeTLString(title);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::channelsEditPhoto(DCSession* session, InputChannel* channel, InputChatPhoto* photo) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::channelsEditPhoto);
	if(channel)
		channel->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	if(photo)
		photo->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::channelsCheckUsername(DCSession* session, InputChannel* channel, TLString username) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::channelsCheckUsername);
	if(channel)
		channel->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	mtstream->writeTLString(username);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::channelsUpdateUsername(DCSession* session, InputChannel* channel, TLString username) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::channelsUpdateUsername);
	if(channel)
		channel->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	mtstream->writeTLString(username);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::channelsJoinChannel(DCSession* session, InputChannel* channel) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::channelsJoinChannel);
	if(channel)
		channel->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::channelsLeaveChannel(DCSession* session, InputChannel* channel) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::channelsLeaveChannel);
	if(channel)
		channel->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::channelsInviteToChannel(DCSession* session, InputChannel* channel, TLVector<InputUser*> users) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::channelsInviteToChannel);
	if(channel)
		channel->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	mtstream->writeTLVector(users);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::channelsKickFromChannel(DCSession* session, InputChannel* channel, InputUser* user_id, TLBool is_kicked) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::channelsKickFromChannel);
	if(channel)
		channel->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	if(user_id)
		user_id->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	mtstream->writeTLBool(is_kicked);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::channelsExportInvite(DCSession* session, InputChannel* channel) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::channelsExportInvite);
	if(channel)
		channel->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::channelsDeleteChannel(DCSession* session, InputChannel* channel) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::channelsDeleteChannel);
	if(channel)
		channel->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::channelsToggleInvites(DCSession* session, InputChannel* channel, TLBool is_enabled) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::channelsToggleInvites);
	if(channel)
		channel->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	mtstream->writeTLBool(is_enabled);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::channelsExportMessageLink(DCSession* session, InputChannel* channel, TLInt id) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::channelsExportMessageLink);
	if(channel)
		channel->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	mtstream->writeTLInt(id);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::channelsToggleSignatures(DCSession* session, InputChannel* channel, TLBool is_enabled) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::channelsToggleSignatures);
	if(channel)
		channel->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	mtstream->writeTLBool(is_enabled);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::channelsUpdatePinnedMessage(DCSession* session, InputChannel* channel, TLInt id) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::channelsUpdatePinnedMessage);
	
	TLInt flags = 0;
	mtstream->writeTLInt(flags);
	
	if(channel)
		channel->write(mtstream);
	else
		mtstream->writeTLConstructor(TLTypes::Null);
	
	mtstream->writeTLInt(id);
	
	return session->sendEncrypted(mtstream);
}

MTProtoRequest* TelegramAPI::channelsGetAdminedPublicChannels(DCSession* session) 
{
	MTProtoStream* mtstream = new MTProtoStream();
	
	mtstream->writeTLConstructor(TLTypes::channelsGetAdminedPublicChannels);
	
	return session->sendEncrypted(mtstream);
}

