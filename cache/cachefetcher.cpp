#include "cachefetcher.h"
#include "../autogenerated/telegramapi.h"
#include "../mtproto/dc/dcsessionmanager.h"
#include "../types/telegramhelper.h"

#define ChannelDifferenceLimit 100

CacheFetcher::CacheFetcher(QObject *parent) : QObject(parent), _update(NULL)
{

}

void CacheFetcher::getChannelDifference(Chat *chat, TLInt pts)
{
    this->getChannelDifference(TelegramHelper::inputChannel(chat), pts);
}

void CacheFetcher::getFullChat(Chat *chat)
{
    if(TelegramHelper::isChannel(chat))
    {
        InputChannel* inputchannel = TelegramHelper::inputChannel(chat);
        MTProtoRequest* req = TelegramAPI::channelsGetFullChannel(DC_MainSession, inputchannel);
        inputchannel->deleteLater();
        connect(req, &MTProtoRequest::replied, this, &CacheFetcher::onChatFull);
        return;
    }

    MTProtoRequest* req = TelegramAPI::messagesGetFullChat(DC_MainSession, chat->id());
    connect(req, &MTProtoRequest::replied, this, &CacheFetcher::onChatFull);
}

void CacheFetcher::getChannelDifference(InputChannel *inputchannel, TLInt pts)
{
    MTProtoRequest* req = TelegramAPI::updatesGetChannelDifference(DC_MainSession, inputchannel, NULL, (!pts ? 1 : pts), ChannelDifferenceLimit);
    this->_inputchannels[req->requestId()] = inputchannel;

    connect(req, &MTProtoRequest::replied, this, &CacheFetcher::onChannelDifferenceReceived);
}

void CacheFetcher::onChannelDifferenceReceived(MTProtoReply *mtreply)
{
    UpdatesChannelDifference updateschanneldifference;
    updateschanneldifference.read(mtreply);

    Q_ASSERT(this->_inputchannels.contains(mtreply->requestId()));
    InputChannel* inputchannel = this->_inputchannels.take(mtreply->requestId());

    if(updateschanneldifference.constructorId() == TLTypes::UpdatesChannelDifferenceTooLong)
    {
        this->getChannelDifference(inputchannel, updateschanneldifference.pts());
        return;
    }

    inputchannel->deleteLater();
}

void CacheFetcher::onChatFull(MTProtoReply *mtreply)
{
    MessagesChatFull chatfull;
    chatfull.read(mtreply);

    emit usersReceived(chatfull.users());
    emit chatFullReceived(chatfull.fullChat());
}
