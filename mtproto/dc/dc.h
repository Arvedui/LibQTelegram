#ifndef DC_H
#define DC_H

#include <QTimer>
#include <QHash>
#include "../../autogenerated/mtproto/decompiler/mtprotodecompiler.h"
#include "../../types/time.h"
#include "../mtprotoservicehandler.h"
#include "../mtprotorequest.h"
#include "../mtprotoreply.h"
#include "dcconnection.h"

class DC : public DCConnection
{
    Q_OBJECT

    public:
        explicit DC(DCConfig* dcconfig, bool filedc, QObject *parent = 0);
        bool fileDc() const;
        MTProtoRequest* lastRequest() const;
        void sendPlain(MTProtoStream* mtstream);
        void send(MTProtoRequest *req);
        void keepRequest(MTProtoRequest *req);
        void repeatRequests(TLLong sessionid);
        MTProtoRequest* giveRequest();
        void addSessionRef();
        void removeSessionRef();

    protected:
        virtual void timerEvent(QTimerEvent *event);

    private:
        void freeOwnedRequests();
        void decompile(int direction, TLLong messageid, const QByteArray &body);
        void handleReply(const QByteArray& message);
        void assignMessageId(MTProtoRequest *req);
        void checkSyncronization(MTProtoReply* mtreply);
        TLInt generateContentMsgNo();
        TLInt getPacketLength();

    private slots:
        void repeatRequest(TLLong messageid, TLLong newsessionid = 0);
        void handleReply(MTProtoReply* mtreply);
        void onAck(const TLVector<TLLong>& msgids);
        void onAckRequest(TLLong reqmsgid);
        void onServerSaltChanged(TLLong newserversalt, TLLong reqmsgid);
        void onDeltaTimeChanged(TLLong deltatime, TLLong reqmsgid);
        void onDcFloodClock(int seconds);
        void onRequestTimeout(TLLong messageid);
        void onDCUnauthorized();
        void onDCReadyRead();
        void onDCConnected();

    signals:
        void authorizationReply(MTProtoReply* mtreply);
        void migrateDC(DCConfig* fromdcconfig, int dcid);
        void floodLock(int seconds);
        void phoneCodeError(QString errormessage);
        void invalidPassword();
        void sessionPasswordNeeded();
        void unauthorized();
        void timeout();

    private:
        QHash<TLLong, MTProtoRequest*> _pendingrequests; // Queries sent and waiting for ACKs
        MTProtoServiceHandler* _mtservicehandler;
        MTProtoDecompiler* _mtdecompiler;
        MTProtoRequest* _savedrequest;
        TLInt _lastpacketlen;
        TLInt _contentmsgno;
        TLLong _lastmsgid;
        int _ownedsessions;
        int _timcloseconnection;
        bool _filedc;

    private:
        static TLLong _lastclientmsgid;
};

#endif // DC_H
