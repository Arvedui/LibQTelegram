#include "mtprotoupdatehandler.h"
#include "../autogenerated/telegramapi.h"
#include "../config/telegramconfig.h"
#include "dc/dcsessionmanager.h"

MTProtoUpdateHandler* MTProtoUpdateHandler::_instance = NULL;

MTProtoUpdateHandler::MTProtoUpdateHandler(QObject *parent) : QObject(parent), _syncmode(false)
{

}

MTProtoUpdateHandler *MTProtoUpdateHandler::instance()
{
    if(!MTProtoUpdateHandler::_instance)
        MTProtoUpdateHandler::_instance = new MTProtoUpdateHandler();

    return MTProtoUpdateHandler::_instance;
}

bool MTProtoUpdateHandler::handle(MTProtoReply *mtreply)
{
    //if(mtreply->constructorId() == TLTypes::Updates)
        //return this->handleUpdates(mtreply);

    return false;
}

void MTProtoUpdateHandler::sync()
{
    //UpdatesState* updatesstate = DC_CONFIG_UPDATES_STATE;
    //TelegramAPI::updatesGetDifference(DC_MAIN_SESSION, updatesstate->pts(), updatesstate->date(), updatesstate->qts());
}

void MTProtoUpdateHandler::syncState(Updates *updates)
{
    UpdatesState* updatesstate = DC_CONFIG_UPDATES_STATE;
    updatesstate->setPts(updates->pts());
    updatesstate->setDate(updates->date());
    updatesstate->setSeq(updates->seq());
}

bool MTProtoUpdateHandler::handleUpdates(MTProtoReply *mtreply)
{
    Updates updates;
    updates.read(mtreply);

    const TLVector<Update*>& updatelist = updates.updates();
    this->syncState(&updates);

    for(int i = 0; i < updatelist.length(); i++)
    {
        Update* update = updatelist[i];

        if(!this->handleUpdate(update))
            return false;
    }

    return true;
}

bool MTProtoUpdateHandler::handleUpdate(Update *update)
{
    if(update->constructorId() == TLTypes::UpdateNewAuthorization)
        return this->handleUpdateNewAuthorization(update);

    return false;
}

bool MTProtoUpdateHandler::handleUpdateNewAuthorization(Update *update)
{
    Q_UNUSED(update);

    //this->sync();
    return true;
}
